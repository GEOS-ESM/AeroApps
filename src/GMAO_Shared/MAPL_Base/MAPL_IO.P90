!  $Id: MAPL_IO.P90,v 1.55.2.13 2014-01-30 19:20:07 atrayano Exp $

#include "MAPL_ErrLog.h"

!BOP

! !MODULE: MAPL_IO -- A Module to do I/O (ASCII+binary) until ESMF fully supports it


! !INTERFACE:

module MAPL_IOMod

  use ESMF
  use MAPL_BaseMod
  use MAPL_CommsMod
  use MAPL_SortMod
  use, intrinsic :: ISO_C_BINDING
  use, intrinsic :: iso_fortran_env

  implicit none
  private

  public GETFILEUNIT
  public GETFILE
  public FREE_FILE
  public READ_PARALLEL
  public WRITE_PARALLEL
  public MAPL_VarRead
  public MAPL_VarWrite
  public MAPL_Skip
  public MAPL_Backspace
  public MAPL_Rewind
  public MAPL_ClimUpdate 
  public MAPL_DestroyFile
  public ArrDescr
  public ArrDescrSet
  public MAPL_TileMaskGet
  public MAPL_VarReadNCPar
  public MAPL_VarWriteNCPar

! Interfaces:
! -----------

  interface WRITE_PARALLEL
     module procedure WRITE_PARALLEL_I4_0
     module procedure WRITE_PARALLEL_I4_1
     module procedure WRITE_PARALLEL_R4_0
     module procedure WRITE_PARALLEL_R4_1
     module procedure WRITE_PARALLEL_R8_0
     module procedure WRITE_PARALLEL_R8_1
     module procedure WRITE_PARALLEL_STRING_0
  end interface

  interface READ_PARALLEL
     module procedure READ_PARALLEL_STRING_0
     module procedure READ_PARALLEL_I4_0
     module procedure READ_PARALLEL_I4_1
     module procedure READ_PARALLEL_I4_2
     module procedure READ_PARALLEL_R4_0
     module procedure READ_PARALLEL_R4_1
     module procedure READ_PARALLEL_R4_2
     module procedure READ_PARALLEL_R8_0
     module procedure READ_PARALLEL_R8_1
     module procedure READ_PARALLEL_R8_2
  end interface

! -----------------------------------------
  interface MAPL_VarRead
     module procedure MAPL_StateVarRead
     module procedure MAPL_BundleRead 
     module procedure MAPL_FieldRead 
     module procedure MAPL_VarRead_R4_1D
     module procedure MAPL_VarReadNCpar_R4_1d
     module procedure MAPL_VarRead_R4_2D
     module procedure MAPL_VarReadNCpar_R4_2d
     module procedure MAPL_VarRead_R4_3d
     module procedure MAPL_VarReadNCpar_R4_3d
     module procedure MAPL_VarRead_R4_4D
     module procedure MAPL_VarRead_R8_1D
     module procedure MAPL_VarReadNCpar_R8_1d
     module procedure MAPL_VarRead_R8_2D
     module procedure MAPL_VarReadNCpar_R8_2d
     module procedure MAPL_VarRead_R8_3D
     module procedure MAPL_VarReadNCpar_R8_3d
     module procedure MAPL_VarRead_R8_4D
  end interface

  interface MAPL_VarReadNCPar
     module procedure MAPL_StateVarReadNCPar
     module procedure MAPL_BundleReadNCPar
     module procedure MAPL_ArrayReadNCpar_1d 
     module procedure MAPL_ArrayReadNCpar_2d 
     module procedure MAPL_ArrayReadNCpar_3d 
  end interface

  interface MAPL_VarWriteNCPar
     module procedure MAPL_StateVarWriteNCPar
     module procedure MAPL_BundleWriteNCPar 
  end interface

  interface MAPL_VarWrite
     module procedure MAPL_StateVarWrite
     module procedure MAPL_BundleWrite 
     module procedure MAPL_FieldWrite 
     module procedure MAPL_VarWrite_I4_1D
     module procedure MAPL_VarWrite_R4_1D
     module procedure MAPL_VarWriteNCpar_R4_1d
     module procedure MAPL_VarWrite_R4_2d
     module procedure MAPL_VarWriteNCpar_R4_2d
     module procedure MAPL_VarWrite_R4_3D
     module procedure MAPL_VarWriteNCpar_R4_3d
     module procedure MAPL_VarWrite_R4_4D
     module procedure MAPL_VarWrite_R8_1D
     module procedure MAPL_VarWriteNCpar_R8_1d
     module procedure MAPL_VarWrite_R8_2D
     module procedure MAPL_VarWriteNCpar_R8_2d
     module procedure MAPL_VarWrite_R8_3D
     module procedure MAPL_VarWriteNCpar_R8_3d
     module procedure MAPL_VarWrite_R8_4D
  end interface

  include "mpif.h"
  include "netcdf.inc"

! Global vars:
! ------------

  integer, parameter :: STD_OUT_UNIT_NUMBER = 6
  integer, parameter :: LAST_UNIT = 999
  integer, parameter :: UNDEF = 999
  logical, save      :: TAKEN(LAST_UNIT)=.FALSE.
  logical, save      :: MTAKEN(LAST_UNIT)=.FALSE.
  character(len=ESMF_MAXSTR), save  :: mname(LAST_UNIT)

  integer, parameter :: not_allocated = 0
  integer, parameter :: r4_2 = 1
  integer, parameter :: r4_1 = 2
  integer, parameter :: r8_2 = 3
  integer, parameter :: r8_1 = 4
  integer, parameter :: i4_2 = 5
  integer, parameter :: i4_1 = 6

  type PTR
   integer :: allocated=not_allocated
   real(kind=ESMF_KIND_R4)   , pointer :: r4_2(:,:) => null()
   real(kind=ESMF_KIND_R4)   , pointer :: r4_1(:) => null()
   real(kind=ESMF_KIND_R4)             :: r4_0
   real(kind=ESMF_KIND_R8)   , pointer :: r8_2(:,:) => null()
   real(kind=ESMF_KIND_R8)   , pointer :: r8_1(:) => null()
   real(kind=ESMF_KIND_R8)             :: r8_0
   integer(kind=ESMF_KIND_I4), pointer :: I4_2(:,:) => null()
   integer(kind=ESMF_KIND_I4), pointer :: I4_1(:) => null()
   integer(kind=ESMF_KIND_I4)          :: I4_0
  end type PTR

  type memunit
     integer :: prevrec = 0
     type (PTR), pointer :: Records(:)=>null()
  end type MEMUNIT

  type (memunit), target, save :: MEM_UNITS(LAST_UNIT)
  type (memunit), pointer      :: munit
  type(PTR), pointer           :: REC(:)

  type ArrDescr
     integer(kind=MPI_OFFSET_KIND) :: offset
     integer(kind=MPI_OFFSET_KIND) :: offset1
     integer(kind=MPI_OFFSET_KIND) :: offset2
     character(len=MPI_MAX_INFO_VAL) :: romio_cb_read,cb_buffer_size,romio_cb_write
     integer :: Xcomm, Ycomm
     integer :: readers_comm, IOscattercomm
     integer :: writers_comm, IOgathercomm
     integer, pointer :: i1(:), in(:), j1(:), jn(:)
     integer :: im_world, jm_world, lm_world
     type (ESMF_Grid) :: grid
     logical :: tile
  end type ArrDescr

  type MAPL_NCParVarSpec
     integer :: nvars
     integer, pointer :: vlocation(:)
     integer, pointer :: vdim(:)
     character(len=ESMF_MAXSTR), pointer :: vname(:)
     character(len=ESMF_MAXSTR), pointer :: vtitle(:)
     character(len=ESMF_MAXSTR), pointer :: vunit(:)
  end type MAPL_NCParVarSpec     

!#define TIME_MPIIO
#ifdef TIME_MPIIO
  real(kind=ESMF_KIND_R8), save :: peak_ioread_bandwidth=0
  real(kind=ESMF_KIND_R8), save :: mean_ioread_bandwidth=0
  real(kind=ESMF_KIND_R8), save :: ioread_counter=0
  real(kind=ESMF_KIND_R8), save :: peak_iowrite_bandwidth=0
  real(kind=ESMF_KIND_R8), save :: mean_iowrite_bandwidth=0
  real(kind=ESMF_KIND_R8), save :: iowrite_counter=0
#endif

  contains

    subroutine ArrDescrSet(ArrDes, offset, &
         readers_comm, ioscattercomm, &
         writers_comm, iogathercomm, &
         i1, in, j1, jn, im_world, jm_world, lm_world)

      type(ArrDescr),                 intent(INOUT) :: ArrDes
      integer(kind=MPI_OFFSET_KIND), &
                           optional,  intent(IN   ) :: offset
      integer, optional,              intent(IN   ) :: readers_comm, ioscattercomm
      integer, optional,              intent(IN   ) :: writers_comm, iogathercomm
      integer, optional, pointer                    :: i1(:), in(:), j1(:), jn(:)
      integer, optional,              intent(IN   ) :: im_world, jm_world, lm_world

      if(present(offset  )) ArrDes%offset   = offset
      if(present(readers_comm )) ArrDes%readers_comm  = readers_comm
      if(present(ioscattercomm)) ArrDes%ioscattercomm = ioscattercomm
      if(present(writers_comm )) ArrDes%writers_comm  = writers_comm
      if(present(iogathercomm )) ArrDes%iogathercomm  = iogathercomm
      if(present(i1      )) ArrDes%i1       => i1
      if(present(in      )) ArrDes%in       => in
      if(present(j1      )) ArrDes%j1       => j1
      if(present(jn      )) ArrDes%jn       => jn
      if(present(im_world)) ArrDes%im_world = im_world
      if(present(jm_world)) ArrDes%jm_world = jm_world
      if(present(lm_world)) ArrDes%lm_world = lm_world

    end subroutine ArrDescrSet

  INTEGER FUNCTION GETFILEMEM(name,  RC )
    IMPLICIT NONE
    character(LEN=*), intent(in   )           :: Name
    integer         , intent(  out), OPTIONAL :: RC

    integer :: i
    logical :: found

    found = .false.
    do i = 3, last_unit
       if(name==Mname(i)) then
          found = .true.
          exit
       end if
    end do

    if (.not. found) then
       do i = 3,last_unit
          if(.not.MTAKEN(i)) then
             found = .true.
             exit
          endif
       enddo
    end if

    if (.not. found) then
       if(present(rc)) rc = 1
       return
    endif

    mname(i)   = name
    mtaken(i)  = .true.
    getfilemem = -i

    if(present(rc)) rc = 0
    return
  end function getfilemem

  INTEGER FUNCTION GETFILEUNIT(name,  RC )
    IMPLICIT NONE
    character(LEN=*), intent(in   )           :: Name
    integer         , intent(  out), OPTIONAL :: RC
     
    integer :: i
    logical :: found
     
    found = .false.
    do i = 2, last_unit
       if(name==Mname(i)) then
          found = .true.
          exit
       end if
    end do
     
    if (.not. found) then
       do i = 2,last_unit
          if(.not.MTAKEN(i)) then
             found = .true.
             exit
          endif
       enddo
    end if

    if (.not. found) then
       if(present(rc)) rc = 1
       return
    endif
     
    mname(i)   = name 
    mtaken(i)  = .true.
    getfileunit = i
     
    if(present(rc)) rc = 0
    return
  end function getfileunit

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


  INTEGER FUNCTION GETFILE( NAME, DO_OPEN, FORM, ALL_PES, &
                             BLOCKSIZE, NUMBUFFERS, RC )
    IMPLICIT NONE

    character(LEN=*), intent(in   )           :: Name
    integer         , intent(in   ), OPTIONAL :: DO_OPEN
    character(LEN=*), intent(in   ), OPTIONAL :: Form
    logical         , intent(in   ), OPTIONAL :: ALL_PES
    integer         , intent(in   ), OPTIONAL :: BLOCKSIZE
    integer         , intent(in   ), OPTIONAL :: NUMBUFFERS
    integer         , intent(  out), OPTIONAL :: RC
    
    INTEGER I
    integer :: DO_OPEN_
    logical :: ALL_PES_
    character(len=ESMF_MAXSTR)     :: Iam="GETFILE"
    integer          :: status
    
    LOGICAL FILEOPEN, UNITOPEN, FOUND 

    if(INDEX(NAME,'*') /= 0) then
        getfile = getfilemem(name,rc=status)
	VERIFY_(STATUS)
        RETURN_(ESMF_SUCCESS) 
    endif

    if (NAME == "stdout" .or. NAME== "STDOUT") then
       GETFILE = STD_OUT_UNIT_NUMBER
       RETURN_(ESMF_SUCCESS) 
    end if

    if (.not. present(DO_OPEN)) then
       DO_OPEN_ = 1
    else
       DO_OPEN_ = DO_OPEN
    end if
    
    ALL_PES_ = .false.
    if (present(ALL_PES)) then
       ALL_PES_ = ALL_PES
    end if
      
    if (.not. MAPL_AM_I_ROOT() .and. .not. ALL_PES_) then
       GETFILE = UNDEF
       RETURN_(ESMF_SUCCESS) 
    end if

!   Check if the file is already open

    INQUIRE ( FILE=NAME, NUMBER=GETFILE, OPENED=FILEOPEN )

!   If the file isnt already open THEN

    IF ( .NOT. FILEOPEN ) THEN
       I = 20
       FOUND = .FALSE.
       DO WHILE ( I.LE.LAST_UNIT .AND. .NOT.FOUND ) 
          IF ( .NOT. TAKEN(I) ) THEN
             TAKEN(I) = .TRUE.
             INQUIRE ( UNIT=I, OPENED=UNITOPEN )
             IF ( .NOT. UNITOPEN ) THEN
                
                status = 0
                
                if ( DO_OPEN_ .NE. 0 ) then
                   call MAPL_open(UNIT=i,FILE=Name,FORM=FORM, &
                                  BLOCKSIZE= BLOCKSIZE, NUMBUFFERS=NUMBUFFERS, RC=STATUS)
                endif
                
                if ( status /= 0 ) then
                   write (0,*) 'ERROR opening "',trim(Name),'" using GETFILE'
                   write (0,*) ' IOSTAT = ',status
                   RETURN_(ESMF_FAILURE)
                endif
               
                GETFILE = I
                FOUND = .TRUE.
             ENDIF
          ENDIF
          I = I + 1
       ENDDO
!
!      IF there are no available logical units THEN
!         Write an error message
!         Return Error status
!      ENDIF there are no available logical units
!  
       IF ( .NOT. FOUND ) THEN
          WRITE (0,*) ' COULD NOT FIND ANY AVAILABLE UNITS '
          RETURN_(ESMF_FAILURE)
       ENDIF

    ENDIF ! the file isnt already open 

    RETURN_(ESMF_SUCCESS) 
  END FUNCTION GETFILE

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  SUBROUTINE FREE_FILE(UNIT, RC)
    implicit none
    integer         , intent(out), OPTIONAL :: RC

    character(len=ESMF_MAXSTR)     :: Iam="FREE_FILE"
    integer          :: status
    integer :: UNIT
    logical :: ALL_OPEN_

    if(UNIT < 0) then

      ASSERT_(-UNIT<=LAST_UNIT)
      ASSERT_(MTAKEN(-UNIT))
      MEM_units(-unit)%PREVREC=0

    ELSE

    if (UNIT == STD_OUT_UNIT_NUMBER) return
    if (UNIT /= UNDEF) then
       close(UNIT)

       IF (UNIT.LT.1 .OR. UNIT.GT.LAST_UNIT) THEN
          WRITE (0,*) ' BAD UNIT NUMBER  ZFILCLR  UNIT = ', UNIT
          RETURN_(ESMF_FAILURE)
       ELSE
          TAKEN(UNIT) = .FALSE.
          MTAKEN(UNIT) = .FALSE. 
       ENDIF
    end if

    END IF

    RETURN_(ESMF_SUCCESS)
  END SUBROUTINE FREE_FILE

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine MAPL_Destroyfile(unit,  RC )
    IMPLICIT NONE
    integer         , intent(in   )           :: unit
    integer         , intent(  out), OPTIONAL :: RC

    integer :: i,k

    if (unit < 0) then
       i = -unit
       if (associated(mem_units(i)%records)) then
          do k=1,size(mem_units(i)%records)
             call dealloc_(mem_units(i)%records(k))
          end do
          deallocate(mem_units(i)%records)
       end if
       mtaken(i)  = .false.
    end if

    if(present(rc)) rc = 0
    return
  end subroutine MAPL_Destroyfile
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


  subroutine MAPL_OPEN(UNIT,FILE,FORM,BLOCKSIZE, NUMBUFFERS, RC)

    implicit none
    integer         , optional, intent(out) :: RC

    integer         ,           intent(in) :: UNIT
    character(LEN=*),           intent(in) :: FILE
    character(LEN=*), optional, intent(in) :: FORM
    integer,          optional, intent(in) :: BLOCKSIZE, NUMBUFFERS
    character(len=ESMF_MAXSTR)     :: Iam="MAPL_OPEN"
    integer          :: status

    character(LEN=ESMF_MAXSTR) :: usableFORM

    if(MAPL_AM_I_ROOT()) then
       if(.not.present(BLOCKSIZE) .and. .not.present(NUMBUFFERS)) then
          print *, "NOT using buffer I/O for file: ", trim(file)
       else
          print *, "Using buffer I/O for file: ", trim(file)
       endif
    endif
        
    if (present(FORM)) then
       usableFORM = FORM
    else
       usableFORM = "unformatted"
    end if

    open(UNIT,FILE=FILE,FORM=usableFORM,IOSTAT=STATUS)
    VERIFY_(STATUS)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_OPEN

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!--WRITES ------------------

!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "write_parallel.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "write_parallel.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 3
#include "write_parallel.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "write_parallel.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 4
#include "write_parallel.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "write_parallel.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 0
#include "write_parallel.H"


!-READS --------------------

! Rank 0
!---------------------------
#define RANK_ 0
#define VARTYPE_ 0
#include "read_parallel.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 1
#include "read_parallel.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 3
#include "read_parallel.H"

!---------------------------
#define RANK_ 0
#define VARTYPE_ 4
#include "read_parallel.H"

! Rank 1
!---------------------------
#define RANK_ 1
#define VARTYPE_ 1
#include "read_parallel.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "read_parallel.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "read_parallel.H"

! Rank 2
!---------------------------
#define RANK_ 2
#define VARTYPE_ 1
#include "read_parallel.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "read_parallel.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "read_parallel.H"

!---------------------------
! Read routines
!---------------------------

  subroutine MAPL_StateVarRead(UNIT, STATE, NAME, arrdes, ignoreEOF, RC)
    integer                     , intent(IN   ) :: UNIT
    type (ESMF_State)           , intent(INOUT) :: STATE
    character(len=*),   optional, intent(IN   ) :: NAME
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    logical,            optional, intent(IN   ) :: ignoreEOF
    integer,            optional, intent(  OUT) :: RC

! Local vars
    type (ESMF_FieldBundle)              :: bundle
    type (ESMF_Field)                    :: field
    type (ESMF_Grid)                     :: grid
    integer                              :: status
    integer                              :: I, N
    character(len=ESMF_MAXSTR)           :: IAm='MAPL_StateVarRead'
    integer                              :: J, ITEMCOUNT
    type (ESMF_StateItem_Flag), pointer  :: ITEMTYPES(:)
    character(len=ESMF_MAXSTR ), pointer :: ITEMNAMES(:)
    logical, pointer                     :: DOIT(:)
    integer                              :: DIMS
    integer, pointer                     :: MASK(:) => null()
    
    type (ESMF_Array)                  :: array
    integer                            :: rank, varid, ind
    logical                            :: skipReading
    integer                            :: RST
    character(len=ESMF_MAXSTR)         :: FieldName

    integer, allocatable :: orderlist(:)
    integer :: jj
    character(len=ESMF_MAXSTR)           :: attrName
    character(len=ESMF_MAXSTR), allocatable :: currList(:)
    integer                                 :: natt

    
    call ESMF_StateGet(STATE,ITEMCOUNT=ITEMCOUNT,RC=STATUS)
    VERIFY_(STATUS)

    ASSERT_(ITEMCOUNT>0)

    allocate(ITEMNAMES(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)
    allocate(ITEMTYPES(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)
    allocate(     DOIT(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)

    call ESMF_StateGet(STATE,ITEMNAMELIST=ITEMNAMES,&
                       ITEMTYPELIST=ITEMTYPES,RC=STATUS)
    VERIFY_(STATUS)

    if(present(NAME)) then
       DOIT = ITEMNAMES==NAME
       ASSERT_(count(DOIT)/=0)
    else
       DOIT = .true.
    endif

    attrName = MAPL_StateItemOrderList
    call ESMF_AttributeGet(state, NAME=attrName, itemcount=natt, RC=STATUS)
    VERIFY_(STATUS)

    ASSERT_(natt > 0)
    allocate(orderlist(natt), stat=status)
    VERIFY_(STATUS)
    allocate(currList(natt), stat=status)
    VERIFY_(STATUS)

    ! get the current list
    call ESMF_AttributeGet(state, NAME=attrName, VALUELIST=currList, rc=status)
    VERIFY_(STATUS)

    orderList = -1 ! not found
    do i = 1, natt
       ! search loop
       do jj = 1, ITEMCOUNT
          if (itemNames(jj) == currList(i)) then
             orderList(i) = jj
             exit
          end if
       end do
    end do

    deallocate(currList)

    do JJ = 1, natt

       I = ORDERLIST(JJ)
       if (DOIT(I)) then


#ifdef TIME_MPIIO
    call write_parallel(itemnames(i))
#endif

          if (ITEMTYPES(I) == ESMF_StateItem_FieldBundle) then
             call ESMF_StateGet(state, itemnames(i), bundle, rc=status)
             VERIFY_(STATUS)

             skipReading = .false.
             call ESMF_AttributeGet(bundle, name='RESTART', value=RST, rc=status)
             if (STATUS == ESMF_SUCCESS) then
                skipReading = (RST == 0)
             end if
             if (skipReading) cycle

             call MAPL_BundleRead(unit, bundle, arrdes=arrdes, rc=status)
             VERIFY_(STATUS)

          else if (ITEMTYPES(I) == ESMF_StateItem_Field) then
             call ESMF_StateGet(state, itemnames(i), field, rc=status)
             VERIFY_(STATUS)

             skipReading = .false.
             call ESMF_AttributeGet(field, name='RESTART', value=RST, rc=status)
             if (STATUS == ESMF_SUCCESS) then
                skipReading = (RST == 0)
             end if
             if (skipReading) cycle
             call ESMF_AttributeGet(field, name='doNotAllocate', value=RST, rc=status)
             if (STATUS == ESMF_SUCCESS) then
                skipReading = (RST /= 0)
             end if
             if (skipReading) cycle

             if(.not.associated(MASK)) then
                call ESMF_AttributeGet(field, name='DIMS', value=DIMS, rc=status)
                VERIFY_(STATUS)
                if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
                   call ESMF_FieldGet   (field, grid=grid, rc=status)
                   VERIFY_(STATUS)
                   call MAPL_TileMaskGet(grid,  mask, rc=status)
                   VERIFY_(STATUS)
                else
                   allocate(Mask(1))
                endif
             endif
      
             call MAPL_FieldRead(unit, field, arrdes=arrdes, HomePE=Mask, ignoreEOF=ignoreEOF, rc=status)
             VERIFY_(STATUS)

!ALT          else
!ALT             ASSERT_(.false.)

          end if

       end if

    end do

    deallocate(orderlist)
    deallocate(ITEMNAMES)
    deallocate(ITEMTYPES)
    deallocate(     DOIT)
    if(associated(MASK)) deallocate(MASK)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_StateVarRead
!---------------------------


  subroutine MAPL_BundleRead(UNIT,BUNDLE, ARRDES, RC)
    integer                     , intent(IN   ) :: UNIT
    type (ESMF_FieldBundle)     , intent(INOUT) :: BUNDLE
    type(ArrDescr),    optional , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

    integer                            :: status
    integer                            :: J, N, varid, fieldCount, ind
    character(len=ESMF_MAXSTR)         :: IAm='MAPL_BundleRead'
    type (ESMF_Field)                  :: field
    character(len=ESMF_MAXSTR),allocatable  :: nameList(:)
    character(len=ESMF_MAXSTR)              :: FieldName, BundleName

    call ESMF_FieldBundleGet(bundle, fieldCount=N, name=BundleName, rc=STATUS)
    VERIFY_(STATUS)
    allocate(namelist(N), stat=status)
    VERIFY_(STATUS)
    call ESMF_FieldBundleGet(bundle, fieldNameList=nameList, fieldCount=FieldCount,  rc=STATUS)
    VERIFY_(STATUS)
    ASSERT_(N==fieldCount)

    do J = 1, N
       call MAPL_FieldBundleGet(bundle, fieldIndex=J, field=field, rc=status)
       VERIFY_(STATUS)

       call MAPL_FieldRead     (unit, field, arrdes=ARRDES,        rc=status)
       VERIFY_(STATUS)

    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_BundleRead


  subroutine MAPL_FieldRead(UNIT,FIELD, ARRDES, HomePE, varid, ignoreEOF, RC)
    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Field)           , intent(INOUT) :: field
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer, target,   optional , intent(IN   ) :: HomePE(:)
    integer,           optional , intent(IN   ) :: varid
    logical,           optional , intent(IN   ) :: ignoreEOF
    integer,           optional , intent(  OUT) :: RC

! Local vars
    type (ESMF_Array)                  :: array
    type (ESMF_DELayout)               :: layout
    type (ESMF_Grid)                   :: GRID
    integer                            :: rank
    integer                            :: status
    real(KIND=ESMF_KIND_R4), pointer, dimension(:)        :: var_1d
    real(KIND=ESMF_KIND_R4), pointer, dimension(:,:)      :: var_2d
    real(KIND=ESMF_KIND_R4), pointer, dimension(:,:,:)    :: var_3d
    real(KIND=ESMF_KIND_R4), pointer, dimension(:,:,:,:)  :: var_4d

    real(KIND=ESMF_KIND_R8), pointer, dimension(:)        :: vr8_1d
    real(KIND=ESMF_KIND_R8), pointer, dimension(:,:)      :: vr8_2d
    real(KIND=ESMF_KIND_R8), pointer, dimension(:,:,:)    :: vr8_3d
    real(KIND=ESMF_KIND_R8), pointer, dimension(:,:,:,:)  :: vr8_4d
    type(ESMF_TypeKind_Flag)           :: tk
    character(len=ESMF_MAXSTR)         :: FORMATTED
    integer                            :: count
    integer                            :: dims
    integer                            :: J, K
    integer, pointer                   :: mask(:)
    character(len=ESMF_MAXSTR)         :: IAm='MAPL_FieldRead'
    type (ESMF_DistGrid)               :: distGrid
    integer                            :: stat
    logical                            :: ignoreEOF_

    if (unit < 0 .or. present(arrdes)) then
       FORMATTED = "NO"
    else
       inquire(unit=UNIT, formatted=FORMATTED)
    end if

    if (present(ignoreEOF)) then
       ignoreEOF_ = ignoreEOF
    else
       ignoreEOF_ = .false.
    end if

    call ESMF_FieldGet(field, grid=grid, rc=status)
    VERIFY_(STATUS)
    call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
    VERIFY_(STATUS)
    call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
    VERIFY_(STATUS)

    if (ignoreEOF_) then
       ! test for end-of-file by 
       ! making a blank read followed by backspace

       if (MAPL_am_i_root(layout)) then
          read (UNIT, IOSTAT=status)
       end if
       call MAPL_CommsBcast(layout, status, n=1, ROOT=MAPL_Root, rc=stat)
       VERIFY_(STAT)

       if (status == IOSTAT_END) then
          RETURN_(ESMF_SUCCESS)
       end if
       VERIFY_(STATUS)

       call MAPL_Backspace(UNIT, layout, rc=status)
       VERIFY_(STATUS)
    end if

    call ESMF_AttributeGet(field, name='DIMS', value=DIMS, rc=status)
    VERIFY_(STATUS)
    if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
       if(present(HomePE)) then
          mask => HomePE
       else
          call MAPL_TileMaskGet(grid, mask, rc=status)
          VERIFY_(STATUS)
       endif
    end if

    call ESMF_FieldGet(field, Array=array, rc=status)
    VERIFY_(STATUS)
    call ESMF_ArrayGet(array, typekind=tk, rank=rank, rc=status)
    VERIFY_(STATUS)

    if (rank == 1) then
       if (tk == ESMF_TYPEKIND_R4) then
          call ESMF_ArrayGet(array, localDE=0, farrayptr=var_1d, rc=status)
          VERIFY_(STATUS)
          if (associated(var_1d)) then
             if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
                if(present(varid)) then
                   call MAPL_VarRead(layout, unit, varid, var_1d, arrdes=arrdes, mask=mask, rc=status)
                   VERIFY_(STATUS)
                else
                   call MAPL_VarRead(unit, grid, var_1d, arrdes=arrdes, mask=mask, rc=status)
                   VERIFY_(STATUS)
                endif
             else if (DIMS == MAPL_DimsVertOnly) then
                if(present(varid)) then
                   call MAPL_VarRead(layout, unit, varid, var_1d, arrdes=arrdes, rc=status)
                   VERIFY_(STATUS)
                else
                   call READ_PARALLEL(layout, var_1d, unit, arrdes=arrdes, rc=status)
                endif
             else 
                RETURN_(ESMF_FAILURE)
             endif
          end if
       else
          call ESMF_ArrayGet(array, localDE=0, farrayptr=vr8_1d, rc=status)
          VERIFY_(STATUS)
          if (associated(vr8_1d)) then
             if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
                if(present(varid)) then
                   print*,'R8_1d TileOnly not coded yet'
                   ASSERT_(.FALSE.)
!                   call MAPL_VarRead(unit, grid, varid, vr8_1d, arrdes=arrdes, mask=mask, rc=status)
                else
                   call MAPL_VarRead(unit, grid, vr8_1d, arrdes=arrdes, mask=mask, rc=status)
                endif
             else if (DIMS == MAPL_DimsVertOnly) then
                if(present(varid)) then
!                   call MAPL_VarRead(grid, unit, varid, vr8_1d, rc=status)
                   call MAPL_VarRead(layout, unit, varid, vr8_1d, arrdes=arrdes, rc=status)
                   VERIFY_(STATUS)
                else
                   call READ_PARALLEL(layout, vr8_1d, unit, arrdes=arrdes, rc=status)
                endif
             else 
                RETURN_(ESMF_FAILURE)
             endif
          end if
       end if
    else if (rank == 2) then
       if (tk == ESMF_TYPEKIND_R4) then
          call ESMF_ArrayGet(array, localDE=0, farrayptr=var_2d, rc=status)
          VERIFY_(STATUS)
          if (associated(var_2d)) then !ALT: temp kludge
             if (FORMATTED=="YES") THEN
                call READ_PARALLEL(layout, &
                     var_2d(lbound(var_2d,1),:), unit, rc=status)
             else
                if (DIMS == MAPL_DimsTileOnly) then
                   do J = 1,size(var_2d,2)
                      if(present(varid)) then
                         arrdes%offset1 = j
                         call MAPL_VarRead(layout, unit, varid, var_2d(:,J), arrdes=arrdes, mask=mask, rc=status)
                      else
                         call MAPL_VarRead(unit, grid, var_2d(:,J), arrdes=arrdes, mask=mask, rc=status)
                      endif
                   end do
                else if (DIMS == MAPL_DimsTileTile) then
                   if(present(varid)) then
!                         print*,'R4_2d TileTile not coded yet'
!                         ASSERT_(.FALSE.)
                      call MAPL_VarRead(layout, unit, varid, var_2d, arrdes=arrdes, mask=mask, rc=status)
                      VERIFY_(STATUS)
                   else
                      call MAPL_VarRead(unit, grid, var_2d, arrdes=arrdes, mask=mask, rc=status)
                   endif
                else
                   if(present(varid)) then
                      call MAPL_VarRead(layout, unit, varid, var_2d, arrdes=arrdes, rc=status)
                      VERIFY_(STATUS)
                   else
                      call MAPL_VarRead(unit, grid, var_2d, arrdes=arrdes, rc=status)
                   endif
                end if
             end if
          end if
       else
          call ESMF_ArrayGet(array, localDE=0, farrayptr=vr8_2d, rc=status)
          VERIFY_(STATUS)
          if (associated(vr8_2d)) then !ALT: temp kludge
             if (FORMATTED=="YES") THEN
                call READ_PARALLEL(layout, &
                     vr8_2d(lbound(vr8_2d,1),:), unit, rc=status)
             else
                if (DIMS == MAPL_DimsTileOnly) then
                   do J = 1,size(vr8_2d,2)
                      if(present(varid)) then
                         print*,'R8_2d TileOnly not coded yet'
                         ASSERT_(.FALSE.)
!                         call MAPL_VarRead(unit, grid, varid, vr8_2d(:,J), arrdes=arrdes, mask=mask, rc=status)
                      else
                         call MAPL_VarRead(unit, grid, vr8_2d(:,J), arrdes=arrdes, mask=mask, rc=status)
                      endif
                   end do
                else if (DIMS == MAPL_DimsTileTile) then
                   if(present(varid)) then
                      print*,'R8_2d TileTile not coded yet'
                      ASSERT_(.FALSE.)
                   else
                      call MAPL_VarRead(unit, grid, vr8_2d, mask=mask, rc=status)
                   endif
                else
                   if(present(varid)) then
                      call MAPL_VarRead(layout, unit, varid, vr8_2d, arrdes=arrdes, rc=status)
                      VERIFY_(STATUS)
                   else
                      call MAPL_VarRead(unit, grid, vr8_2d, arrdes=arrdes, rc=status)
                   endif
                end if
             end if
          end if
       endif
    else if (rank == 3) then
       if (tk == ESMF_TYPEKIND_R4) then
          call ESMF_ArrayGet(array, localDE=0, farrayptr=var_3d, rc=status)
          VERIFY_(STATUS)
          if (associated(var_3d)) then !ALT: temp kludge
             if (FORMATTED=="YES") THEN
                call READ_PARALLEL(layout, &
                     var_3d(lbound(var_3d,1),lbound(var_3d,2),:), unit)
             else
                if (DIMS == MAPL_DimsTileOnly) then
                   do J = 1,size(var_3d,2)
                      do K = 1,size(var_3d,3)
                         if(present(varid)) then
                            arrdes%offset1 = j
                            arrdes%offset2 = k
                            call MAPL_VarRead(layout, unit, varid, var_3d(:,J,K), arrdes, mask=mask, rc=status)
                         else
                            call MAPL_VarRead(unit, grid, var_3d(:,J,K), arrdes=arrdes, mask=mask, rc=status)
                         endif
                      end do
                   end do
                else
                   if(present(varid)) then
                      call MAPL_VarRead(layout, unit, varid, var_3d, arrdes=arrdes, rc=status)
                   else
                      call MAPL_VarRead(unit, grid, var_3d, arrdes=arrdes, rc=status)
                   endif
                end if
             endif
          end if
       else
          call ESMF_ArrayGet(array, localDE=0, farrayptr=vr8_3d, rc=status)
          VERIFY_(STATUS)
          if (associated(vr8_3d)) then !ALT: temp kludge
             if (FORMATTED=="YES") THEN
                call READ_PARALLEL(layout, &
                     vr8_3d(lbound(vr8_3d,1),lbound(vr8_3d,2),:), unit)
             else
                if (DIMS == MAPL_DimsTileOnly) then
                   do J = 1,size(vr8_3d,2)
                      do K = 1,size(vr8_3d,3)
                         if(present(varid)) then
                            print*,'R8_3d TileOnly not coded yet'
                            ASSERT_(.FALSE.)
!                            call MAPL_VarRead(unit, grid, varid, vr8_3d(:,J,K), arrdes=arrdes, mask=mask, rc=status)
                         else
                            call MAPL_VarRead(unit, grid, vr8_3d(:,J,K), arrdes=arrdes, mask=mask, rc=status)
                         endif
                      end do
                   end do
                else
                   if(present(varid)) then
                      call MAPL_VarRead(layout, unit, varid, vr8_3d, arrdes=arrdes, rc=status)
                   else
                      call MAPL_VarRead(unit, grid, vr8_3d, arrdes=arrdes, rc=status)
                   endif
                end if
             endif
          end if
       endif
    else if (rank == 4) then
       if (tk == ESMF_TYPEKIND_R4) then
          call ESMF_ArrayGet(array, localDE=0, farrayptr=var_4d, rc=status)
          VERIFY_(STATUS)
          call MAPL_VarRead(unit, grid, var_4d, rc=status)
       else
          call ESMF_ArrayGet(array, localDE=0, farrayptr=vr8_4d, rc=status)
          VERIFY_(STATUS)
          call MAPL_VarRead(unit, grid, vr8_4d, rc=status)
       end if
    else
       print *, "ERROR: unsupported RANK"
       RETURN_(ESMF_FAILURE)
    endif
    VERIFY_(STATUS)

    if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
       if(.not.present(HomePE)) then
          deallocate(mask)
       end if
    end if

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_FieldRead

!---------------------------

  subroutine MAPL_VarRead_R4_1d(UNIT, GRID, A, MASK, arrdes, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R4)     , intent(  OUT) :: A(:)
    integer,           optional , intent(IN   ) :: MASK(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:)
    integer                               :: IM_WORLD
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distgrid
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarRead_R4_1d'
    integer, allocatable                  :: msk(:), sendcounts(:), displs(:)
    integer, allocatable                  :: idx(:)
    integer                               :: nrdrs, mype,  npes, recvcount
    integer                               :: mypeRd
    integer                               :: Rsize, first, last
    integer(KIND=MPI_OFFSET_KIND)         :: offset
    integer(KIND=MPI_OFFSET_KIND)         :: loffset
    integer                               :: i, k, n, i1, in
    real(kind=ESMF_KIND_R4)               :: dummy
    integer                               :: group, newgroup
    integer                               :: thiscomm
    integer                               :: nactive
    integer                               :: ntransl
    integer, allocatable                  :: pes(:)
    integer, allocatable                  :: r2g(:)
    integer, allocatable                  :: rpes(:)
    integer, allocatable                  :: activeranks(:)
    integer, allocatable                  :: activesendcounts(:)

    integer :: numread, mpistatus(MPI_STATUS_SIZE)
    integer :: cnt

    if(present(arrdes)) then
       ASSERT_(present(mask))

       IM_WORLD = arrdes%im_world

       call mpi_comm_size(arrdes%ioscattercomm,npes ,status)
       VERIFY_(STATUS)
       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          call mpi_comm_rank(arrdes%readers_comm,mypeRd ,status)
          VERIFY_(STATUS)
          call mpi_comm_size(arrdes%readers_comm,nrdrs,status)
          VERIFY_(STATUS)
       else
          mypeRd = -1
       endif
       call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
       VERIFY_(STATUS)
       call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
       VERIFY_(STATUS)
       call MAPL_CommsBcast(layout, nrdrs, 1, 0, rc = status)

       Rsize = im_world/nrdrs + 1
       first = mypeRd*Rsize + 1
       if(mypeRd >=  mod(im_world,nrdrs)) then
          Rsize = Rsize - 1
          first = first - (mypeRd-mod(im_world,nrdrs))
       endif
       last  = first + Rsize - 1

#ifdef DEBUG_MPIIO
	if (mypeRd <= nrdrs-1) write(*,'(5i)') mypeRd, IM_WORLD, first, last, Rsize
#endif

       allocate(VAR(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate(msk(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate (sendcounts(0:npes-1), stat=status)
       VERIFY_(STATUS)
       allocate (r2g(0:nrdrs-1), stat=status)
       VERIFY_(STATUS)

       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          if(arrdes%offset<=0) then
             offset = 4 
          else
             offset = arrdes%offset 
          endif

          loffset = offset + (first-1)*4
          cnt = Rsize
          call MPI_FILE_READ_AT_ALL(UNIT, loffset, VAR, cnt, MPI_REAL, mpistatus, STATUS)
          VERIFY_(STATUS)
          call MPI_GET_COUNT( mpistatus, MPI_REAL, numread, STATUS )
          VERIFY_(STATUS)
          ASSERT_(cnt == numread)
#ifdef DEBUG_MPIIO
          write(*,'(3i,1f)') IM_WORLD, loffset, numread, VAR(1)
#endif

          ASSERT_( (lbound(mask,1) <= first) )
          ASSERT_( (ubound(mask,1) >= last ) )
          msk = mask(first:last)

          allocate(idx(Rsize), stat=status)
          VERIFY_(STATUS)

          do i=1,Rsize
             idx(i) = i
          enddo
          msk = mask(first:last)
          call MAPL_Sort(msk,idx)
          msk = mask(first:last)
          call MAPL_Sort(msk,var)

          arrdes%offset = offset + IM_WORLD*4 + 8
       endif

       call mpi_comm_rank(arrdes%ioscattercomm,mype ,status)
       VERIFY_(STATUS)

       call MPI_COMM_GROUP (arrdes%ioscattercomm, GROUP, STATUS)
       VERIFY_(STATUS)

#if 1
       if (arrdes%readers_comm /= MPI_COMM_NULL) then
          allocate(rpes(0:nrdrs-1), stat=status)
          VERIFY_(STATUS)

          call MPI_COMM_GROUP (arrdes%readers_comm, NEWGROUP, STATUS)
          VERIFY_(STATUS)
          do n=0,nrdrs-1
             rpes(n) = n
          end do
          call MPI_Group_translate_ranks(newgroup, nrdrs, rpes, group, r2g, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          deallocate(rpes)
       end if
       call MAPL_CommsBcast(layout, r2g, nrdrs, 0, rc = status)
       
#else
       do n=0,nrdrs-1
          r2g(n) = (npes/nrdrs)*n
       end do
#endif

       offset = 1

       do n=0,nrdrs-1

          Rsize = im_world/nrdrs + 1
          first = n*Rsize + 1
          if(n >=  mod(im_world,nrdrs)) then
             Rsize = Rsize - 1
             first = first - (n-mod(im_world,nrdrs))
          endif
          last  = first + Rsize - 1

          sendcounts = 0
          do i=first,last
             sendcounts(mask(i)) = sendcounts(mask(i)) + 1
          enddo

          ! Reader "n" must be included in the mpi group + evevybody that need the data
          nactive = count(sendcounts > 0)
          if (sendcounts(r2g(n)) == 0) then
             nactive = nactive + 1
          end if
          allocate (activeranks(0:nactive-1), activesendcounts(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate(pes(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate (displs(0:nactive), stat=status)
          VERIFY_(STATUS)
          k = 0
          do i=0, npes-1
             if (sendcounts(i) > 0) then
                pes(k) = i
                k = k+1
             end if
          enddo
          if (k /= nactive) then
             k = k+1
             ASSERT_(k == nactive)
             ASSERT_(sendcounts(r2g(n)) == 0)
             pes(nactive-1) = r2g(n)
          end if
          call MPI_GROUP_INCL (GROUP, nactive, PES, newgroup, STATUS)
          VERIFY_(STATUS)
          call MPI_COMM_CREATE(arrdes%ioscattercomm, newgroup, thiscomm, STATUS)
          VERIFY_(STATUS)
          call MPI_Group_translate_ranks(group, nactive, pes, newgroup, activeranks, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)

          if (thiscomm /= MPI_COMM_NULL) then
             activesendcounts = 0
             do i=0,nactive-1
                activesendcounts(activeranks(i)) = sendcounts(pes(i))
                if (pes(i) == r2g(n)) ntransl = activeranks(i)
             end do
             displs(0) = 0
             do i=1,nactive
                displs(i) = displs(i-1) + activesendcounts(i-1)
             enddo

             if(n==mypeRd) then
                do i=0,nactive-1
                   if(activesendcounts(i)>0) then
                      i1 = displs(i  ) + 1
                      in = displs(i+1)
                      call MAPL_Sort(idx(i1:in),var(i1:in))
                   endif
                end do
             endif

             recvcount = sendcounts(mype)

             if (recvcount == 0) then
                call MPI_SCATTERV( var, activesendcounts, displs, MPI_REAL, &
                                   dummy,   recvcount,  MPI_REAL, &
                                   ntransl, thiscomm,    status )
             else
                call MPI_SCATTERV( var, activesendcounts, displs, MPI_REAL, &
                                   a(offset),   recvcount,  MPI_REAL, &
                                   ntransl, thiscomm,    status )
             endif
             VERIFY_(STATUS)
             call MPI_Comm_Free(thiscomm, status)
             VERIFY_(STATUS)
             offset = offset + recvcount
          end if
          deallocate (displs)
          deallocate(pes)
          deallocate (activesendcounts, activeranks)

       enddo

       call MPI_GROUP_FREE (GROUP, STATUS)
       VERIFY_(STATUS)
       deallocate(var,msk)
       deallocate (r2g)
       deallocate(sendcounts)
       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          deallocate(idx)
       end if

    elseif(unit < 0) then

       ASSERT_(-UNIT<=LAST_UNIT)
       munit => MEM_units(-unit)
       munit%prevrec = munit%prevrec + 1
       ASSERT_(associated(munit%Records(munit%prevrec)%R4_1))
       ASSERT_(size(A)==size(munit%Records(munit%prevrec)%R4_1))
       A = munit%Records(munit%prevrec)%R4_1

    else

       call MAPL_GridGet(grid, globalCellCountPerDim=DIMS, RC=STATUS)
       VERIFY_(STATUS)

       IM_WORLD = DIMS(1)

       allocate(VAR(IM_WORLD), stat=status)
       VERIFY_(STATUS)

       call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
       VERIFY_(STATUS)
       call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
       VERIFY_(STATUS)

       if (MAPL_am_i_root(layout)) then
          read (UNIT, IOSTAT=status) VAR
          VERIFY_(STATUS)
       end if

       call ArrayScatter(A, VAR, grid, mask=mask, rc=status)
       VERIFY_(STATUS)
    
       deallocate(VAR)

    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarRead_R4_1d

!---------------------------

  subroutine MAPL_VarRead_R4_2d(UNIT, GRID, A, MASK, arrdes, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R4)     , intent(  OUT) :: A(:,:)
    integer,           optional , intent(IN   ) :: MASK(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    integer                               :: status
    integer                               :: gridRank
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distGRID
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarRead_R4_2d'

    real(kind=ESMF_KIND_R4),  allocatable :: buf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x
    integer(kind=MPI_OFFSET_KIND)         :: offset
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: sendcounts(:), displs(:)

    real(kind=ESMF_KIND_R8) :: itime_beg, itime_end, bwidth

    integer :: numread, mpistatus(MPI_STATUS_SIZE)
    integer :: cnt

#ifdef TIME_MPIIO
  call MPI_BARRIER(MPI_COMM_WORLD,STATUS)
  VERIFY_(STATUS)
  itime_beg = MPI_Wtime(STATUS)
  VERIFY_(STATUS)
#endif

    if(present(arrdes)) then

       if(present(mask)) then
          JM_WORLD = arrdes%jm_world
          ASSERT_(JM_WORLD==size(A,2))

!          arrdes%offset = 0

          do j=1,jm_world
             call MAPL_VarRead(Unit, Grid, a(:,j), mask, arrdes, rc=status)
             arrdes%offset = arrdes%offset - 8
          enddo

          arrdes%offset = arrdes%offset + 8

       else

       ndes_x = size(arrdes%in)

       IM_WORLD = arrdes%im_world
       JM_WORLD = arrdes%jm_world

       call mpi_comm_rank(arrdes%ycomm,myrow,status)
       VERIFY_(STATUS)
       call mpi_comm_rank(arrdes%ioscattercomm,myiorank,status)
       VERIFY_(STATUS)
       call mpi_comm_size(arrdes%ioscattercomm,num_io_rows,status)
       VERIFY_(STATUS)
       num_io_rows=num_io_rows/ndes_x

       allocate (sendcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
       VERIFY_(STATUS)

       if(myiorank==0) then
          do j=1,num_io_rows
             jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
             sendcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize
          enddo

          displs(1) = 0
          do i=2,ndes_x*num_io_rows
             displs(i) = displs(i-1) + sendcounts(i-1)
          enddo

          jsize = 0
          do j=1,num_io_rows
             jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
          enddo
          allocate(VAR(IM_WORLD,jsize), stat=status)
          VERIFY_(STATUS)
          allocate(buf(IM_WORLD*jsize), stat=status)
          VERIFY_(STATUS)

          if(arrdes%offset<=0) then
             offset = 4 
          else
             offset = arrdes%offset 
          endif

          offset = offset + (arrdes%j1(myrow+1)-1)*IM_WORLD*4
          cnt = IM_WORLD*jsize
          call MPI_FILE_READ_AT_ALL(UNIT, offset, VAR, cnt, MPI_REAL, mpistatus, STATUS)
          VERIFY_(STATUS)
          call MPI_GET_COUNT( mpistatus, MPI_REAL, numread, STATUS ) 
          VERIFY_(STATUS)
          ASSERT_(cnt == numread)
          offset = offset - (arrdes%j1(myrow+1)-1)*IM_WORLD*4

          arrdes%offset = offset + IM_WORLD*JM_WORLD*4 + 8

#ifdef DEBUG_MPIIO
          print*, offset, numread, IM_WORLD*jsize, VAR(1,1)
#endif

          jprev = 0
          k=1
          do l=1,num_io_rows
             jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
             do n=1,ndes_x
                do j=1,jsize
                   do i=arrdes%i1(n),arrdes%in(n)
                      buf(k) = VAR(i,jprev+j)
                      k=k+1
                   end do
                end do
             end do
             jprev = jprev + jsize
          end do

       end if

!DSK avoid "Attempt to fetch from allocatable variable BUF when it is not allocated"
       if(myiorank/=0) then
          allocate(buf(0), stat=status)
          VERIFY_(STATUS)
       endif

       call mpi_scatterv( buf, sendcounts, displs, MPI_REAL, &
            a,  size(a),  MPI_REAL, &
            0, arrdes%ioscattercomm, status )
       VERIFY_(STATUS)

       if(myiorank==0) then 
          deallocate(VAR, stat=status)
          VERIFY_(STATUS)
!          deallocate(buf, stat=status)
!          VERIFY_(STATUS)
       endif
       deallocate(buf, stat=status)
       VERIFY_(STATUS)
       deallocate (sendcounts, displs, stat=status)
       VERIFY_(STATUS)
    endif
    elseif(unit < 0) then

      ASSERT_(-UNIT<=LAST_UNIT)
      munit => MEM_units(-unit)
      munit%prevrec = munit%prevrec + 1
      ASSERT_(associated(munit%Records(munit%prevrec)%R4_2))
      ASSERT_(size(A)==size(munit%Records(munit%prevrec)%R4_2))
      A = munit%Records(munit%prevrec)%R4_2

    else

    call ESMF_GridGet(GRID, dimCount=gridRank, rc=STATUS)
    VERIFY_(STATUS)
    call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
    VERIFY_(STATUS)

    IM_WORLD = DIMS(1)
    JM_WORLD = DIMS(2)

    allocate(VAR(IM_WORLD,JM_WORLD), stat=status)
    VERIFY_(STATUS)

    call ESMF_GridGet(grid, distGrid=distGrid, rc=status)
    VERIFY_(STATUS)
    call ESMF_DistGridGet(distGrid, delayout=layout, rc=status)
    VERIFY_(STATUS)

    if (MAPL_am_i_root(layout)) then
       read (UNIT, IOSTAT=status) VAR
       VERIFY_(STATUS)
    end if

    call ArrayScatter(A, VAR, grid, mask=mask, rc=status)
    VERIFY_(STATUS)
    
    deallocate(VAR)

    END IF

#ifdef TIME_MPIIO
  call MPI_BARRIER(MPI_COMM_WORLD,STATUS)
  VERIFY_(STATUS)
  itime_end = MPI_Wtime(STATUS)
  VERIFY_(STATUS)
  bwidth = REAL(IM_WORLD*JM_WORLD*4/1024.0/1024.0,kind=8)
  bwidth = bwidth/(itime_end-itime_beg)
  if (bwidth > peak_ioread_bandwidth) peak_ioread_bandwidth = bwidth
  mean_ioread_bandwidth = (mean_ioread_bandwidth + bwidth)
  ioread_counter=ioread_counter+1
  if (mod(ioread_counter,72.d0)==0) then
  if (MAPL_AM_I_Root()) write(*,'(a64,3es11.3)') 'MPIIO Read Bandwidth (MB per second): ', peak_ioread_bandwidth, bwidth, mean_ioread_bandwidth/ioread_counter
  endif
#endif
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarRead_R4_2d

!---------------------------
  subroutine MAPL_VarRead_R4_3d(UNIT, GRID, A, Arrdes, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R4)     , intent(  OUT) :: A(:,:,:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: status
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarRead_R4_3d'

    integer :: L

    do L = 1, size(A,3)
       call MAPL_VarRead(UNIT, GRID, A(:,:,L), ARRDES=arrdes, rc=status)
       VERIFY_(STATUS)
    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarRead_R4_3d
  
!---------------------------
  subroutine MAPL_VarRead_R4_4d(UNIT, GRID, A, Arrdes, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R4)     , intent(  OUT) :: A(:,:,:,:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: status
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarRead_R4_4d'

    integer :: L

    do L = 1, size(A,4)
       call MAPL_VarRead(UNIT, GRID, A(:,:,:,L), ARRDES=arrdes, rc=status)
       VERIFY_(STATUS)
    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarRead_R4_4d
  
!---------------------------
  subroutine MAPL_VarRead_R8_1d(UNIT, GRID, A, MASK, arrdes, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R8)     , intent(  OUT) :: A(:)
    integer,           optional , intent(IN   ) :: MASK(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R8),  allocatable :: VAR(:)
    integer                               :: IM_WORLD
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distGRID
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarRead_R8_1d'
    integer, allocatable                  :: msk(:), sendcounts(:), displs(:)
    integer, allocatable                  :: idx(:)
    integer                               :: nrdrs, mype,  npes, recvcount
    integer                               :: mypeRd
    integer                               :: Rsize, first, last
    integer(KIND=MPI_OFFSET_KIND)         :: offset
    integer(KIND=MPI_OFFSET_KIND)         :: loffset
    integer                               :: i, k, n, i1, in
    real(kind=ESMF_KIND_R4)               :: dummy
    integer                               :: group, newgroup
    integer                               :: thiscomm
    integer                               :: nactive
    integer                               :: ntransl
    integer, allocatable                  :: pes(:)
    integer, allocatable                  :: r2g(:)
    integer, allocatable                  :: rpes(:)
    integer, allocatable                  :: activeranks(:)
    integer, allocatable                  :: activesendcounts(:)

    integer :: numread, mpistatus(MPI_STATUS_SIZE)
    integer :: cnt

    if(present(arrdes)) then
       ASSERT_(present(mask))

       IM_WORLD = arrdes%im_world

       call mpi_comm_size(arrdes%ioscattercomm,npes ,status)
       VERIFY_(STATUS)
       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          call mpi_comm_rank(arrdes%readers_comm,mypeRd ,status)
          VERIFY_(STATUS)
          call mpi_comm_size(arrdes%readers_comm,nrdrs,status)
          VERIFY_(STATUS)
       else
          mypeRd = -1
       endif
       call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
       VERIFY_(STATUS)
       call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
       VERIFY_(STATUS)
       call MAPL_CommsBcast(layout, nrdrs, 1, 0, rc = status)

       Rsize = im_world/nrdrs + 1
       first = mypeRd*Rsize + 1
       if(mypeRd >=  mod(im_world,nrdrs)) then
          Rsize = Rsize - 1
          first = first - (mypeRd-mod(im_world,nrdrs))
       endif
       last  = first + Rsize - 1

#ifdef DEBUG_MPIIO
	if (mypeRd <= nrdrs-1) write(*,'(5i)') mypeRd, IM_WORLD, first, last, Rsize
#endif

       allocate(VAR(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate(msk(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate (sendcounts(0:npes-1), stat=status)
       VERIFY_(STATUS)
       allocate (r2g(0:nrdrs-1), stat=status)
       VERIFY_(STATUS)

       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          if(arrdes%offset<=0) then
             offset = 4 
          else
             offset = arrdes%offset 
          endif

          loffset = offset + (first-1)*8
          cnt = Rsize
          call MPI_FILE_READ_AT_ALL(UNIT, loffset, VAR, cnt, &
               MPI_DOUBLE_PRECISION, mpistatus, STATUS)
          VERIFY_(STATUS)
          call MPI_GET_COUNT( mpistatus, MPI_DOUBLE_PRECISION, numread, STATUS )
          VERIFY_(STATUS)
          ASSERT_(cnt == numread)
#ifdef DEBUG_MPIIO
          write(*,'(3i,1f)') IM_WORLD, loffset, numread, VAR(1)
#endif

          ASSERT_( (lbound(mask,1) <= first) )
          ASSERT_( (ubound(mask,1) >= last ) )
          msk = mask(first:last)

          allocate(idx(Rsize), stat=status)
          VERIFY_(STATUS)

          do i=1,Rsize
             idx(i) = i
          enddo
          msk = mask(first:last)
          call MAPL_Sort(msk,idx)
          msk = mask(first:last)
          call MAPL_Sort(msk,var)

          arrdes%offset = offset + IM_WORLD*8 + 8
       endif

       call mpi_comm_rank(arrdes%ioscattercomm,mype ,status)
       VERIFY_(STATUS)

       call MPI_COMM_GROUP (arrdes%ioscattercomm, GROUP, STATUS)
       VERIFY_(STATUS)

#if 1
       if (arrdes%readers_comm /= MPI_COMM_NULL) then
          allocate(rpes(0:nrdrs-1), stat=status)
          VERIFY_(STATUS)

          call MPI_COMM_GROUP (arrdes%readers_comm, NEWGROUP, STATUS)
          VERIFY_(STATUS)
          do n=0,nrdrs-1
             rpes(n) = n
          end do
          call MPI_Group_translate_ranks(newgroup, nrdrs, rpes, group, r2g, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          deallocate(rpes)
       end if
       call MAPL_CommsBcast(layout, r2g, nrdrs, 0, rc = status)
       
#else
       do n=0,nrdrs-1
          r2g(n) = (npes/nrdrs)*n
       end do
#endif

       offset = 1

       do n=0,nrdrs-1

          Rsize = im_world/nrdrs + 1
          first = n*Rsize + 1
          if(n >=  mod(im_world,nrdrs)) then
             Rsize = Rsize - 1
             first = first - (n-mod(im_world,nrdrs))
          endif
          last  = first + Rsize - 1

          sendcounts = 0
          do i=first,last
             sendcounts(mask(i)) = sendcounts(mask(i)) + 1
          enddo

          ! Reader "n" must be included in the mpi group + evevybody that need the data
          nactive = count(sendcounts > 0)
          if (sendcounts(r2g(n)) == 0) then
             nactive = nactive + 1
          end if
          allocate (activeranks(0:nactive-1), activesendcounts(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate(pes(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate (displs(0:nactive), stat=status)
          VERIFY_(STATUS)
          k = 0
          do i=0, npes-1
             if (sendcounts(i) > 0) then
                pes(k) = i
                k = k+1
             end if
          enddo
          if (k /= nactive) then
             k = k+1
             ASSERT_(k == nactive)
             ASSERT_(sendcounts(r2g(n)) == 0)
             pes(nactive-1) = r2g(n)
          end if
          call MPI_GROUP_INCL (GROUP, nactive, PES, newgroup, STATUS)
          VERIFY_(STATUS)
          call MPI_COMM_CREATE(arrdes%ioscattercomm, newgroup, thiscomm, STATUS)
          VERIFY_(STATUS)
          call MPI_Group_translate_ranks(group, nactive, pes, newgroup, activeranks, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)

          if (thiscomm /= MPI_COMM_NULL) then
             activesendcounts = 0
             do i=0,nactive-1
                activesendcounts(activeranks(i)) = sendcounts(pes(i))
                if (pes(i) == r2g(n)) ntransl = activeranks(i)
             end do
             displs(0) = 0
             do i=1,nactive
                displs(i) = displs(i-1) + activesendcounts(i-1)
             enddo

             if(n==mypeRd) then
                do i=0,nactive-1
                   if(activesendcounts(i)>0) then
                      i1 = displs(i  ) + 1
                      in = displs(i+1)
                      call MAPL_Sort(idx(i1:in),var(i1:in))
                   endif
                end do
             endif

             recvcount = sendcounts(mype)

             if (recvcount == 0) then
                call MPI_SCATTERV( var, activesendcounts, displs, &
                                   MPI_DOUBLE_PRECISION, &
                                   dummy,   recvcount,  MPI_DOUBLE_PRECISION, &
                                   ntransl, thiscomm,    status )
             else
                call MPI_SCATTERV( var, activesendcounts, displs, &
                                   MPI_DOUBLE_PRECISION, &
                                   a(offset),   recvcount,  MPI_DOUBLE_PRECISION, &
                                   ntransl, thiscomm,    status )
             endif
             VERIFY_(STATUS)
             call MPI_Comm_Free(thiscomm, status)
             VERIFY_(STATUS)
             offset = offset + recvcount
          end if
          deallocate (displs)
          deallocate(pes)
          deallocate (activesendcounts, activeranks)

       enddo

       call MPI_GROUP_FREE (GROUP, STATUS)
       VERIFY_(STATUS)
       deallocate(var,msk)
       deallocate (r2g)
       deallocate(sendcounts)
       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          deallocate(idx)
       end if

    elseif(unit < 0) then

       ASSERT_(-UNIT<=LAST_UNIT)
       munit => MEM_units(-unit)
       munit%prevrec = munit%prevrec + 1
       ASSERT_(associated(munit%Records(munit%prevrec)%R8_1))
       ASSERT_(size(A)==size(munit%Records(munit%prevrec)%R8_1))
       A = munit%Records(munit%prevrec)%R8_1

    else


    call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
    VERIFY_(STATUS)

    IM_WORLD = DIMS(1)

    allocate(VAR(IM_WORLD), stat=status)
    VERIFY_(STATUS)
    call ESMF_GridGet(grid, distGrid=distGrid, rc=status)
    VERIFY_(STATUS)
    call ESMF_DistGridGet(distGrid, delayout=layout, rc=status)
    VERIFY_(STATUS)

    if (MAPL_am_i_root(layout)) then
       read (UNIT, IOSTAT=status) VAR
       VERIFY_(STATUS)
    end if

    call ArrayScatter(A, VAR, grid, mask=mask, rc=status)
    VERIFY_(STATUS)
    
    deallocate(VAR)

    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarRead_R8_1d

!---------------------------


  subroutine MAPL_VarRead_R8_2d(UNIT, GRID, A, MASK, arrdes, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R8)     , intent(  OUT) :: A(:,:)
    integer,           optional , intent(IN   ) :: MASK(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R8),  allocatable :: VAR(:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    integer                               :: gridRank
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distGRID
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarRead_R8_2d'

    real(kind=ESMF_KIND_R8),  allocatable :: buf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x
    integer(kind=MPI_OFFSET_KIND)         :: offset
    integer                               :: jstart, jsize, jprev
    integer                               :: num_io_rows
    integer, allocatable                  :: sendcounts(:), displs(:)

    real(kind=ESMF_KIND_R8) :: itime_beg, itime_end, bwidth

    integer :: numread, mpistatus(MPI_STATUS_SIZE)
    integer :: cnt

#ifdef TIME_MPIIO
  call MPI_BARRIER(MPI_COMM_WORLD,STATUS)
  VERIFY_(STATUS)
  itime_beg = MPI_Wtime(STATUS)
  VERIFY_(STATUS)
#endif

    if(present(arrdes)) then

       if(present(mask)) then
          JM_WORLD = arrdes%jm_world
          ASSERT_(JM_WORLD==size(A,2))

          arrdes%offset = 0

          do j=1,jm_world
             call MAPL_VarRead(Unit, Grid, a(:,j), mask, arrdes, rc=status)
             arrdes%offset = arrdes%offset - 8
          enddo

          arrdes%offset = arrdes%offset + 8
       else

       ndes_x = size(arrdes%in)

       IM_WORLD = arrdes%im_world
       JM_WORLD = arrdes%jm_world

       call mpi_comm_rank(arrdes%ycomm,myrow,status)
       VERIFY_(STATUS)
       call mpi_comm_rank(arrdes%ioscattercomm,myiorank,status)
       VERIFY_(STATUS)
       call mpi_comm_size(arrdes%ioscattercomm,num_io_rows,status)
       VERIFY_(STATUS)
       num_io_rows=num_io_rows/ndes_x

       allocate (sendcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
       VERIFY_(STATUS)
       
       if(myiorank==0) then
          do j=1,num_io_rows
             jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
             sendcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize
          enddo

          displs(1) = 0
          do i=2,ndes_x*num_io_rows
             displs(i) = displs(i-1) + sendcounts(i-1)
          enddo

          jsize = 0
          do j=1,num_io_rows
             jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
          enddo
          allocate(VAR(IM_WORLD,jsize), stat=status)
          VERIFY_(STATUS)
          allocate(buf(IM_WORLD*jsize), stat=status)
          VERIFY_(STATUS)

          if(arrdes%offset<=0) then
             offset = 4
          else
             offset = arrdes%offset
          endif

          offset = offset + (arrdes%j1(myrow+1)-1)*IM_WORLD*8
          cnt = IM_WORLD*jsize
          call MPI_FILE_READ_AT_ALL(UNIT, offset, VAR, cnt, MPI_DOUBLE_PRECISION, mpistatus, STATUS)
          VERIFY_(STATUS)
          call MPI_GET_COUNT( mpistatus, MPI_DOUBLE_PRECISION, numread, STATUS )
          VERIFY_(STATUS)
          ASSERT_(cnt == numread)
          offset = offset - (arrdes%j1(myrow+1)-1)*IM_WORLD*8

          arrdes%offset = offset + IM_WORLD*JM_WORLD*8 + 8

#ifdef DEBUG_MPIIO
         print*, offset, numread, VAR(1,1)
#endif

          jprev = 0
          k=1
          do l=1,num_io_rows
          jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
             do n=1,ndes_x
                do j=1,jsize
                do i=arrdes%i1(n),arrdes%in(n)
                      buf(k) = VAR(i,jprev+j)
                   k=k+1
                end do
             end do
          end do
             jprev = jprev + jsize
          end do

       end if

!DSK avoid "Attempt to fetch from allocatable variable BUF when it is not allocated"
       if(myiorank/=0) then
          allocate(buf(0), stat=status)
          VERIFY_(STATUS)
       endif

       call mpi_scatterv( buf, sendcounts, displs, MPI_DOUBLE_PRECISION, &
                          a,  size(a),  MPI_DOUBLE_PRECISION, &
                          0, arrdes%ioscattercomm, status )
       VERIFY_(STATUS)

       if(myiorank==0) then
          deallocate(VAR, stat=status)
          VERIFY_(STATUS)
!          deallocate(buf, stat=status)
!          VERIFY_(STATUS)
       endif
       deallocate(buf, stat=status)
       VERIFY_(STATUS)
       deallocate (sendcounts, displs, stat=status)
       VERIFY_(STATUS)

       endif

    elseif(unit < 0) then

      ASSERT_(-UNIT<=LAST_UNIT)
      munit => MEM_units(-unit)
      munit%prevrec = munit%prevrec + 1
      ASSERT_(associated(munit%Records(munit%prevrec)%R8_2))
      ASSERT_(size(A)==size(munit%Records(munit%prevrec)%R8_2))
      A = munit%Records(munit%prevrec)%R8_2

    else


    call ESMF_GridGet(GRID, dimCount=gridRank, rc=STATUS)
    VERIFY_(STATUS)
    call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
    VERIFY_(STATUS)

    IM_WORLD = DIMS(1)
    JM_WORLD = DIMS(2)

    allocate(VAR(IM_WORLD,JM_WORLD), stat=status)
    VERIFY_(STATUS)

    call ESMF_GridGet(grid, distGrid=distGrid, rc=status)
    VERIFY_(STATUS)
    call ESMF_DistGridGet(distGrid, delayout=layout, rc=status)
    VERIFY_(STATUS)

    if (MAPL_am_i_root(layout)) then
       read (UNIT, IOSTAT=status) VAR
       VERIFY_(STATUS)
    end if
    call ArrayScatter(A, VAR, grid, mask=mask, rc=status)
    VERIFY_(STATUS)
    
    deallocate(VAR)

    END IF

#ifdef TIME_MPIIO
  call MPI_BARRIER(MPI_COMM_WORLD,STATUS)
  VERIFY_(STATUS)
  itime_end = MPI_Wtime(STATUS)
  VERIFY_(STATUS) 
  bwidth = REAL(IM_WORLD*JM_WORLD*8/1024.0/1024.0,kind=8)
  bwidth = bwidth/(itime_end-itime_beg)
  if (bwidth > peak_ioread_bandwidth) peak_ioread_bandwidth = bwidth
  mean_ioread_bandwidth = (mean_ioread_bandwidth + bwidth)
  ioread_counter=ioread_counter+1
  if (mod(ioread_counter,72.d0)==0) then
  if (MAPL_AM_I_Root()) write(*,'(a64,3es11.3)') 'MPIIO Read Bandwidth (MB per second): ', peak_ioread_bandwidth, bwidth, mean_ioread_bandwidth/ioread_counter
  endif
#endif 
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarRead_R8_2d

!---------------------------
  subroutine MAPL_VarRead_R8_3d(UNIT, GRID, A, arrdes, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R8)     , intent(  OUT) :: A(:,:,:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: status
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarRead_R8_3d'

    integer :: L

    do L = 1, size(A,3)
       call MAPL_VarRead(UNIT, GRID, A(:,:,L), ARRDES=arrdes, rc=status)
       VERIFY_(STATUS)
    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarRead_R8_3d
  
!---------------------------
  subroutine MAPL_VarRead_R8_4d(UNIT, GRID, A, arrdes, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R8)     , intent(  OUT) :: A(:,:,:,:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: status
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarRead_R8_4d'

    integer :: L

    do L = 1, size(A,4)
       call MAPL_VarRead(UNIT, GRID, A(:,:,:,L), ARRDES=arrdes, rc=status)
       VERIFY_(STATUS)
    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarRead_R8_4d
  
!---------------------------
! Write routines
!---------------------------

  subroutine MAPL_StateVarWrite(UNIT, STATE, NAME, RESOLUTION, ARRDES, forceWriteNoRestart, RC)
    integer                     , intent(IN   ) :: UNIT
    type (ESMF_State)           , intent(INout) :: STATE
    character(len=*),   optional, intent(IN   ) :: NAME
    integer,            optional,   pointer     :: RESOLUTION(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    logical,            optional, intent(IN   ) :: forceWriteNoRestart
    integer,            optional, intent(  OUT) :: RC

! Local vars
    type (ESMF_FieldBundle)              :: bundle
    type (ESMF_Field)                    :: field
    type (ESMF_Grid)                     :: grid
    integer                              :: status
    integer                              :: I, ITEMCOUNT, varid, ind
    logical                              :: FOUND
    type (ESMF_StateItem_Flag), pointer  :: ITEMTYPES(:)
    character(len=ESMF_MAXSTR ), pointer :: ITEMNAMES(:)
    logical, pointer                     :: DOIT(:)
    character(len=ESMF_MAXSTR)           :: IAm='MAPL_StateVarWrite'
    logical                              :: skipWriting
    integer                              :: RST
    character(len=ESMF_MAXSTR)           :: FieldName
    logical                              :: forceWriteNoRestart_
    integer                              :: DIMS
    integer, pointer                     :: MASK(:) => null()
    
    integer, allocatable :: orderlist(:)
    integer :: jj
    character(len=ESMF_MAXSTR)           :: attrName
    character(len=ESMF_MAXSTR), allocatable :: currList(:)
    integer                                 :: natt

    call ESMF_StateGet(STATE,ITEMCOUNT=ITEMCOUNT,RC=STATUS)
    VERIFY_(STATUS)

    ASSERT_(ITEMCOUNT>0)

    allocate(ITEMNAMES(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)
    allocate(ITEMTYPES(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)
    allocate(DOIT     (ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)

    call ESMF_StateGet(STATE,ITEMNAMELIST=ITEMNAMES,itemTypeList=ITEMTYPES,RC=STATUS)
    VERIFY_(STATUS)

    forceWriteNoRestart_ = .false.
    if(present(forceWriteNoRestart)) then
       forceWriteNoRestart_ = forceWriteNoRestart
    endif

    if(present(NAME)) then
       DOIT = ITEMNAMES==NAME
       ASSERT_(count(DOIT)/=0)
    else
       DOIT = .true.
    endif

    attrName = MAPL_StateItemOrderList
    call ESMF_AttributeGet(state, NAME=attrName, itemcount=natt, RC=STATUS)
    VERIFY_(STATUS)

    ASSERT_(natt > 0)
    allocate(orderlist(natt), stat=status)
    VERIFY_(STATUS)
    allocate(currList(natt), stat=status)
    VERIFY_(STATUS)

    ! get the current list
    call ESMF_AttributeGet(state, NAME=attrName, VALUELIST=currList, rc=status)
    VERIFY_(STATUS)

    orderList = -1 ! not found
    do i = 1, natt
       ! search loop
       do jj = 1, ITEMCOUNT
          if (itemNames(jj) == currList(i)) then
             orderList(i) = jj
             exit
          end if
       end do
    end do

    deallocate(currList)

    do JJ = 1, natt
       I = ORDERLIST(JJ)
    
       IF (DOIT     (I)) then

#ifdef TIME_MPIIO
    call write_parallel(itemnames(i))
#endif

          IF (ITEMTYPES(I) == ESMF_StateItem_FieldBundle) then
             call ESMF_StateGet(state, itemnames(i), bundle, rc=status)
             VERIFY_(STATUS)

             skipWriting = .false.
             if (.not. forceWriteNoRestart_) then
                call ESMF_AttributeGet(bundle, name='RESTART', value=RST, rc=status)
                if (STATUS == ESMF_SUCCESS) then
                   skipWriting = (RST == 0)
                end if
             end if
             if (skipWriting) cycle

             call MAPL_BundleWrite(unit, bundle, RESOLUTION=RESOLUTION, arrdes=arrdes, rc=status)
             VERIFY_(STATUS)

          ELSE IF (ITEMTYPES(I) == ESMF_StateItem_Field) THEN
             call ESMF_StateGet(state, itemnames(i), field, rc=status)
             VERIFY_(STATUS)

             skipWriting = .false.
             if (.not. forceWriteNoRestart_) then
                call ESMF_AttributeGet(field, name='RESTART', value=RST, rc=status)
                if (STATUS == ESMF_SUCCESS) then
                   skipWriting = (RST == 0)
                end if
             end if
             if (skipWriting) cycle

             call ESMF_AttributeGet(field, name='doNotAllocate', value=RST, rc=status)
             if (STATUS == ESMF_SUCCESS) then
                skipWriting = (RST /= 0)
             endif
             if (skipWriting) cycle

             if(.not.associated(MASK)) then
                call ESMF_AttributeGet(field, name='DIMS', value=DIMS, rc=status)
                VERIFY_(STATUS)
                if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
                   call ESMF_FieldGet   (field, grid=grid, rc=status)
                   VERIFY_(STATUS)
                   call MAPL_TileMaskGet(grid,  mask, rc=status)
                   VERIFY_(STATUS)
                endif
             endif

             call MAPL_FieldWrite(unit, field, RESOLUTION=RESOLUTION, arrdes=arrdes, HomePE=mask, rc=status)
             VERIFY_(STATUS)

          end IF
       END IF

    END DO

    deallocate(orderlist)
    deallocate(ITEMNAMES)
    deallocate(ITEMTYPES)
    deallocate(DOIT     )
    if(associated(MASK)) deallocate(MASK)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_StateVarWrite
!---------------------------


  subroutine MAPL_BundleWrite(UNIT,BUNDLE, RESOLUTION, ARRDES, RC)
    integer                     , intent(IN   ) :: UNIT
    type (ESMF_FieldBundle)          , intent(INOUT) :: BUNDLE
    integer,           optional ,   pointer     :: RESOLUTION(:)
    type(ArrDescr),    optional , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC


    integer                                 :: status
    integer                                 :: J, N, varid, fieldCount, ind
    character(len=ESMF_MAXSTR)              :: IAm='MAPL_BundleWrite'
    type (ESMF_Field)                       :: field
    character(len=ESMF_MAXSTR),allocatable  :: nameList(:)
    character(len=ESMF_MAXSTR)              :: FieldName, BundleName

    call ESMF_FieldBundleGet(bundle, fieldCount=N, name=BundleName, rc=STATUS)
    VERIFY_(STATUS)
    allocate(namelist(N), stat=status)
    VERIFY_(STATUS)
    call ESMF_FieldBundleGet(bundle, fieldNameList=nameList, fieldCount=FieldCount, rc=STATUS)
    VERIFY_(STATUS)
    ASSERT_(N==fieldCount)

    DO J = 1, N
       call MAPL_FieldBundleGet(bundle, fieldIndex=J, field=field, rc=status)
       VERIFY_(STATUS)

       call MAPL_FieldWrite(unit, field, RESOLUTION=RESOLUTION, arrdes=ARRDES, rc=status)
       VERIFY_(STATUS)

    END DO

    deallocate(nameList)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_BundleWrite

!---------------------------

  subroutine MAPL_FieldWrite(UNIT,FIELD, RESOLUTION, ARRDES, HomePE, varid, RC)
    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Field)           , intent(INOUT) :: field  !ALT: intent(in)
    integer,           optional ,   pointer     :: RESOLUTION(:)
    type(ArrDescr),    optional , intent(INOUT) :: ARRDES
    integer, target,   optional , intent(IN   ) :: HomePE(:)
    integer,           optional , intent(IN   ) :: varid
    integer,           optional , intent(  OUT) :: RC

! Local vars
    type (ESMF_Array)                  :: array
    type (ESMF_DELayout)               :: layout
    type (ESMF_Grid)                   :: GRID
    integer                            :: rank
    integer                            :: status
    integer                            :: DIMS
    real(KIND=ESMF_KIND_R4), pointer, dimension(:)        :: var_1d
    real(KIND=ESMF_KIND_R4), pointer, dimension(:,:)      :: var_2d
    real(KIND=ESMF_KIND_R4), pointer, dimension(:,:,:)    :: var_3d
    real(KIND=ESMF_KIND_R4), pointer, dimension(:,:,:,:)  :: var_4d

    real(KIND=ESMF_KIND_R8), pointer, dimension(:)        :: vr8_1d
    real(KIND=ESMF_KIND_R8), pointer, dimension(:,:)      :: vr8_2d
    real(KIND=ESMF_KIND_R8), pointer, dimension(:,:,:)    :: vr8_3d
    real(KIND=ESMF_KIND_R8), pointer, dimension(:,:,:,:)  :: vr8_4d
    type(ESMF_TypeKind_Flag)           :: tk
    integer, pointer                   :: mask(:)
    character(len=ESMF_MAXSTR)         :: FORMATTED
    integer                            :: count
    integer                            :: J,K
    character(len=ESMF_MAXSTR)         :: IAm='MAPL_FieldWrite'
    type (ESMF_DistGrid)               :: distGrid
    
    if (unit < 0 .or. present(arrdes)) then
       FORMATTED = "NO"
    else
       inquire(unit=UNIT, formatted=FORMATTED)
    end if

    call ESMF_FieldGet(field, grid=grid, rc=status)
    VERIFY_(STATUS)
    call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
    VERIFY_(STATUS)
    call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
    VERIFY_(STATUS)

    call ESMF_AttributeGet(field, name='DIMS', value=DIMS, rc=status)
    VERIFY_(STATUS)
    if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
       if(present(HomePE)) then
          mask => HomePE
       else
          call MAPL_TileMaskGet(grid, mask, rc=status)
          VERIFY_(STATUS)
       endif
    end if

    call ESMF_FieldGet(field, Array=array, rc=status)
    VERIFY_(STATUS)
    call ESMF_ArrayGet(array, typekind=tk, rank=rank, rc=status)
    VERIFY_(STATUS)
    if (rank == 1) then
       if (tk == ESMF_TYPEKIND_R4) then
          call ESMF_ArrayGet(array, localDE=0, farrayptr=var_1d, rc=status)
          VERIFY_(STATUS)
          if (associated(var_1d)) then 
             if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
                if(present(varid)) then
                   call MAPL_VarWrite(layout, unit, varid, var_1d, arrdes, mask=mask, rc=status)
                else
                   call MAPL_VarWrite(unit, grid, var_1d, arrdes=arrdes, mask=mask, rc=status)
                endif
             else if (DIMS == MAPL_DimsVertOnly) then
                if(present(varid)) then
                   call MAPL_VarWrite(layout, unit, varid, var_1d, arrdes, rc=status)
                else
                   call WRITE_PARALLEL(var_1d, unit, arrdes=arrdes, rc=status)
                endif
             else
                RETURN_(ESMF_FAILURE)
             end if
          end if
       else
          call ESMF_ArrayGet(array, localDE=0, farrayptr=vr8_1d, rc=status)
          VERIFY_(STATUS)
          if (associated(vr8_1d)) then
             if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
                if(present(varid)) then
                   print*,trim(Iam),': R8_1d Tile not coded yet'
                   ASSERT_(.false.)
!                   call MAPL_VarWrite(unit, grid, varid, vr8_1d, arrdes=arrdes, mask=mask, rc=status)
                else
                   call MAPL_VarWrite(unit, grid, vr8_1d, arrdes=arrdes, mask=mask, rc=status)
                endif
             else if (DIMS == MAPL_DimsVertOnly) then
                if(present(varid)) then
                   call MAPL_VarWrite(unit, varid, vr8_1d, arrdes=arrdes, rc=status)
                else
                   call WRITE_PARALLEL(vr8_1d, unit, arrdes=arrdes, rc=status)
                endif
             else
                RETURN_(ESMF_FAILURE)
             end if
          end if
       endif
    else if (rank == 2) then
       if (tk == ESMF_TYPEKIND_R4) then
          call ESMF_ArrayGet(array, localDE=0, farrayptr=var_2d, rc=status)
          VERIFY_(STATUS)
          if (associated(var_2d)) then !ALT: temp kludge
             if (FORMATTED=="YES") THEN
                call WRITE_PARALLEL( &
                     var_2d(lbound(var_2d,1),:), unit, rc=status)
             else
                if (DIMS == MAPL_DimsTileOnly) then
                   do J = 1,size(var_2d,2)
                      if(present(varid)) then
                         arrdes%offset1 = j
                         call MAPL_VarWrite(layout, unit, varid, var_2d(:,J), arrdes=arrdes, mask=mask, rc=status)
                      else
                         call MAPL_VarWrite(unit, grid, var_2d(:,J), arrdes=arrdes, mask=mask, rc=status)
                      endif
                   end do
                else if (DIMS == MAPL_DimsTileTile) then
                   if(present(varid)) then
                      call MAPL_VarWrite(layout, unit, varid, var_2d, arrdes=arrdes, mask=mask, rc=status)
                   else
                      call MAPL_VarWrite(unit, grid, var_2d, arrdes=arrdes, mask=mask, resolution=resolution, rc=status)
                   endif
                else
                   if(present(varid)) then
                      call MAPL_VarWrite(layout, unit, varid, var_2d, arrdes=arrdes, rc=status)
                   else
                      call MAPL_VarWrite(unit, grid, var_2d, resolution=resolution, arrdes=arrdes, rc=status)
                   endif
                end if
             end if
          end if
       else
          call ESMF_ArrayGet(array, localDE=0, farrayptr=vr8_2d, rc=status)
          VERIFY_(STATUS)
          if (associated(vr8_2d)) then !ALT: temp kludge
             if (FORMATTED=="YES") THEN
                call WRITE_PARALLEL( &
                     vr8_2d(lbound(vr8_2d,1),:), unit, rc=status)
             else
                if (DIMS == MAPL_DimsTileOnly) then
                   do J = 1,size(vr8_2d,2)
                      if(present(varid)) then
                         print*,trim(Iam),': R8 TileOnly not coded yet'
                         ASSERT_(.false.)
!                         call MAPL_VarWrite(unit, varid, vr8_2d(:,J), arrdes, mask=mask, grid=grid, rc=status)
                      else
                         call MAPL_VarWrite(unit, grid, vr8_2d(:,J), arrdes=arrdes, mask=mask, rc=status)
                      endif
                   end do
                else if (DIMS == MAPL_DimsTileTile) then
                   call MAPL_VarWrite(unit, grid, vr8_2d, mask=mask, resolution=resolution, rc=status)
                else
                   if(present(varid)) then
                      call MAPL_VarWrite(layout, unit, varid, vr8_2d, arrdes=arrdes, rc=status)
                   else
                      call MAPL_VarWrite(unit, grid, vr8_2d, resolution=resolution, arrdes=arrdes, rc=status)
                   endif
                end if
             end if
          end if
       endif
    else if (rank == 3) then
       if (tk == ESMF_TYPEKIND_R4) then
          call ESMF_ArrayGet(array, localDE=0, farrayptr=var_3d, rc=status)
          VERIFY_(STATUS)
          if (associated(var_3d)) then !ALT: temp kludge
             if (FORMATTED=="YES") THEN
                call WRITE_PARALLEL( &
                     var_3d(lbound(var_3d,1),lbound(var_3d,2),:), unit)
             else
                if (DIMS == MAPL_DimsTileOnly) then
                   do J = 1,size(var_3d,2)
                      do K = 1,size(var_3d,3)
                         if(present(varid)) then
                            arrdes%offset1 = j
                            arrdes%offset2 = k
                            call MAPL_VarWrite(layout, unit, varid, var_3d(:,J,K), arrdes=arrdes, mask=mask, rc=status)
                         else
                            call MAPL_VarWrite(unit, grid, var_3d(:,J,K), arrdes=arrdes, mask=mask, rc=status)
                         endif
                      end do
                   end do
                else
                   if(present(varid)) then
                      call MAPL_VarWrite(layout, unit, varid, var_3d, arrdes=arrdes, rc=status)
                   else
                      call MAPL_VarWrite(unit, grid, var_3d, resolution=resolution, arrdes=arrdes, rc=status)
                   endif
                endif
             endif
          end if
       else
          call ESMF_ArrayGet(array, localDE=0, farrayptr=vr8_3d, rc=status)
          VERIFY_(STATUS)
          if (associated(vr8_3d)) then !ALT: temp kludge
             if (FORMATTED=="YES") THEN
                call WRITE_PARALLEL( &
                     vr8_3d(lbound(vr8_3d,1),lbound(vr8_3d,2),:), unit)
             else
                if (DIMS == MAPL_DimsTileOnly) then
                   do J = 1,size(vr8_3d,2)
                      do K = 1,size(vr8_3d,3)
                         if(present(varid)) then
                            print*,trim(Iam),': R8 TileOnly not coded yet'
                            ASSERT_(.false.)
!                            call MAPL_VarWrite(unit, varid, vr8_3d(:,J,K), arrdes=arrdes, mask=mask, rc=status)
                         else
                            call MAPL_VarWrite(unit, grid, vr8_3d(:,J,K), arrdes=arrdes, mask=mask, rc=status)
                         endif
                      end do
                   end do
                else
                   if(present(varid)) then
                      call MAPL_VarWrite(layout, unit, varid, vr8_3d, arrdes=arrdes, rc=status)
                   else
                      call MAPL_VarWrite(unit, grid, vr8_3d, resolution=resolution, arrdes=arrdes, rc=status)
                   endif
                end if
             endif
          end if
       endif
    else if (rank == 4) then
       if (tk == ESMF_TYPEKIND_R4) then
          call ESMF_ArrayGet(array, localDE=0, farrayptr=var_4d, rc=status)
          VERIFY_(STATUS)
          call MAPL_VarWrite(unit, grid, var_4d, resolution=resolution, rc=status)
       else
          call ESMF_ArrayGet(array, localDE=0, farrayptr=vr8_4d, rc=status)
          VERIFY_(STATUS)
          call MAPL_VarWrite(unit, grid, vr8_4d, resolution=resolution, rc=status)
       endif
    else
       print *, "ERROR: unsupported RANK"
       RETURN_(ESMF_FAILURE)
    endif
    VERIFY_(STATUS)

    if (DIMS == MAPL_DimsTileOnly .or. DIMS == MAPL_DimsTileTile) then
       if(.not.present(HomePE)) then
          deallocate(mask)
       end if
    end if

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_FieldWrite


  subroutine alloc_(A,type,im,jm,rc)
    type (Ptr),        intent(INOUT) :: A
    integer,           intent(IN)    :: TYPE
    integer,           intent(IN)    :: IM
    integer, optional, intent(IN)    :: JM
    integer, optional, intent(out)   :: rc

    integer :: status
    character(len=ESMF_MAXSTR)         :: IAm='alloc_'

    call dealloc_(A,RC=STATUS)
    VERIFY_(STATUS)

    select case (type)
    case (R4_2)
       ASSERT_(present(jm))
       allocate(A%r4_2(IM,JM))
    case (R4_1)
       ASSERT_(.not.present(jm))
       allocate(A%r4_1(IM))
    case (R8_2) 
       ASSERT_(present(jm))
       allocate(A%r8_2(IM,JM))
    case (R8_1) 
       ASSERT_(.not.present(jm))
       allocate(A%r8_1(IM))
    case (i4_1) 
       ASSERT_(.not.present(jm))
       allocate(A%I4_1(IM))
    case (i4_2) 
       ASSERT_(present(jm))
       allocate(A%I4_2(IM,JM))
    case default
       ASSERT_(.false.)
    end select

    a%allocated=type

    RETURN_(ESMF_SUCCESS)
  end subroutine alloc_


  subroutine dealloc_(A,RC)
    type (Ptr), intent(INOUT)        :: A
    integer, optional, intent(out)   :: rc

    integer :: status
    character(len=ESMF_MAXSTR)         :: IAm='dealloc_'

    if(a%allocated/=not_allocated) then
       select case (a%allocated)
       case (R4_2) 
          if(associated(A%r4_2)) deallocate(A%r4_2)
       case (R4_1) 
          if(associated(A%r4_1)) deallocate(A%r4_1)
       case (R8_2) 
          if(associated(A%r8_2)) deallocate(A%r8_2)
       case (R8_1) 
          if(associated(A%r8_1)) deallocate(A%r8_1)
       case (i4_1) 
          if(associated(A%i4_1)) deallocate(A%i4_1)
       case (i4_2) 
          if(associated(A%i4_2)) deallocate(A%i4_2)
       case default
          ASSERT_(.false.)
       end select
       a%allocated=not_allocated
    end if

    RETURN_(ESMF_SUCCESS)
  end subroutine dealloc_

!---------------------------
  subroutine MAPL_VarWrite_I4_1d(UNIT, GRID, A, MASK, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    integer(kind=ESMF_KIND_I4)  , intent(IN   ) :: A(:)
    integer,           optional , intent(IN   ) :: MASK(:)
    integer,           optional , intent(  OUT) :: RC

! Local variables
    integer(kind=ESMF_KIND_I4),  allocatable :: VAR(:)
    integer                               :: IM_WORLD
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distGrid
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_I4_1d'

    if(unit < 0) then

      munit => MEM_units(-unit)
      munit%prevrec = munit%prevrec + 1
      if(.not.associated(munit%Records)) then
         allocate(munit%Records(16),stat=status)
         VERIFY_(STATUS)
      elseif(size(munit%Records)< munit%prevrec) then
         allocate(REC(munit%prevrec*2),stat=status)
         VERIFY_(STATUS)
         REC(:munit%prevrec-1) = munit%Records
         deallocate(munit%Records)
         munit%Records => REC
      endif
      call alloc_(munit%Records(munit%prevrec),i4_1,size(A),rc=status)	
      VERIFY_(STATUS)
      munit%Records(munit%prevrec)%I4_1  = A

    else

    call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
    VERIFY_(STATUS)

    IM_WORLD = DIMS(1)

    allocate(VAR(IM_WORLD), stat=status)
    VERIFY_(STATUS)

    call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
    VERIFY_(STATUS)
    call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
    VERIFY_(STATUS)

    call ArrayGather(A, VAR, grid, mask=mask, rc=status)
    VERIFY_(STATUS)
    if (MAPL_am_i_root(layout)) then
       write (UNIT, IOSTAT=status) VAR
       VERIFY_(STATUS)
    end if
    
    deallocate(VAR)

    endif

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_I4_1d

!---------------------------
  subroutine MAPL_VarWrite_R4_1d(UNIT, GRID, A, MASK, arrdes, writeFCtrl, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R4)     , intent(IN   ) :: A(:)
    integer,           optional , intent(IN   ) :: MASK(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    logical,           optional , intent(IN   ) :: writeFCtrl ! if not present default is .true.
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:)
    real(kind=ESMF_KIND_R4),  allocatable :: GVAR(:)
    integer                               :: IM_WORLD
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distGrid
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_R4_1d'

    integer, allocatable                  :: msk(:), recvcounts(:), displs(:)
    integer                               :: nwrts, mype,  npes, sendcount
    integer                               :: mypeWr
    integer                               :: Rsize, first, last
    integer(KIND=MPI_OFFSET_KIND)         :: offset
    integer(KIND=MPI_OFFSET_KIND)         :: loffset
    integer                               :: i, k, n, i1, in
    integer                               :: ii
    real(kind=ESMF_KIND_R4)               :: dummy
    integer                               :: group, newgroup
    integer                               :: thiscomm
    integer                               :: nactive
    integer                               :: ntransl
    integer, allocatable                  :: pes(:)
    integer, allocatable                  :: inv_pes(:)
    integer, allocatable                  :: r2g(:)
    integer, allocatable                  :: rpes(:)
    integer, allocatable                  :: activeranks(:)
    integer, allocatable                  :: activerecvcounts(:)
    integer                               :: recl
    logical                               :: useWriteFCtrl 

    integer :: numwrite, mpistatus(MPI_STATUS_SIZE)

    if(present(writeFCtrl)) then
       useWriteFCtrl = writeFCtrl 
    else
       useWriteFCtrl = .true.
    end if

    if(present(arrdes)) then
       ASSERT_(present(mask))

       IM_WORLD = arrdes%im_world
       recl = IM_WORLD*4

       call mpi_comm_size(arrdes%iogathercomm,npes ,status)
       VERIFY_(STATUS)
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          call mpi_comm_rank(arrdes%writers_comm,mypeWr ,status)
          VERIFY_(STATUS)
          call mpi_comm_size(arrdes%writers_comm,nwrts,status)
          VERIFY_(STATUS)
       else
          mypeWr = -1
       endif
       call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
       VERIFY_(STATUS)
       call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
       VERIFY_(STATUS)
       call MAPL_CommsBcast(layout, nwrts, 1, 0, rc = status)

       Rsize = im_world/nwrts + 1
       first = mypeWr*Rsize + 1
       if(mypeWr >=  mod(im_world,nwrts)) then
          Rsize = Rsize - 1
          first = first - (mypeWr-mod(im_world,nwrts))
       endif
       last  = first + Rsize - 1

#ifdef DEBUG_MPIIO
	if (mypeWr <= nwrts-1) write(*,'(5i)') mypeWr, IM_WORLD, first, last, Rsize
#endif

       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          allocate(GVAR(Rsize), stat=status)
          VERIFY_(STATUS)
       end if
       allocate(VAR(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate(msk(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate (recvcounts(0:npes-1), stat=status)
       VERIFY_(STATUS)
       allocate (r2g(0:nwrts-1), stat=status)
       VERIFY_(STATUS)
       allocate(inv_pes(0:npes-1),stat=status)
       VERIFY_(STATUS)

       call mpi_comm_rank(arrdes%iogathercomm,mype ,status)
       VERIFY_(STATUS)

       call MPI_COMM_GROUP (arrdes%iogathercomm, GROUP, STATUS)
       VERIFY_(STATUS)

#if 1
       if (arrdes%writers_comm /= MPI_COMM_NULL) then
          allocate(rpes(0:nwrts-1), stat=status)
          VERIFY_(STATUS)

          call MPI_COMM_GROUP (arrdes%writers_comm, NEWGROUP, STATUS)
          VERIFY_(STATUS)
          do n=0,nwrts-1
             rpes(n) = n
          end do
          call MPI_Group_translate_ranks(newgroup, nwrts, rpes, group, r2g, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          deallocate(rpes)
       end if
       call MAPL_CommsBcast(layout, r2g, nwrts, 0, rc = status)
       
#else
       do n=0,nrdrs-1
          r2g(n) = (npes/nrdrs)*n
       end do
#endif
       offset = 1

       do n=0,nwrts-1

          Rsize = im_world/nwrts + 1
          first = n*Rsize + 1
          if(n >=  mod(im_world,nwrts)) then
             Rsize = Rsize - 1
             first = first - (n-mod(im_world,nwrts))
          endif
          last  = first + Rsize - 1

          recvcounts = 0
          do i=first,last
             recvcounts(mask(i)) = recvcounts(mask(i)) + 1
          enddo

          ! Writer "n" must be included in the mpi group + evevybody that need the data
          nactive = count(recvcounts > 0)
          if (recvcounts(r2g(n)) == 0) then
             nactive = nactive + 1
          end if
          allocate (activeranks(0:nactive-1), activerecvcounts(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate(pes(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate (displs(0:nactive), stat=status)
          VERIFY_(STATUS)
          k = 0
          do i=0, npes-1
             if (recvcounts(i) > 0) then
                pes(k) = i
                k = k+1
             end if
          enddo
          if (k /= nactive) then
             k = k+1
             ASSERT_(k == nactive)
             ASSERT_(recvcounts(r2g(n)) == 0)
             pes(nactive-1) = r2g(n)
          end if
          call MPI_GROUP_INCL (GROUP, nactive, PES, newgroup, STATUS)
          VERIFY_(STATUS)
          call MPI_COMM_CREATE(arrdes%iogathercomm, newgroup, thiscomm, STATUS)
          VERIFY_(STATUS)
          call MPI_Group_translate_ranks(group, nactive, pes, newgroup, activeranks, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          inv_pes = -1 ! initialized to invalid
          do i=0,nactive-1
             inv_pes(pes(i)) = i
          end do

          if (thiscomm /= MPI_COMM_NULL) then
             activerecvcounts = 0
             do i=0,nactive-1
                activerecvcounts(activeranks(i)) = recvcounts(pes(i))
                if (pes(i) == r2g(n)) ntransl = activeranks(i)
             end do
             displs(0) = 0
             do i=1,nactive
                displs(i) = displs(i-1) + activerecvcounts(i-1)
             enddo

             sendcount = recvcounts(mype)

             if (sendcount == 0) then
                call MPI_GATHERV( dummy, sendcount, MPI_REAL, &
                                  var,   activerecvcounts, displs, MPI_REAL, &
                                  ntransl, thiscomm, status )
             else
                call MPI_GATHERV( a(offset), sendcount, MPI_REAL, &
                                  var, activerecvcounts, displs, MPI_REAL, &
                                  ntransl, thiscomm, status )
             endif
             VERIFY_(STATUS)
             call MPI_Comm_Free(thiscomm, status)
             VERIFY_(STATUS)

             if(n==mypeWr) then
                msk = mask(first:last)

                do I=1,Rsize
                   K = inv_pes(MSK(I))
                   II = displs(K)+1 ! var is 1-based 
                   GVAR(I) = VAR(II)
                   displs(K) = displs(K) + 1 
                end do
             endif
             offset = offset + sendcount
          end if
          deallocate (displs)
          deallocate(pes)
          deallocate (activerecvcounts, activeranks)

       enddo
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          if(arrdes%offset<=0) then
             offset = 4 
          else
             offset = arrdes%offset 
          endif
          if(useWriteFCtrl .and. mypeWr==0) then
             call MPI_FILE_SEEK(UNIT, offset-4, MPI_SEEK_SET, STATUS)
             VERIFY_(STATUS)
             call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
             VERIFY_(STATUS)
          endif

          Rsize = im_world/nwrts + 1
          first = mypeWr*Rsize + 1
          if(mypeWr >=  mod(im_world,nwrts)) then
             Rsize = Rsize - 1
             first = first - (mypeWr-mod(im_world,nwrts))
          endif
          last  = first + Rsize - 1

          ASSERT_( (lbound(mask,1) <= first) )
          ASSERT_( (ubound(mask,1) >= last ) )

          loffset = offset + (first-1)*4
          call MPI_FILE_WRITE_AT_ALL(UNIT, loffset, GVAR, Rsize, MPI_REAL, mpistatus, STATUS)
          VERIFY_(STATUS)

#ifdef DEBUG_MPIIO
          call MPI_GET_COUNT( mpistatus, MPI_REAL, numwrite, STATUS )
          VERIFY_(STATUS)
          write(*,'(4i,1f)') IM_WORLD, loffset, numwrite, GVAR(1)
#endif

          if(useWriteFCtrl .and. mypeWr==0) then
             call MPI_FILE_SEEK(UNIT, offset+recl, MPI_SEEK_SET, STATUS)
             VERIFY_(STATUS)
             call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
             VERIFY_(STATUS)
          endif
          arrdes%offset = offset + recl + 8
       endif

       call MPI_GROUP_FREE (GROUP, STATUS)
       VERIFY_(STATUS)
       deallocate(var,msk)
       deallocate (inv_pes)
       deallocate (r2g)
       deallocate(recvcounts)
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          deallocate(gvar)
       end if

    elseif(unit < 0) then

      munit => MEM_units(-unit)
      munit%prevrec = munit%prevrec + 1
      if(.not.associated(munit%Records)) then
         allocate(munit%Records(16),stat=status)
         VERIFY_(STATUS)
      elseif(size(munit%Records)< munit%prevrec) then
         allocate(REC(munit%prevrec*2),stat=status)
         VERIFY_(STATUS)
         REC(:munit%prevrec-1) = munit%Records
         deallocate(munit%Records)
         munit%Records => REC
      endif
      call alloc_(munit%Records(munit%prevrec),R4_1,size(A),rc=status)	
      VERIFY_(STATUS)
      munit%Records(munit%prevrec)%R4_1  = A

    else

    call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
    VERIFY_(STATUS)

    IM_WORLD = DIMS(1)

    allocate(VAR(IM_WORLD), stat=status)
    VERIFY_(STATUS)

    call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
    VERIFY_(STATUS)
    call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
    VERIFY_(STATUS)

    call ArrayGather(A, VAR, grid, mask=mask, rc=status)
    VERIFY_(STATUS)
    if (MAPL_am_i_root(layout)) then
       write (UNIT, IOSTAT=status) VAR
       VERIFY_(STATUS)
    end if
    
    deallocate(VAR)

    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_R4_1d

!---------------------------
!---------------------------

  subroutine MAPL_VarWrite_R4_2d(UNIT, GRID, A, MASK, RESOLUTION, ARRDES, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R4)     , intent(IN   ) :: A(:,:)
    integer,           optional , intent(IN   ) :: MASK(:)
    integer,           optional ,   pointer     :: RESOLUTION(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    real                   ,  allocatable :: VARin(:,:)
    real                   ,  allocatable :: VARout(:,:)
    integer                               :: IM0
    integer                               :: JM0
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    integer                               :: gridRank
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distGrid
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_R4_2d'
    character(len=ESMF_MAXSTR)            :: GridTypeAttribute

    real(kind=ESMF_KIND_R4),  allocatable :: buf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x
    integer(kind=MPI_OFFSET_KIND)         :: offset
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: sendcounts(:), displs(:)

    real(kind=ESMF_KIND_R8) :: itime_beg, itime_end, bwidth

    integer                               :: mypeWr
    integer                               :: recl
    integer                               :: numread, mpistatus(MPI_STATUS_SIZE)

#ifdef TIME_MPIIO
  call MPI_BARRIER(MPI_COMM_WORLD,STATUS)
  VERIFY_(STATUS)
  itime_beg = MPI_Wtime(STATUS)
  VERIFY_(STATUS)
#endif

    if(present(arrdes)) then
       IM_WORLD = arrdes%im_world
       JM_WORLD = arrdes%jm_world

       mypeWr = -1 !mark it invalid
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          call mpi_comm_rank(arrdes%writers_comm,mypeWr ,status)
          VERIFY_(STATUS)
       end if

       if(present(mask)) then
          ASSERT_(JM_WORLD==size(A,2))

!          arrdes%offset = 0

! write Fortran control
          if(arrdes%writers_comm /= MPI_COMM_NULL) then
             if(arrdes%offset<=0) then
                offset = 4 
             else
                offset = arrdes%offset 
             endif

             recl = IM_WORLD*JM_WORLD*4

             if(mypeWr==0) then
                call MPI_FILE_SEEK(UNIT, offset-4, MPI_SEEK_SET, STATUS)
                VERIFY_(STATUS)
                call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
                VERIFY_(STATUS)
             endif
          end if

          do j=1,jm_world
             call MAPL_VarWrite(Unit, Grid, a(:,j), mask, arrdes, writeFCtrl=.false., rc=status)
             arrdes%offset = arrdes%offset - 8
          enddo

          arrdes%offset = arrdes%offset + 8

! write Fortran control
          if(arrdes%writers_comm /= MPI_COMM_NULL) then
             if(mypeWr==0) then
                call MPI_FILE_SEEK(UNIT, offset+recl, MPI_SEEK_SET, STATUS)
                VERIFY_(STATUS)
                call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
                VERIFY_(STATUS)
             endif
          end if

       else

       ndes_x = size(arrdes%in)

       call mpi_comm_rank(arrdes%ycomm,myrow,status)
       VERIFY_(STATUS)
       call mpi_comm_rank(arrdes%iogathercomm,myiorank,status)
       VERIFY_(STATUS)
       call mpi_comm_size(arrdes%iogathercomm,num_io_rows,status)
       VERIFY_(STATUS)
       num_io_rows=num_io_rows/ndes_x

       allocate (sendcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
       VERIFY_(STATUS)

       if(myiorank==0) then
          do j=1,num_io_rows
             jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
             sendcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize
          enddo

          displs(1) = 0
          do i=2,ndes_x*num_io_rows
             displs(i) = displs(i-1) + sendcounts(i-1)
          enddo

          jsize = 0
          do j=1,num_io_rows
             jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
          enddo
          allocate(VAR(IM_WORLD,jsize), stat=status)
          VERIFY_(STATUS)
          allocate(buf(IM_WORLD*jsize), stat=status)
          VERIFY_(STATUS)
       end if

!DSK avoid "Attempt to fetch from allocatable variable BUF when it is not allocated"
       if(myiorank/=0) then
          allocate(buf(0), stat=status)
          VERIFY_(STATUS)
       endif

       call mpi_gatherv( a, size(a), MPI_REAL, buf, sendcounts, displs, MPI_REAL, &
            0, arrdes%iogathercomm, status )
       VERIFY_(STATUS)

       if(myiorank==0) then 

          jprev = 0
          k=1
          do l=1,num_io_rows
             jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
             do n=1,ndes_x
                do j=1,jsize
                   do i=arrdes%i1(n),arrdes%in(n)
                      VAR(i,jprev+j) = buf(k)
                      k=k+1
                   end do
                end do
             end do
             jprev = jprev + jsize
          end do
          jsize=jprev

          if(arrdes%offset<=0) then
             offset = 0
          else
             offset = arrdes%offset
          endif

          recl = IM_WORLD*JM_WORLD*4
          if (mypeWr==0) then
#ifdef DEBUG_MPIIO
                print*, offset, recl, offset + IM_WORLD*JM_WORLD*4 + 8
#endif
             call MPI_FILE_SEEK(UNIT, offset, MPI_SEEK_SET, STATUS)
             VERIFY_(STATUS)
             call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
             VERIFY_(STATUS)
          endif
          offset = offset + 4

          offset = offset + (arrdes%j1(myrow+1)-1)*IM_WORLD*4
          call MPI_FILE_WRITE_AT_ALL(UNIT, offset, VAR, IM_WORLD*jsize, MPI_REAL, mpistatus, STATUS)
          VERIFY_(STATUS)
          offset = offset - (arrdes%j1(myrow+1)-1)*IM_WORLD*4

          offset = offset + IM_WORLD*JM_WORLD*4
          if (mypeWr==0) then
             call MPI_FILE_SEEK(UNIT, offset, MPI_SEEK_SET, STATUS)
             VERIFY_(STATUS)
             call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
             VERIFY_(STATUS)
          endif

          arrdes%offset = offset + 4

       end if

       if(myiorank==0) then
          deallocate(VAR, stat=status)
          VERIFY_(STATUS)
!          deallocate(buf, stat=status)
!          VERIFY_(STATUS)
       endif
       deallocate(buf, stat=status)
       VERIFY_(STATUS)
       deallocate (sendcounts, displs, stat=status)
       VERIFY_(STATUS)
    endif

    elseif(unit < 0) then

      munit => MEM_units(-unit)
      munit%prevrec = munit%prevrec + 1
      if(.not.associated(munit%Records)) then
         allocate(munit%Records(16),stat=status)
         VERIFY_(STATUS)
      elseif(size(munit%Records)< munit%prevrec) then
         allocate(REC(munit%prevrec*2),stat=status)
         VERIFY_(STATUS)
         REC(:munit%prevrec-1) = munit%Records
         deallocate(munit%Records)
         munit%Records => REC
      endif
      call alloc_(munit%Records(munit%prevrec),r4_2,size(A,1),size(a,2),rc=status)	
      VERIFY_(STATUS)
      munit%Records(munit%prevrec)%R4_2  = A

    else

      call ESMF_GridGet(GRID, dimCount=gridRank, rc=STATUS)
      VERIFY_(STATUS)
      call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
      VERIFY_(STATUS)

      IM_WORLD = DIMS(1)
      JM_WORLD = DIMS(2)

      allocate(VAR(IM_WORLD,JM_WORLD), stat=status)
      VERIFY_(STATUS)

      call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
      VERIFY_(STATUS)
      call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
      VERIFY_(STATUS)

      call ArrayGather(A, VAR, grid, mask=mask, rc=status)
      VERIFY_(STATUS)
      if (MAPL_am_i_root(layout)) then

         if (present(RESOLUTION)) then
           if (associated(RESOLUTION)) then
            IM0 = RESOLUTION(1)
            JM0 = RESOLUTION(2)
            if (IM_WORLD /= IM0 .or. JM_WORLD /= JM0) then
          !    call ESMF_AttributeGet(grid, 'GridType', value=GridTypeAttribute, rc=STATUS)
          !    if (STATUS /= ESMF_SUCCESS) then
          !       GridTypeAttribute = 'UNKNOWN'
          !    endif
               GridTypeAttribute='Cubed-Sphere'

              if (TRIM(GridTypeAttribute) == 'Cubed-Sphere') then
#ifdef USE_CUBEDSPHERE
                 allocate(VARin(IM_WORLD,JM_WORLD), stat=status)
                 VERIFY_(STATUS)
                 allocate(VARout(IM0,JM0), stat=status)
                 VERIFY_(STATUS)
                 VARin = VAR
                 call cube2latlon(IM_WORLD, JM_WORLD, IM0, JM0, VARin, VARout)
                 deallocate (VAR)
                 allocate ( VAR(IM0,JM0), stat=status )
                 VERIFY_(STATUS)
                 VAR = VARout
                 deallocate(VARout)
                 deallocate(VARin)
#else
                 print *,'MAPL is compiled without Cubed Sphere support'
                 ASSERT_(.false.)
#endif
              else
                 print *, "ERROR: unsupported RESOLUTION Change"
                 RETURN_(ESMF_FAILURE)
              end if
            end if
           end if
         end if

         write (UNIT, IOSTAT=status) VAR
         VERIFY_(STATUS)
      end if
    
      deallocate(VAR)

   end if

#ifdef TIME_MPIIO
  call MPI_BARRIER(MPI_COMM_WORLD,STATUS)
  VERIFY_(STATUS)
  itime_end = MPI_Wtime(STATUS)
  VERIFY_(STATUS)
  bwidth = REAL(IM_WORLD*JM_WORLD*4/1024.0/1024.0,kind=8)
  bwidth = bwidth/(itime_end-itime_beg)
  if (bwidth > peak_iowrite_bandwidth) peak_iowrite_bandwidth = bwidth
  mean_iowrite_bandwidth = (mean_iowrite_bandwidth + bwidth)
  iowrite_counter=iowrite_counter+1
  if (mod(iowrite_counter,72.d0)==0) then
    if (MAPL_AM_I_Root()) write(*,'(a64,3es11.3)') 'MPIIO Write Bandwidth (MB per second): ', peak_iowrite_bandwidth, bwidth, mean_iowrite_bandwidth/iowrite_counter
  endif
#endif 
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_R4_2d

!---------------------------
  subroutine MAPL_VarWrite_R4_3d(UNIT, GRID, A, RESOLUTION, ARRDES, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R4)     , intent(IN   ) :: A(:,:,:)
    integer,           optional ,   pointer     :: RESOLUTION(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: status
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_R4_3d'

    integer :: L

    do L = 1, size(A,3)
       call MAPL_VarWrite(UNIT, GRID, A(:,:,L), RESOLUTION=RESOLUTION, ARRDES=ARRDES, rc=status)
       VERIFY_(STATUS)
    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_R4_3d
  
!---------------------------
  subroutine MAPL_VarWrite_R4_4d(UNIT, GRID, A, RESOLUTION, ARRDES, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R4)     , intent(IN   ) :: A(:,:,:,:)
    integer,           optional ,   pointer     :: RESOLUTION(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: status
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_R4_4d'

    integer :: L

    do L = 1, size(A,4)
       call MAPL_VarWrite(UNIT, GRID, A(:,:,:,L), RESOLUTION=RESOLUTION, ARRDES=ARRDES, rc=status)
       VERIFY_(STATUS)
    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_R4_4d
  
!---------------------------
  subroutine MAPL_VarWrite_R8_1d(UNIT, GRID, A, MASK, arrdes, writeFCtrl, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:)
    integer,           optional , intent(IN   ) :: MASK(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    logical,           optional , intent(IN   ) :: writeFCtrl ! if not present default is .true.
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R8),  allocatable :: VAR(:)
    real(kind=ESMF_KIND_R8),  allocatable :: GVAR(:)
    integer                               :: IM_WORLD
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distGrid
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_R8_1d'

    integer, allocatable                  :: msk(:), recvcounts(:), displs(:)
    integer                               :: nwrts, mype,  npes, sendcount
    integer                               :: mypeWr
    integer                               :: Rsize, first, last
    integer(KIND=MPI_OFFSET_KIND)         :: offset
    integer(KIND=MPI_OFFSET_KIND)         :: loffset
    integer                               :: i, k, n, i1, in
    integer                               :: ii
    real(kind=ESMF_KIND_R8)               :: dummy
    integer                               :: group, newgroup
    integer                               :: thiscomm
    integer                               :: nactive
    integer                               :: ntransl
    integer, allocatable                  :: pes(:)
    integer, allocatable                  :: inv_pes(:)
    integer, allocatable                  :: r2g(:)
    integer, allocatable                  :: rpes(:)
    integer, allocatable                  :: activeranks(:)
    integer, allocatable                  :: activerecvcounts(:)
    integer                               :: recl
    logical                               :: useWriteFCtrl 

    integer :: numwrite, mpistatus(MPI_STATUS_SIZE)

    if(present(writeFCtrl)) then
       useWriteFCtrl = writeFCtrl 
    else
       useWriteFCtrl = .true.
    end if

    if(present(arrdes)) then
       ASSERT_(present(mask))

       IM_WORLD = arrdes%im_world
       recl = IM_WORLD*8

       call mpi_comm_size(arrdes%iogathercomm,npes ,status)
       VERIFY_(STATUS)
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          call mpi_comm_rank(arrdes%writers_comm,mypeWr ,status)
          VERIFY_(STATUS)
          call mpi_comm_size(arrdes%writers_comm,nwrts,status)
          VERIFY_(STATUS)
       else
          mypeWr = -1
       endif
       call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
       VERIFY_(STATUS)
       call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
       VERIFY_(STATUS)
       call MAPL_CommsBcast(layout, nwrts, 1, 0, rc = status)

       Rsize = im_world/nwrts + 1
       first = mypeWr*Rsize + 1
       if(mypeWr >=  mod(im_world,nwrts)) then
          Rsize = Rsize - 1
          first = first - (mypeWr-mod(im_world,nwrts))
       endif
       last  = first + Rsize - 1

#ifdef DEBUG_MPIIO
	if (mypeWr <= nwrts-1) write(*,'(5i)') mypeWr, IM_WORLD, first, last, Rsize
#endif

       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          allocate(GVAR(Rsize), stat=status)
          VERIFY_(STATUS)
       end if
       allocate(VAR(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate(msk(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate (recvcounts(0:npes-1), stat=status)
       VERIFY_(STATUS)
       allocate (r2g(0:nwrts-1), stat=status)
       VERIFY_(STATUS)
       allocate(inv_pes(0:npes-1),stat=status)
       VERIFY_(STATUS)

       call mpi_comm_rank(arrdes%iogathercomm,mype ,status)
       VERIFY_(STATUS)

       call MPI_COMM_GROUP (arrdes%iogathercomm, GROUP, STATUS)
       VERIFY_(STATUS)

#if 1
       if (arrdes%writers_comm /= MPI_COMM_NULL) then
          allocate(rpes(0:nwrts-1), stat=status)
          VERIFY_(STATUS)

          call MPI_COMM_GROUP (arrdes%writers_comm, NEWGROUP, STATUS)
          VERIFY_(STATUS)
          do n=0,nwrts-1
             rpes(n) = n
          end do
          call MPI_Group_translate_ranks(newgroup, nwrts, rpes, group, r2g, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          deallocate(rpes)
       end if
       call MAPL_CommsBcast(layout, r2g, nwrts, 0, rc = status)
       
#else
       do n=0,nrdrs-1
          r2g(n) = (npes/nrdrs)*n
       end do
#endif
       offset = 1

       do n=0,nwrts-1

          Rsize = im_world/nwrts + 1
          first = n*Rsize + 1
          if(n >=  mod(im_world,nwrts)) then
             Rsize = Rsize - 1
             first = first - (n-mod(im_world,nwrts))
          endif
          last  = first + Rsize - 1

          recvcounts = 0
          do i=first,last
             recvcounts(mask(i)) = recvcounts(mask(i)) + 1
          enddo

          ! Writer "n" must be included in the mpi group + evevybody that need the data
          nactive = count(recvcounts > 0)
          if (recvcounts(r2g(n)) == 0) then
             nactive = nactive + 1
          end if
          allocate (activeranks(0:nactive-1), activerecvcounts(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate(pes(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate (displs(0:nactive), stat=status)
          VERIFY_(STATUS)
          k = 0
          do i=0, npes-1
             if (recvcounts(i) > 0) then
                pes(k) = i
                k = k+1
             end if
          enddo
          if (k /= nactive) then
             k = k+1
             ASSERT_(k == nactive)
             ASSERT_(recvcounts(r2g(n)) == 0)
             pes(nactive-1) = r2g(n)
          end if
          call MPI_GROUP_INCL (GROUP, nactive, PES, newgroup, STATUS)
          VERIFY_(STATUS)
          call MPI_COMM_CREATE(arrdes%iogathercomm, newgroup, thiscomm, STATUS)
          VERIFY_(STATUS)
          call MPI_Group_translate_ranks(group, nactive, pes, newgroup, activeranks, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          inv_pes = -1 ! initialized to invalid
          do i=0,nactive-1
             inv_pes(pes(i)) = i
          end do

          if (thiscomm /= MPI_COMM_NULL) then
             activerecvcounts = 0
             do i=0,nactive-1
                activerecvcounts(activeranks(i)) = recvcounts(pes(i))
                if (pes(i) == r2g(n)) ntransl = activeranks(i)
             end do
             displs(0) = 0
             do i=1,nactive
                displs(i) = displs(i-1) + activerecvcounts(i-1)
             enddo

             sendcount = recvcounts(mype)

             if (sendcount == 0) then
                call MPI_GATHERV( dummy, sendcount, MPI_DOUBLE_PRECISION, &
                                  var,   activerecvcounts, displs, MPI_DOUBLE_PRECISION, &
                                  ntransl, thiscomm, status )
             else
                call MPI_GATHERV( a(offset), sendcount, MPI_DOUBLE_PRECISION, &
                                  var, activerecvcounts, displs, MPI_DOUBLE_PRECISION, &
                                  ntransl, thiscomm, status )
             endif
             VERIFY_(STATUS)
             call MPI_Comm_Free(thiscomm, status)
             VERIFY_(STATUS)

             if(n==mypeWr) then
                msk = mask(first:last)

                do I=1,Rsize
                   K = inv_pes(MSK(I))
                   II = displs(K)+1 ! var is 1-based 
                   GVAR(I) = VAR(II)
                   displs(K) = displs(K) + 1 
                end do
             endif
             offset = offset + sendcount
          end if
          deallocate (displs)
          deallocate(pes)
          deallocate (activerecvcounts, activeranks)

       enddo
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          if(arrdes%offset<=0) then
             offset = 4 
          else
             offset = arrdes%offset 
          endif
          if(useWriteFCtrl .and. mypeWr==0) then
             call MPI_FILE_SEEK(UNIT, offset-4, MPI_SEEK_SET, STATUS)
             VERIFY_(STATUS)
             call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
             VERIFY_(STATUS)
          endif

          Rsize = im_world/nwrts + 1
          first = mypeWr*Rsize + 1
          if(mypeWr >=  mod(im_world,nwrts)) then
             Rsize = Rsize - 1
             first = first - (mypeWr-mod(im_world,nwrts))
          endif
          last  = first + Rsize - 1

          ASSERT_( (lbound(mask,1) <= first) )
          ASSERT_( (ubound(mask,1) >= last ) )

          loffset = offset + (first-1)*8
          call MPI_FILE_WRITE_AT_ALL(UNIT, loffset, GVAR, Rsize, MPI_DOUBLE_PRECISION, mpistatus, STATUS)
          VERIFY_(STATUS)

#ifdef DEBUG_MPIIO
          call MPI_GET_COUNT( mpistatus, MPI_DOUBLE_PRECISION, numwrite, STATUS )
          VERIFY_(STATUS)
          write(*,'(4i,1f)') IM_WORLD, loffset, numwrite, GVAR(1)
#endif

          if(useWriteFCtrl .and. mypeWr==0) then
             call MPI_FILE_SEEK(UNIT, offset+recl, MPI_SEEK_SET, STATUS)
             VERIFY_(STATUS)
             call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
             VERIFY_(STATUS)
          endif
          arrdes%offset = offset + recl + 8
       endif

       call MPI_GROUP_FREE (GROUP, STATUS)
       VERIFY_(STATUS)
       deallocate(var,msk)
       deallocate (inv_pes)
       deallocate (r2g)
       deallocate(recvcounts)
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          deallocate(gvar)
       end if

    elseif(unit < 0) then

      munit => MEM_units(-unit)
      munit%prevrec = munit%prevrec + 1
      if(.not.associated(munit%Records)) then
         allocate(munit%Records(16),stat=status)
         VERIFY_(STATUS)
      elseif(size(munit%Records)< munit%prevrec) then
         allocate(REC(munit%prevrec*2),stat=status)
         VERIFY_(STATUS)
         REC(:munit%prevrec-1) = munit%Records
         deallocate(munit%Records)
         munit%Records => REC
      endif
      call alloc_(munit%Records(munit%prevrec),R8_1,size(A),rc=status)	
      VERIFY_(STATUS)
      munit%Records(munit%prevrec)%R8_1  = A

    else

    call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
    VERIFY_(STATUS)

    IM_WORLD = DIMS(1)

    allocate(VAR(IM_WORLD), stat=status)
    VERIFY_(STATUS)

    call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
    VERIFY_(STATUS)
    call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
    VERIFY_(STATUS)

    call ArrayGather(A, VAR, grid, mask=mask, rc=status)
    VERIFY_(STATUS)
    if (MAPL_am_i_root(layout)) then
       write (UNIT, IOSTAT=status) VAR
       VERIFY_(STATUS)
    end if
    
    deallocate(VAR)

    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_R8_1d

!---------------------------

  subroutine MAPL_VarWrite_R8_2d(UNIT, GRID, A, MASK, RESOLUTION, ARRDES, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:,:)
    integer,           optional , intent(IN   ) :: MASK(:)
    integer,           optional ,   pointer     :: RESOLUTION(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R8),  allocatable :: VAR(:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    real                   ,  allocatable :: VARin(:,:)
    real                   ,  allocatable :: VARout(:,:)
    integer                               :: IM0
    integer                               :: JM0
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    integer                               :: gridRank
    type (ESMF_DELayout)                  :: layout
    type (ESMF_DistGrid)                  :: distGrid
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_R8_2d'
    character(len=ESMF_MAXSTR)            :: GridTypeAttribute

    real(kind=ESMF_KIND_R8),  allocatable :: buf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x
    integer(kind=MPI_OFFSET_KIND)         :: offset
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: sendcounts(:), displs(:)

    real(kind=ESMF_KIND_R8) :: itime_beg, itime_end, bwidth

    integer                               :: mypeWr
    integer                               :: recl
    integer                               :: numread, mpistatus(MPI_STATUS_SIZE)

#ifdef TIME_MPIIO
  call MPI_BARRIER(MPI_COMM_WORLD,STATUS)
  VERIFY_(STATUS)
  itime_beg = MPI_Wtime(STATUS)
  VERIFY_(STATUS)
#endif

    if(present(arrdes)) then
       IM_WORLD = arrdes%im_world
       JM_WORLD = arrdes%jm_world

       mypeWr = -1 !mark it invalid
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          call mpi_comm_rank(arrdes%writers_comm,mypeWr ,status)
          VERIFY_(STATUS)
       end if

       if(present(mask)) then
          ASSERT_(JM_WORLD==size(A,2))

!          arrdes%offset = 0

! write Fortran control
          if(arrdes%writers_comm /= MPI_COMM_NULL) then
             if(arrdes%offset<=0) then
                offset = 4 
             else
                offset = arrdes%offset 
             endif

             recl = IM_WORLD*JM_WORLD*8

             if(mypeWr==0) then
                call MPI_FILE_SEEK(UNIT, offset-4, MPI_SEEK_SET, STATUS)
                VERIFY_(STATUS)
                call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
                VERIFY_(STATUS)
             endif
          end if

          do j=1,jm_world
             call MAPL_VarWrite(Unit, Grid, a(:,j), mask, arrdes, writeFCtrl=.false., rc=status)
             arrdes%offset = arrdes%offset - 8
          enddo

          arrdes%offset = arrdes%offset + 8

! write Fortran control
          if(arrdes%writers_comm /= MPI_COMM_NULL) then
             if(mypeWr==0) then
                call MPI_FILE_SEEK(UNIT, offset+recl, MPI_SEEK_SET, STATUS)
                VERIFY_(STATUS)
                call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
                VERIFY_(STATUS)
             endif
          end if

       else

       ndes_x = size(arrdes%in)

       call mpi_comm_rank(arrdes%ycomm,myrow,status)
       VERIFY_(STATUS)
       call mpi_comm_rank(arrdes%iogathercomm,myiorank,status)
       VERIFY_(STATUS)
       call mpi_comm_size(arrdes%iogathercomm,num_io_rows,status)
       VERIFY_(STATUS)
       num_io_rows=num_io_rows/ndes_x

       allocate (sendcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
       VERIFY_(STATUS)

       if(myiorank==0) then
          do j=1,num_io_rows
             jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
             sendcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize
          enddo

          displs(1) = 0
          do i=2,ndes_x*num_io_rows
             displs(i) = displs(i-1) + sendcounts(i-1)
          enddo

          jsize = 0
          do j=1,num_io_rows
             jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
          enddo
          allocate(VAR(IM_WORLD,jsize), stat=status)
          VERIFY_(STATUS)
          allocate(buf(IM_WORLD*jsize), stat=status)
          VERIFY_(STATUS)
       end if

!DSK avoid "Attempt to fetch from allocatable variable BUF when it is not allocated"
       if(myiorank/=0) then
          allocate(buf(0), stat=status)
          VERIFY_(STATUS)
       endif

       call mpi_gatherv( a, size(a), MPI_DOUBLE_PRECISION, buf, sendcounts, displs, MPI_DOUBLE_PRECISION, &
            0, arrdes%iogathercomm, status )
       VERIFY_(STATUS)

       if(myiorank==0) then 

          jprev = 0
          k=1
          do l=1,num_io_rows
             jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
             do n=1,ndes_x
                do j=1,jsize
                   do i=arrdes%i1(n),arrdes%in(n)
                      VAR(i,jprev+j) = buf(k)
                      k=k+1
                   end do
                end do
             end do
             jprev = jprev + jsize
          end do
          jsize=jprev

          if(arrdes%offset<=0) then
             offset = 0
          else
             offset = arrdes%offset
          endif

          recl = IM_WORLD*JM_WORLD*8
          if (mypeWr==0) then
#ifdef DEBUG_MPIIO
		print*, offset, recl, offset + IM_WORLD*JM_WORLD*8 + 8
#endif
             call MPI_FILE_SEEK(UNIT, offset, MPI_SEEK_SET, STATUS)
             VERIFY_(STATUS)
             call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
             VERIFY_(STATUS)
          endif
          offset = offset + 4

          offset = offset + (arrdes%j1(myrow+1)-1)*IM_WORLD*8
          call MPI_FILE_WRITE_AT_ALL(UNIT, offset, VAR, IM_WORLD*jsize, MPI_DOUBLE_PRECISION, mpistatus, STATUS)
          VERIFY_(STATUS)
          offset = offset - (arrdes%j1(myrow+1)-1)*IM_WORLD*8 

          offset = offset + IM_WORLD*JM_WORLD*8 
          if (mypeWr==0) then
             call MPI_FILE_SEEK(UNIT, offset, MPI_SEEK_SET, STATUS)
             VERIFY_(STATUS)
             call MPI_FILE_WRITE(UNIT, recl, 1, MPI_INTEGER, MPI_STATUS_IGNORE, STATUS)
             VERIFY_(STATUS)
          endif

          arrdes%offset = offset + 4

       end if

       if(myiorank==0) then
          deallocate(VAR, stat=status)
          VERIFY_(STATUS)
!          deallocate(buf, stat=status)
!          VERIFY_(STATUS)
       endif
       deallocate(buf, stat=status)
       VERIFY_(STATUS)
       deallocate (sendcounts, displs, stat=status)
       VERIFY_(STATUS)
    endif

    elseif(unit < 0) then

      munit => MEM_units(-unit)
      munit%prevrec = munit%prevrec + 1
      if(.not.associated(munit%Records)) then
         allocate(munit%Records(16),stat=status)
         VERIFY_(STATUS)
      elseif(size(munit%Records)< munit%prevrec) then
         allocate(REC(munit%prevrec*2),stat=status)
         VERIFY_(STATUS)
         REC(:munit%prevrec-1) = munit%Records
         deallocate(munit%Records)
         munit%Records => REC
      endif
      call alloc_(munit%Records(munit%prevrec),r8_2,size(A,1),size(a,2),rc=status)	
      VERIFY_(STATUS)
      munit%Records(munit%prevrec)%R8_2  = A

    else

      call ESMF_GridGet(GRID, dimCount=gridRank, rc=STATUS)
      VERIFY_(STATUS)
      call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
      VERIFY_(STATUS)

      IM_WORLD = DIMS(1)
      JM_WORLD = DIMS(2)

      allocate(VAR(IM_WORLD,JM_WORLD), stat=status)
      VERIFY_(STATUS)

      call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
      VERIFY_(STATUS)
      call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
      VERIFY_(STATUS)

      call ArrayGather(A, VAR, grid, mask=mask, rc=status)
      VERIFY_(STATUS)
      if (MAPL_am_i_root(layout)) then

         if (present(RESOLUTION)) then
           if (associated(RESOLUTION)) then
            IM0 = RESOLUTION(1)
            JM0 = RESOLUTION(2)
            if (IM_WORLD /= IM0 .or. JM_WORLD /= JM0) then
          !    call ESMF_AttributeGet(grid, 'GridType', value=GridTypeAttribute, rc=STATUS)
          !    if (STATUS /= ESMF_SUCCESS) then
          !       GridTypeAttribute = 'UNKNOWN'
          !    endif
               GridTypeAttribute='Cubed-Sphere'

              if (TRIM(GridTypeAttribute) == 'Cubed-Sphere') then
#ifdef USE_CUBEDSPHERE
                 allocate(VARin(IM_WORLD,JM_WORLD), stat=status)
                 VERIFY_(STATUS)
                 allocate(VARout(IM0,JM0), stat=status)
                 VERIFY_(STATUS)
                 VARin = VAR
                 call cube2latlon(IM_WORLD, JM_WORLD, IM0, JM0, VARin, VARout)
                 deallocate (VAR)
                 allocate ( VAR(IM0,JM0), stat=status )
                 VERIFY_(STATUS)
                 VAR = VARout
                 deallocate(VARout)
                 deallocate(VARin)
#else
                 print *,'MAPL is compiled without Cubed Sphere support'
                 ASSERT_(.false.)
#endif
              else
                 print *, "ERROR: unsupported RESOLUTION Change"
                 RETURN_(ESMF_FAILURE)
              end if
            end if
           end if
         end if

         write (UNIT, IOSTAT=status) VAR
         VERIFY_(STATUS)
      end if
    
      deallocate(VAR)

    end if

#ifdef TIME_MPIIO
  call MPI_BARRIER(MPI_COMM_WORLD,STATUS)
  VERIFY_(STATUS)
  itime_end = MPI_Wtime(STATUS)
  VERIFY_(STATUS)
  bwidth = REAL(IM_WORLD*JM_WORLD*8/1024.0/1024.0,kind=8)
  bwidth = bwidth/(itime_end-itime_beg)
  if (bwidth > peak_iowrite_bandwidth) peak_iowrite_bandwidth = bwidth
  mean_iowrite_bandwidth = (mean_iowrite_bandwidth + bwidth)
  iowrite_counter=iowrite_counter+1
  if (mod(iowrite_counter,72.d0)==0) then
  if (MAPL_AM_I_Root()) write(*,'(a64,3es11.3)') 'MPIIO Write Bandwidth (MB per second): ', peak_iowrite_bandwidth, bwidth, mean_iowrite_bandwidth/iowrite_counter
  endif
#endif 
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_R8_2d

!---------------------------
  subroutine MAPL_VarWrite_R8_3d(UNIT, GRID, A, RESOLUTION, ARRDES, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:,:,:)
    integer,           optional ,   pointer     :: RESOLUTION(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: status
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_R8_3d'

    integer :: L

    do L = 1, size(A,3)
       call MAPL_VarWrite(UNIT, GRID, A(:,:,L), RESOLUTION=RESOLUTION, ARRDES=ARRDES, rc=status)
       VERIFY_(STATUS)
    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_R8_3d
  
!---------------------------
  subroutine MAPL_VarWrite_R8_4d(UNIT, GRID, A, RESOLUTION, ARRDES, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_Grid)            , intent(INout) :: GRID
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:,:,:,:)
    integer,           optional ,   pointer     :: RESOLUTION(:)
    type(ArrDescr),     optional, intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: status
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWrite_R8_4d'

    integer :: L

    do L = 1, size(A,4)
       call MAPL_VarWrite(UNIT, GRID, A(:,:,:,L), RESOLUTION=RESOLUTION, ARRDES=ARRDES, rc=status)
       VERIFY_(STATUS)
    end do

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWrite_R8_4d
  
!---------------------------
!---------------------------
!---------------------------

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "arrayscatter.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "arrayscatter.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "arrayscatter.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "arrayscatter.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 3
#include "arraygather.H"

!---------------------------
#define RANK_ 1
#define VARTYPE_ 4
#include "arraygather.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 3
#include "arraygather.H"

!---------------------------
#define RANK_ 2
#define VARTYPE_ 4
#include "arraygather.H"


!---------------------------
!---------------------------


    subroutine MAPL_ClimUpdate ( STATE, BEFORE, AFTER, &
                                 CURRENT_TIME, NAMES, FILE, RC )
        type(ESMF_State),       intent(INOUT) :: STATE
        type(ESMF_Time),        intent(  out) :: BEFORE, AFTER
        type(ESMF_Time),        intent(inout) :: CURRENT_TIME !ALT:intent(in)
        character(len=*),       intent(in   ) :: NAMES(:)
        character(len=*),       intent(in   ) :: FILE
        integer,  optional,     intent(  out) :: RC

        integer :: STATUS
        character(len=ESMF_MAXSTR) :: IAm = 'MAPL_ClimUpdate'


        integer          :: I, M, M1, M2
        integer          :: NFLD
        integer          :: UNIT
        integer          :: DONE
        real             :: dum(1)

        type (ESMF_Field   ), pointer :: PREV(:)
        type (ESMF_Field   ), pointer :: NEXT(:)
        type (ESMF_DELayout)          :: LAYOUT
        type (ESMF_Grid    )          :: GRID
        type (ESMF_DistGrid)          :: distGRID


    ! --------------------------------------------------------------------------
    ! Allocate the number of fileds in the file
    ! --------------------------------------------------------------------------

        NFLD = size(NAMES)
        ASSERT_(NFLD>0)

        allocate(PREV(NFLD),stat=STATUS)
        VERIFY_(STATUS)
        allocate(NEXT(NFLD),stat=STATUS)
        VERIFY_(STATUS)

    ! --------------------------------------------------------------------------
    ! get the fields from the state
    ! --------------------------------------------------------------------------

        do I=1,NFLD
           call ESMF_StateGet ( STATE, trim(NAMES(I))//'_PREV', PREV(I), RC=STATUS )
           VERIFY_(STATUS)
           call ESMF_StateGet ( STATE, trim(NAMES(I))//'_NEXT', NEXT(I), RC=STATUS )
           VERIFY_(STATUS)
        end do

        call ESMF_FieldGet(PREV(1), GRID=GRID,    RC=STATUS)
        VERIFY_(STATUS)
        call ESMF_GridGet    (GRID,   distGrid=distGrid, rc=STATUS)
        VERIFY_(STATUS)
        call ESMF_DistGridGet(distGRID, delayout=layout, rc=STATUS)
        VERIFY_(STATUS)

    ! --------------------------------------------------------------------------
    ! Find out the times of next, prev from the field attributes
    ! --------------------------------------------------------------------------

        call MAPL_FieldGetTime ( PREV(1), BEFORE, RC=STATUS )
        VERIFY_(STATUS)
        call MAPL_FieldGetTime ( NEXT(1), AFTER , RC=STATUS )
        VERIFY_(STATUS)

    ! --------------------------------------------------------------------------
    ! check to see if albedos need to be refreshed in the
    ! ESMF Internal State (prev, next need to surround
    ! the current time)
    ! --------------------------------------------------------------------------

        call ESMF_TimeGet ( BEFORE, yy=I, rc=STATUS )
        VERIFY_(STATUS)

        DONE = 0
        if( I > 0) then
           if( (BEFORE <= CURRENT_TIME) .and. (AFTER >= CURRENT_TIME)) then
              DONE = 1
           end if
        end if

        if(DONE /= 1) then

    ! --------------------------------------------------------------------------
    !  Get the midmonth times for the months before and after the current time
    ! --------------------------------------------------------------------------

           call MAPL_GetClimMonths ( CURRENT_TIME, BEFORE, AFTER,  RC=STATUS )
           VERIFY_(STATUS)

           call ESMF_TimeGet ( BEFORE, MM=M1, rc=STATUS )
           VERIFY_(STATUS)
           call ESMF_TimeGet ( AFTER , MM=M2, rc=STATUS )
           VERIFY_(STATUS)

    ! --------------------------------------------------------------------------
    !  Read the albedo climatologies from file
    ! --------------------------------------------------------------------------

           UNIT = GETFILE(FILE, form="unformatted",  RC=STATUS)
           VERIFY_(STATUS)

           DONE = 0
           do M=1,12
              if    (M==M1) then
                 do I=1,NFLD
                    call MAPL_VarRead(UNIT, PREV(I), RC=STATUS)
                    VERIFY_(STATUS)
                 end do
                 if(DONE==1) exit
                 DONE = DONE + 1
              elseif(M==M2) then
                 do I=1,NFLD
                    call MAPL_VarRead(UNIT, NEXT(I), RC=STATUS)
                    VERIFY_(STATUS)
                 end do
                 if(DONE==1) exit
                 DONE = DONE + 1
              else
                 call MAPL_Skip(UNIT,LAYOUT,COUNT=NFLD,rc=status)
                 VERIFY_(STATUS)
              end if
           end do

           call FREE_FILE ( Unit )
 
    ! --------------------------------------------------------------------------
    !  Reset the time on all fields
    ! --------------------------------------------------------------------------

           do I=1,NFLD
              call MAPL_FieldSetTime (  PREV(I), BEFORE, rc=STATUS )
              VERIFY_(STATUS)
              call MAPL_FieldSetTime (  NEXT(I), AFTER , rc=STATUS )
              VERIFY_(STATUS)
           end do
   
        endif

        deallocate(NEXT)
        deallocate(PREV)

        RETURN_(ESMF_SUCCESS)
      end subroutine MAPL_ClimUpdate


    subroutine MAPL_GetClimMonths ( CURRENT_TIME, BEFORE, AFTER, RC )
        type(ESMF_Time), intent(inout) :: CURRENT_TIME !ALT: intent(in)
        type(ESMF_Time), intent(out) :: BEFORE, AFTER
        integer,optional,intent(out) :: RC

        integer :: STATUS
        character(len=ESMF_MAXSTR) :: IAm = 'MAPL_GetClimMonths'

        integer                 :: MonthCurr
        type(ESMF_Time        ) :: midMonth
        type(ESMF_TimeInterval) :: oneMonth

        call ESMF_TimeIntervalSet(oneMonth, MM = 1, RC=STATUS )
        VERIFY_(STATUS)
        call ESMF_TimeGet(CURRENT_TIME, midMonth=midMonth, mm=MonthCurr, RC=STATUS )
        VERIFY_(STATUS)

        if( CURRENT_TIME < midMonth ) then
           AFTER    = midMonth
           midMonth = midMonth - oneMonth
           call ESMF_TimeGet (midMonth, midMonth=BEFORE, rc=STATUS )
           VERIFY_(STATUS)
        else
           BEFORE   = midMonth
           midMonth = midMonth + oneMonth
           call ESMF_TimeGet (midMonth, midMonth=AFTER , rc=STATUS )
           VERIFY_(STATUS)
        endif

        RETURN_(ESMF_SUCCESS)
    end subroutine MAPL_GetClimMonths
    
  subroutine MAPL_Skip(UNIT, LAYOUT, COUNT, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_DELayout)        , intent(IN   ) :: LAYOUT
    integer,           optional , intent(IN   ) :: COUNT
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: STATUS
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_Skip'
    integer                               :: N, NN

    if(present(COUNT)) then
       NN=COUNT
    else
       NN=1
    endif

    if (unit < 0) then
       munit => MEM_units(-unit)
       munit%prevrec = munit%prevrec + NN
       RETURN_(ESMF_SUCCESS)
    endif

    if (MAPL_AM_I_ROOT(LAYOUT)) then

       do N=1,NN
          read (unit=UNIT, IOSTAT=status)
          VERIFY_(STATUS)
       end do
    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_Skip

  subroutine MAPL_Backspace(UNIT, LAYOUT, COUNT, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_DELayout)        , intent(IN   ) :: LAYOUT
    integer,           optional , intent(IN   ) :: COUNT
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: STATUS
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_Backspace'
    integer                               :: N, NN

    if (MAPL_AM_I_ROOT(LAYOUT)) then
       if(present(COUNT)) then
          NN=COUNT
       else
          NN=1
       endif

       do N=1,NN
          backspace(unit=UNIT, IOSTAT=status)
          VERIFY_(STATUS)
       end do
    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_Backspace

  subroutine MAPL_Rewind(UNIT, LAYOUT, RC)

    integer                     , intent(IN   ) :: UNIT
    type (ESMF_DELayout)        , intent(IN   ) :: LAYOUT
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: STATUS
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_Rewind'

    if (MAPL_AM_I_ROOT(LAYOUT)) then
       rewind(unit=UNIT, IOSTAT=status)
       VERIFY_(STATUS)
    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_Rewind

  subroutine MAPL_TileMaskGet(grid, mask, rc)
    type (ESMF_Grid),             intent(INout) :: GRID
    integer, pointer                            :: mask(:)
    integer,           optional , intent(  OUT) :: RC

! Local variables

    integer                               :: STATUS
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_TileMaskGet'
    integer, pointer                      :: tileIndex(:)
    integer                               :: gcount(2), lcount(2)
    integer                               :: gsize, lsize
    integer                               :: gridRank
    integer                               :: n
    type (ESMF_DistGrid)                  :: distGrid

    integer,               allocatable    :: AL(:,:)
    integer,               allocatable    :: AU(:,:)
    integer, allocatable, dimension(:)    :: recvcounts, displs
    integer                               :: de, deId
    integer                               :: nDEs
    integer                               :: sendcount
    
    integer                               :: I, II
    integer                               :: I1, IN
    integer, allocatable                  :: var(:)
    integer                               :: deList(1)
    type (ESMF_DELayout)                  :: layout

    integer                               :: mmax
    type(ESMF_VM) :: vm


    call ESMF_GridGet(grid, dimCount=gridRank, distGrid=distGrid, rc=status)
    VERIFY_(STATUS)
    ASSERT_(gridRank == 1)

    call MAPL_GridGet(grid, globalCellCountPerDim=gcount, &
         localCellCountPerDim=lcount, RC=STATUS)
    VERIFY_(STATUS)

    gsize = gcount(1)
    lsize = lcount(1)

    allocate(mask(gsize), stat=status)
    VERIFY_(STATUS)

    call ESMF_DistGridGet(distgrid, localDe=0, elementCount=n, rc=status)
    ASSERT_(lsize == n)

    allocate(tileIndex(lsize), stat=status)
    VERIFY_(STATUS)

    call ESMF_DistGridGet(distgrid, localDe=0, seqIndexList=tileIndex, rc=status)
    VERIFY_(STATUS)

    call ESMF_DistGridGet(distGRID, delayout=layout, rc=STATUS)
    VERIFY_(STATUS)
    call ESMF_DELayoutGet(layout, deCount =nDEs, localDeList=deList, rc=status)
    VERIFY_(STATUS)
    deId = deList(1)

    allocate (AL(gridRank,0:nDEs-1),  stat=status)
    VERIFY_(STATUS)
    allocate (AU(gridRank,0:nDEs-1),  stat=status)
    VERIFY_(STATUS)

    call ESMF_DistGridGet(distgrid, &
         minIndexPDe=AL, maxIndexPDe=AU, rc=status)
    VERIFY_(STATUS)

    allocate (recvcounts(0:nDEs-1), displs(0:nDEs), stat=status)
    VERIFY_(STATUS)

    allocate(VAR(0:gsize-1), stat=status)
    VERIFY_(STATUS)
    
    displs(0) = 0
    do I = 0,nDEs-1
       de = I
       I1 = AL(1,I)
       IN = AU(1,I)

       recvcounts(I) = (IN - I1 + 1)
       if (de == deId) then
          sendcount = recvcounts(I)      ! Count I will send
       endif

       displs(I+1) = displs(I) + recvcounts(I)
    enddo

#ifdef NEW
    call ESMF_DELayoutGet(layout, vm=vm, rc=status)
    VERIFY_(STATUS)
    do I = 0,nDEs-1
       de = I
       I1 = AL(1,I)
       IN = AU(1,I)
       var(I1:IN) = -9999
       if (de == deId) then
          var(I1:IN) = tileindex
       endif
       do II=I1,IN
          mmax=var(II)
          call MAPL_CommsAllReduceMax(vm, mmax, var(II), 1, rc=status)
          VERIFY_(STATUS)
       enddo
    end do
#else
    call MAPL_CommsAllGatherV(layout, tileindex, sendcount, &
                              var, recvcounts, displs, status)
    VERIFY_(STATUS)
#endif

    do I = 0,nDEs-1
       mask(displs(I)+1:displs(I+1)) = I
    end do
    call MAPL_SORT(var,MASK)

! clean up
    
    deallocate(var)
    deallocate (recvcounts, displs)
    deallocate (AU)
    deallocate (AL)
    deallocate(tileIndex)

! mask is deallocated in the caller routine

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_TileMaskGet

!---------------------------

  subroutine MAPL_VarWriteNCpar_R4_3d(layout, fid, varid, A, ARRDES, RC)

    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R4)     , intent(IN   ) :: A(:,:,:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:,:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    integer                               :: KM_WORLD
    real                   ,  allocatable :: VARin(:,:)
    real                   ,  allocatable :: VARout(:,:)
    integer                               :: IM0
    integer                               :: JM0
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    integer                               :: gridRank
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWriteNCpar_R4_3d'
    character(len=ESMF_MAXSTR)            :: GridTypeAttribute

    real(kind=ESMF_KIND_R4),  allocatable :: recvbuf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x,lev
    integer                               :: ndims, start(4), cnt(4), dimids(4)
    character(len=ESMF_MAXSTR)            :: dimname
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: recvcounts(:), displs(:)

    IM_WORLD = arrdes%im_world
    JM_WORLD = arrdes%jm_world
    KM_WORLD = size(a,3)
    ndes_x = size(arrdes%in)

    call mpi_comm_rank(arrdes%ycomm,myrow,status)
    VERIFY_(STATUS)
    call mpi_comm_rank(arrdes%iogathercomm,myiorank,status)
    VERIFY_(STATUS)
    call mpi_comm_size(arrdes%iogathercomm,num_io_rows,status)
    VERIFY_(STATUS)
    num_io_rows=num_io_rows/ndes_x

    allocate (recvcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
    VERIFY_(STATUS)

    if(myiorank==0) then
       do j=1,num_io_rows
          jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
          recvcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize * KM_WORLD
       enddo

       displs(1) = 0
       do i=2,ndes_x*num_io_rows
          displs(i) = displs(i-1) + recvcounts(i-1)
       enddo

       jsize = 0
       do j=1,num_io_rows
          jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
       enddo
       allocate(VAR(IM_WORLD,jsize,KM_WORLD), stat=status)
       VERIFY_(STATUS)
       allocate(recvbuf(IM_WORLD*jsize*KM_WORLD), stat=status)
       VERIFY_(STATUS)
!       VAR=Z'7FA00000'
!       recvbuf=Z'7FA00000'
    end if

    if(myiorank/=0) then
       allocate(recvbuf(0), stat=status)
       VERIFY_(STATUS)
    endif

    call mpi_gatherv( a, size(a), MPI_REAL, recvbuf, recvcounts, displs, MPI_REAL, &
                      0, arrdes%iogathercomm, status )
    VERIFY_(STATUS)

    if(myiorank==0) then

       jprev = 0
       k=1
       do l=1,num_io_rows
         jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
         do n=1,ndes_x
           do lev=1,KM_WORLD
             do j=1,jsize
               do i=arrdes%i1(n),arrdes%in(n)
                 VAR(i,jprev+j,lev) = recvbuf(k)
                 k=k+1
               end do
             end do
           enddo
         end do
         jprev = jprev + jsize
       end do
       jsize=jprev

       start(1) = 1
       start(2) = arrdes%j1(myrow+1)
       start(3) = 1
       start(4) = 1
       cnt(1) = IM_WORLD
       cnt(2) = jsize
       cnt(3) = KM_WORLD
       cnt(4) = 1

       STATUS = NF_PUT_VARA_REAL(fid, varid, start, cnt, VAR)
       if(status /= nf_noerr) then
          print*,'Error writing variable ',status
          print*, NF_STRERROR(status)
          VERIFY_(STATUS)
       endif
       deallocate(VAR, stat=status)
       VERIFY_(STATUS)

    endif ! myiorank

    deallocate(recvbuf, stat=status)
    VERIFY_(STATUS)
    deallocate (recvcounts, displs, stat=status)
    VERIFY_(STATUS)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWriteNCpar_R4_3d

!---------------------------

  subroutine MAPL_VarReadNCpar_R4_3d(layout, fid, varid, A, ARRDES, RC)
  
    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R4)     , intent(IN   ) :: A(:,:,:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:,:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    integer                               :: KM_WORLD
    integer                               :: status
    integer                               :: gridRank
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarReadNCpar_R4_3d'

    real(kind=ESMF_KIND_R4),  allocatable :: buf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x,lev
    integer                               :: ndims, start(4), cnt(4), dimids(4)
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: sendcounts(:), displs(:)

    ndes_x = size(arrdes%in)
    IM_WORLD = arrdes%im_world
    JM_WORLD = arrdes%jm_world
    KM_WORLD = size(a,3)

    call mpi_comm_rank(arrdes%ycomm,myrow,status)
    VERIFY_(STATUS)
    call mpi_comm_rank(arrdes%ioscattercomm,myiorank,status)
    VERIFY_(STATUS)
    call mpi_comm_size(arrdes%ioscattercomm,num_io_rows,status)
    VERIFY_(STATUS)
    num_io_rows=num_io_rows/ndes_x

    allocate (sendcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
    VERIFY_(STATUS)

    if(myiorank==0) then
       do j=1,num_io_rows
          jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
          sendcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize * KM_WORLD
       enddo

       displs(1) = 0
       do i=2,ndes_x*num_io_rows
          displs(i) = displs(i-1) + sendcounts(i-1)
       enddo

       jsize = 0
       do j=1,num_io_rows
          jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
       enddo
       allocate(VAR(IM_WORLD,jsize,KM_WORLD), stat=status)
       VERIFY_(STATUS)
       allocate(buf(IM_WORLD*jsize*KM_WORLD), stat=status)
       VERIFY_(STATUS)

       start(1) = 1
       start(2) = arrdes%j1(myrow+1)
       start(3) = 1
       start(4) = 1
       cnt(1) = IM_WORLD
       cnt(2) = jsize
       cnt(3) = KM_WORLD
       cnt(4) = 1
    
       STATUS = NF_GET_VARA_REAL(fid, varid, start, cnt, VAR)
       if(status /= nf_noerr) then
          print*,'Error reading variable ',status
          print*, NF_STRERROR(status)
          VERIFY_(STATUS)
       endif

       jprev = 0
       k=1
       do l=1,num_io_rows
          jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
          do n=1,ndes_x
            do lev=1,KM_WORLD
              do j=1,jsize
                do i=arrdes%i1(n),arrdes%in(n)
                  buf(k) = VAR(i,jprev+j,lev)
                  k=k+1
                end do
              end do
            enddo
          end do
          jprev = jprev + jsize
       end do

       deallocate(VAR, stat=status)
       VERIFY_(STATUS)
    end if ! myiorank

    if(myiorank/=0) then
       allocate(buf(0), stat=status)
       VERIFY_(STATUS)
    endif

    call mpi_scatterv( buf, sendcounts, displs, MPI_REAL, &
            a,  size(a),  MPI_REAL, &
            0, arrdes%ioscattercomm, status )
    VERIFY_(STATUS)

    deallocate(buf, stat=status)
    VERIFY_(STATUS)
    deallocate (sendcounts, displs, stat=status)
    VERIFY_(STATUS)
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarReadNCpar_R4_3d

!---------------------------

  subroutine MAPL_VarWriteNCpar_R8_3d(layout, fid, varid, A, ARRDES, RC)

    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:,:,:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R8),  allocatable :: VAR(:,:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    integer                               :: KM_WORLD
    real                   ,  allocatable :: VARin(:,:)
    real                   ,  allocatable :: VARout(:,:)
    integer                               :: IM0
    integer                               :: JM0
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    integer                               :: gridRank
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWriteNCpar_R8_3d'
    character(len=ESMF_MAXSTR)            :: GridTypeAttribute

    real(kind=ESMF_KIND_R8),  allocatable :: recvbuf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x,lev
    integer                               :: ndims, start(4), cnt(4), dimids(4)
    character(len=ESMF_MAXSTR)            :: dimname
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: recvcounts(:), displs(:)

    IM_WORLD = arrdes%im_world
    JM_WORLD = arrdes%jm_world
    KM_WORLD = size(a,3)
    ndes_x = size(arrdes%in)

    call mpi_comm_rank(arrdes%ycomm,myrow,status)
    VERIFY_(STATUS)
    call mpi_comm_rank(arrdes%iogathercomm,myiorank,status)
    VERIFY_(STATUS)
    call mpi_comm_size(arrdes%iogathercomm,num_io_rows,status)
    VERIFY_(STATUS)
    num_io_rows=num_io_rows/ndes_x

    allocate (recvcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
    VERIFY_(STATUS)

    if(myiorank==0) then
       do j=1,num_io_rows
          jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
          recvcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize * KM_WORLD
       enddo

       displs(1) = 0
       do i=2,ndes_x*num_io_rows
          displs(i) = displs(i-1) + recvcounts(i-1)
       enddo

       jsize = 0
       do j=1,num_io_rows
          jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
       enddo
       allocate(VAR(IM_WORLD,jsize,KM_WORLD), stat=status)
       VERIFY_(STATUS)
       allocate(recvbuf(IM_WORLD*jsize*KM_WORLD), stat=status)
       VERIFY_(STATUS)
!       VAR=Z'7FFC000000000000'
!       recvbuf=Z'7FFC000000000000'
    end if

    if(myiorank/=0) then
       allocate(recvbuf(0), stat=status)
       VERIFY_(STATUS)
    endif

    call mpi_gatherv( a, size(a), MPI_DOUBLE_PRECISION, recvbuf, recvcounts, displs, &
                      MPI_DOUBLE_PRECISION, 0, arrdes%iogathercomm, status )
    VERIFY_(STATUS)

    if(myiorank==0) then

       jprev = 0
       k=1
       do l=1,num_io_rows
         jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
         do n=1,ndes_x
           do lev=1,KM_WORLD
             do j=1,jsize
               do i=arrdes%i1(n),arrdes%in(n)
                 VAR(i,jprev+j,lev) = recvbuf(k)
                 k=k+1
               end do
             end do
           enddo
         end do
         jprev = jprev + jsize
       end do
       jsize=jprev

       start(1) = 1
       start(2) = arrdes%j1(myrow+1)
       start(3) = 1
       start(4) = 1
       cnt(1) = IM_WORLD
       cnt(2) = jsize
       cnt(3) = KM_WORLD
       cnt(4) = 1

       STATUS = NF_PUT_VARA_DOUBLE(fid, varid, start, cnt, VAR)
       if(status /= nf_noerr) then
          print*,'Error writing variable ',status
          print*, NF_STRERROR(status)
          VERIFY_(STATUS)
       endif
       deallocate(VAR, stat=status)
       VERIFY_(STATUS)

    endif ! myiorank

    deallocate(recvbuf, stat=status)
    VERIFY_(STATUS)
    deallocate (recvcounts, displs, stat=status)
    VERIFY_(STATUS)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWriteNCpar_R8_3d

!---------------------------

  subroutine MAPL_VarReadNCpar_R8_3d(layout, fid, varid, A, ARRDES, RC)
  
    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:,:,:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R8),  allocatable :: VAR(:,:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    integer                               :: KM_WORLD
    integer                               :: status
    integer                               :: gridRank
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarReadNCpar_R8_3d'

    real(kind=ESMF_KIND_R8),  allocatable :: buf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x,lev
    integer                               :: ndims, start(4), cnt(4), dimids(4)
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: sendcounts(:), displs(:)

    ndes_x = size(arrdes%in)
    IM_WORLD = arrdes%im_world
    JM_WORLD = arrdes%jm_world
    KM_WORLD = size(a,3)

    call mpi_comm_rank(arrdes%ycomm,myrow,status)
    VERIFY_(STATUS)
    call mpi_comm_rank(arrdes%ioscattercomm,myiorank,status)
    VERIFY_(STATUS)
    call mpi_comm_size(arrdes%ioscattercomm,num_io_rows,status)
    VERIFY_(STATUS)
    num_io_rows=num_io_rows/ndes_x

    allocate (sendcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
    VERIFY_(STATUS)

    if(myiorank==0) then
       do j=1,num_io_rows
          jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
          sendcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize * KM_WORLD
       enddo

       displs(1) = 0
       do i=2,ndes_x*num_io_rows
          displs(i) = displs(i-1) + sendcounts(i-1)
       enddo

       jsize = 0
       do j=1,num_io_rows
          jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
       enddo
       allocate(VAR(IM_WORLD,jsize,KM_WORLD), stat=status)
       VERIFY_(STATUS)
       allocate(buf(IM_WORLD*jsize*KM_WORLD), stat=status)
       VERIFY_(STATUS)
!       VAR=Z'7FFC000000000000'
!       buf=Z'7FFC000000000000'

       start(1) = 1
       start(2) = arrdes%j1(myrow+1)
       start(3) = 1
       start(4) = 1
       cnt(1) = IM_WORLD
       cnt(2) = jsize
       cnt(3) = KM_WORLD
       cnt(4) = 1
    
       STATUS = NF_GET_VARA_DOUBLE(fid, varid, start, cnt, VAR)
       if(status /= nf_noerr) then
             print*,'Error reading variable ',status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
       endif

       jprev = 0
       k=1
       do l=1,num_io_rows
          jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
          do n=1,ndes_x
            do lev=1,KM_WORLD
              do j=1,jsize
                do i=arrdes%i1(n),arrdes%in(n)
                  buf(k) = VAR(i,jprev+j,lev)
                  k=k+1
                end do
              end do
            enddo
          end do
          jprev = jprev + jsize
       end do

       deallocate(VAR, stat=status)
       VERIFY_(STATUS)
    end if ! myiorank

    if(myiorank/=0) then
       allocate(buf(0), stat=status)
       VERIFY_(STATUS)
    endif

    call mpi_scatterv( buf, sendcounts, displs, MPI_DOUBLE_PRECISION, &
            a,  size(a),  MPI_DOUBLE_PRECISION, &
            0, arrdes%ioscattercomm, status )
    VERIFY_(STATUS)

    deallocate(buf, stat=status)
    VERIFY_(STATUS)
    deallocate (sendcounts, displs, stat=status)
    VERIFY_(STATUS)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarReadNCpar_R8_3d

!---------------------------

  subroutine MAPL_VarWriteNCpar_R4_2d(layout, fid, varid, A, ARRDES, MASK, RC)

    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R4)     , intent(IN   ) :: A(:,:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(IN   ) :: MASK(:)
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:,:)
    real(kind=ESMF_KIND_R4),  allocatable :: GVAR(:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    real                   ,  allocatable :: VARin(:,:)
    real                   ,  allocatable :: VARout(:,:)
    integer                               :: IM0
    integer                               :: JM0
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    integer                               :: gridRank
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWriteNCpar_R4_2d'
    character(len=ESMF_MAXSTR)            :: GridTypeAttribute

    real(kind=ESMF_KIND_R4),  allocatable :: recvbuf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x,lev
    integer                               :: ndims, start(4), cnt(4), dimids(4)
    integer                               :: isize, first, last
    integer                               :: nwrts, mype,  npes, sendcount
    integer                               :: mypeWr
    character(len=ESMF_MAXSTR)            :: dimname
    integer                               :: ii
    real(kind=ESMF_KIND_R4)               :: dummy
    integer                               :: group, newgroup
    integer                               :: thiscomm
    integer                               :: nactive
    integer                               :: ntransl
    integer, allocatable                  :: pes(:)
    integer, allocatable                  :: inv_pes(:)
    integer, allocatable                  :: r2g(:)
    integer, allocatable                  :: rpes(:)
    integer, allocatable                  :: activeranks(:)
    integer, allocatable                  :: activerecvcounts(:)
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: msk(:), recvcounts(:), displs(:)

    real(kind=ESMF_KIND_R8) :: itime_beg, itime_end, bwidth

    integer                               :: numread, mpistatus(MPI_STATUS_SIZE)

    IM_WORLD = arrdes%im_world
    JM_WORLD = arrdes%jm_world

    if(present(mask)) then
       do j=1,jm_world
          arrdes%offset1 = j
          arrdes%offset2 = 1
          call MAPL_VarWrite(layout, fid, varid, a(:,j), mask=mask, arrdes=arrdes, rc=status)
       enddo
    else

       ndes_x = size(arrdes%in)

       call mpi_comm_rank(arrdes%ycomm,myrow,status)
       VERIFY_(STATUS)
       call mpi_comm_rank(arrdes%iogathercomm,myiorank,status)
       VERIFY_(STATUS)
       call mpi_comm_size(arrdes%iogathercomm,num_io_rows,status)
       VERIFY_(STATUS)
       num_io_rows=num_io_rows/ndes_x

       allocate (recvcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
       VERIFY_(STATUS)

       if(myiorank==0) then
          do j=1,num_io_rows
             jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
             recvcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize
          enddo

          displs(1) = 0
          do i=2,ndes_x*num_io_rows
             displs(i) = displs(i-1) + recvcounts(i-1)
          enddo

          jsize = 0
          do j=1,num_io_rows
             jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
          enddo
          allocate(VAR(IM_WORLD,jsize), stat=status)
          VERIFY_(STATUS)
          allocate(recvbuf(IM_WORLD*jsize), stat=status)
          VERIFY_(STATUS)
!          VAR=Z'7FA00000'
!          recvbuf=Z'7FA00000'
       end if

       if(myiorank/=0) then
          allocate(recvbuf(0), stat=status)
          VERIFY_(STATUS)
       endif

       call mpi_gatherv( a, size(a), MPI_REAL, recvbuf, recvcounts, displs, MPI_REAL, &
                      0, arrdes%iogathercomm, status )
       VERIFY_(STATUS)

       if(myiorank==0) then

          jprev = 0
          k=1
          do l=1,num_io_rows
            jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
            do n=1,ndes_x
              do j=1,jsize
                do i=arrdes%i1(n),arrdes%in(n)
                  VAR(i,jprev+j) = recvbuf(k)
                  k=k+1
                end do
              end do
            end do
            jprev = jprev + jsize
          end do
          jsize=jprev

          start(1) = 1
          start(2) = arrdes%j1(myrow+1)
          start(3) = 1
          start(4) = 1
          cnt(1) = IM_WORLD
          cnt(2) = jsize
          cnt(3) = 1
          cnt(4) = 1

          STATUS = NF_PUT_VARA_REAL(fid, varid, start, cnt, VAR)
          if(status /= nf_noerr) then
             print*,'Error writing variable ',status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif
          deallocate(VAR, stat=status)
          VERIFY_(STATUS)

       endif ! myiorank

       deallocate(recvbuf, stat=status)
       VERIFY_(STATUS)
       deallocate (recvcounts, displs, stat=status)
       VERIFY_(STATUS)

    endif

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWriteNCpar_R4_2d

!---------------------------

  subroutine MAPL_VarReadNCpar_R4_2d(layout, UNIT, varid, A, ARRDES, MASK, RC)
  
    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: UNIT
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R4)     , intent(  OUT) :: A(:,:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(IN   ) :: MASK(:)
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    integer                               :: status
    integer                               :: gridRank
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarReadNCpar_R4_2d'

    real(kind=ESMF_KIND_R4),  allocatable :: buf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x,lev
    integer                               :: ndims, start(4), cnt(4), dimids(4)
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: sendcounts(:), displs(:)

    integer :: numread, mpistatus(MPI_STATUS_SIZE)

    IM_WORLD = arrdes%im_world
    JM_WORLD = arrdes%jm_world

    if(present(mask)) then
     do j=1,jm_world
        arrdes%offset1 = j
        arrdes%offset2 = 1
        call MAPL_VarRead(layout, UNIT, varid, a(:,j), arrdes, mask=mask, rc=status)
     enddo
    else

    ndes_x = size(arrdes%in)
    call mpi_comm_rank(arrdes%ycomm,myrow,status)
    VERIFY_(STATUS)
    call mpi_comm_rank(arrdes%ioscattercomm,myiorank,status)
    VERIFY_(STATUS)
    call mpi_comm_size(arrdes%ioscattercomm,num_io_rows,status)
    VERIFY_(STATUS)
    num_io_rows=num_io_rows/ndes_x

    allocate (sendcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
    VERIFY_(STATUS)

    if(myiorank==0) then
       do j=1,num_io_rows
          jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
          sendcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize
       enddo

       displs(1) = 0
       do i=2,ndes_x*num_io_rows
          displs(i) = displs(i-1) + sendcounts(i-1)
       enddo

       jsize = 0
       do j=1,num_io_rows
          jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
       enddo
       allocate(VAR(IM_WORLD,jsize), stat=status)
       VERIFY_(STATUS)
       allocate(buf(IM_WORLD*jsize), stat=status)
       VERIFY_(STATUS)

       start(1) = 1
       start(2) = arrdes%j1(myrow+1)
       start(3) = 1
       start(4) = 1
       cnt(1) = IM_WORLD
       cnt(2) = jsize
       cnt(3) = 1
       cnt(4) = 1
    
       STATUS = NF_GET_VARA_REAL(UNIT, varid, start, cnt, VAR)
       if(status /= nf_noerr) then
          print*,'Error reading variable ',status
          print*, NF_STRERROR(status)
          VERIFY_(STATUS)
       endif

       jprev = 0
       k=1
       do l=1,num_io_rows
          jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
          do n=1,ndes_x
            do j=1,jsize
              do i=arrdes%i1(n),arrdes%in(n)
                buf(k) = VAR(i,jprev+j)
                k=k+1
              end do
            end do
          end do
          jprev = jprev + jsize
       end do

       deallocate(VAR, stat=status)
       VERIFY_(STATUS)
    end if ! myiorank

    if(myiorank/=0) then
       allocate(buf(0), stat=status)
       VERIFY_(STATUS)
    endif

    call mpi_scatterv( buf, sendcounts, displs, MPI_REAL, &
            a,  size(a),  MPI_REAL, &
            0, arrdes%ioscattercomm, status )
    VERIFY_(STATUS)

    deallocate(buf, stat=status)
    VERIFY_(STATUS)
    deallocate (sendcounts, displs, stat=status)
    VERIFY_(STATUS)

    endif

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarReadNCpar_R4_2d

!---------------------------

  subroutine MAPL_VarWriteNCpar_R4_1d(layout, UNIT, varid, A, ARRDES, MASK, RC)

    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: UNIT
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R4)     , intent(IN   ) :: A(:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(IN   ) :: MASK(:)
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:)
    real(kind=ESMF_KIND_R4),  allocatable :: GVAR(:)
    integer                               :: IM_WORLD
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    type (ESMF_DistGrid)                  :: distGrid
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWriteNCpar_R4_1d'

    integer, allocatable                  :: msk(:), recvcounts(:), displs(:)
    integer                               :: nwrts, mype,  npes, sendcount
    integer                               :: mypeWr, io_rank
    integer                               :: Rsize, first, last
    integer(KIND=MPI_OFFSET_KIND)         :: offset
    integer(KIND=MPI_OFFSET_KIND)         :: loffset
    integer                               :: i, k, n, i1, in
    integer                               :: ii
    real(kind=ESMF_KIND_R4)               :: dummy
    integer                               :: group, newgroup
    integer                               :: thiscomm
    integer                               :: nactive
    integer                               :: ntransl
    integer, allocatable                  :: pes(:)
    integer, allocatable                  :: inv_pes(:)
    integer, allocatable                  :: r2g(:)
    integer, allocatable                  :: rpes(:)
    integer, allocatable                  :: activeranks(:)
    integer, allocatable                  :: activerecvcounts(:)
    integer                               :: recl
    integer                               :: start(4), cnt(4)

    integer :: numwrite, mpistatus(MPI_STATUS_SIZE)

    if(present(mask)) then

       IM_WORLD = arrdes%im_world
       recl = IM_WORLD*4

       call mpi_comm_size(arrdes%iogathercomm,npes ,status)
       VERIFY_(STATUS)
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          call mpi_comm_rank(arrdes%writers_comm,mypeWr ,status)
          VERIFY_(STATUS)
          call mpi_comm_size(arrdes%writers_comm,nwrts,status)
          VERIFY_(STATUS)
       else
          mypeWr = -1
       endif
       call MAPL_CommsBcast(layout, nwrts, 1, 0, rc = status)

       Rsize = im_world/nwrts + 1
       first = mypeWr*Rsize + 1
       if(mypeWr >=  mod(im_world,nwrts)) then
          Rsize = Rsize - 1
          first = first - (mypeWr-mod(im_world,nwrts))
       endif
       last  = first + Rsize - 1

#ifdef DEBUG_MPIIO
        if (mypeWr <= nwrts-1) write(*,'(5i)') mypeWr, IM_WORLD, first, last, Rsize
#endif

       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          allocate(GVAR(Rsize), stat=status)
          VERIFY_(STATUS)
       end if
       allocate(VAR(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate(msk(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate (recvcounts(0:npes-1), stat=status)
       VERIFY_(STATUS)
       allocate (r2g(0:nwrts-1), stat=status)
       VERIFY_(STATUS)
       allocate(inv_pes(0:npes-1),stat=status)
       VERIFY_(STATUS)

       call mpi_comm_rank(arrdes%iogathercomm,mype ,status)
       VERIFY_(STATUS)

       call MPI_COMM_GROUP (arrdes%iogathercomm, GROUP, STATUS)
       VERIFY_(STATUS)

#if 1
       if (arrdes%writers_comm /= MPI_COMM_NULL) then
          allocate(rpes(0:nwrts-1), stat=status)
          VERIFY_(STATUS)

          call MPI_COMM_GROUP (arrdes%writers_comm, NEWGROUP, STATUS)
          VERIFY_(STATUS)
          do n=0,nwrts-1
             rpes(n) = n
          end do
          call MPI_Group_translate_ranks(newgroup, nwrts, rpes, group, r2g, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          deallocate(rpes)
       end if
       call MAPL_CommsBcast(layout, r2g, nwrts, 0, rc = status)
       
#else
       do n=0,nrdrs-1
          r2g(n) = (npes/nrdrs)*n
       end do
#endif
       offset = 1

       do n=0,nwrts-1

          Rsize = im_world/nwrts + 1
          first = n*Rsize + 1
          if(n >=  mod(im_world,nwrts)) then
             Rsize = Rsize - 1
             first = first - (n-mod(im_world,nwrts))
          endif
          last  = first + Rsize - 1

          recvcounts = 0
          do i=first,last
             recvcounts(mask(i)) = recvcounts(mask(i)) + 1
          enddo

          ! Writer "n" must be included in the mpi group + evevybody that need the data
          nactive = count(recvcounts > 0)
          if (recvcounts(r2g(n)) == 0) then
             nactive = nactive + 1
          end if
          allocate (activeranks(0:nactive-1), activerecvcounts(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate(pes(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate (displs(0:nactive), stat=status)
          VERIFY_(STATUS)
          k = 0
          do i=0, npes-1
             if (recvcounts(i) > 0) then
                pes(k) = i
                k = k+1
             end if
          enddo
          if (k /= nactive) then
             k = k+1
             ASSERT_(k == nactive)
             ASSERT_(recvcounts(r2g(n)) == 0)
             pes(nactive-1) = r2g(n)
          end if
          call MPI_GROUP_INCL (GROUP, nactive, PES, newgroup, STATUS)
          VERIFY_(STATUS)
          call MPI_COMM_CREATE(arrdes%iogathercomm, newgroup, thiscomm, STATUS)
          VERIFY_(STATUS)
          call MPI_Group_translate_ranks(group, nactive, pes, newgroup, activeranks, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          inv_pes = -1 ! initialized to invalid
          do i=0,nactive-1
             inv_pes(pes(i)) = i
          end do

          if (thiscomm /= MPI_COMM_NULL) then
             activerecvcounts = 0
             do i=0,nactive-1
                activerecvcounts(activeranks(i)) = recvcounts(pes(i))
                if (pes(i) == r2g(n)) ntransl = activeranks(i)
             end do
             displs(0) = 0
             do i=1,nactive
                displs(i) = displs(i-1) + activerecvcounts(i-1)
             enddo

             sendcount = recvcounts(mype)

             if (sendcount == 0) then
                call MPI_GATHERV( dummy, sendcount, MPI_REAL, &
                                  var,   activerecvcounts, displs, MPI_REAL, &
                                  ntransl, thiscomm, status )
             else
                call MPI_GATHERV( a(offset), sendcount, MPI_REAL, &
                                  var, activerecvcounts, displs, MPI_REAL, &
                                  ntransl, thiscomm, status )
             endif
             VERIFY_(STATUS)
             call MPI_Comm_Free(thiscomm, status)
             VERIFY_(STATUS)

             if(n==mypeWr) then
                msk = mask(first:last)

                do I=1,Rsize
                   K = inv_pes(MSK(I))
                   II = displs(K)+1 ! var is 1-based 
                   GVAR(I) = VAR(II)
                   displs(K) = displs(K) + 1 
                end do
             endif
             offset = offset + sendcount
          end if
          deallocate (displs)
          deallocate(pes)
          deallocate (activerecvcounts, activeranks)

       enddo
       if(arrdes%writers_comm /= MPI_COMM_NULL) then

          Rsize = im_world/nwrts + 1
          first = mypeWr*Rsize + 1
          if(mypeWr >=  mod(im_world,nwrts)) then
             Rsize = Rsize - 1
             first = first - (mypeWr-mod(im_world,nwrts))
          endif
          last  = first + Rsize - 1

          ASSERT_( (lbound(mask,1) <= first) )
          ASSERT_( (ubound(mask,1) >= last ) )
! lon, lat, lev, time
          start(1) = first
          start(2) = arrdes%offset1
          start(3) = arrdes%offset2
          start(4) = 1
          cnt(1) = Rsize
          cnt(2) = 1
          cnt(3) = 1
          cnt(4) = 1
!          print*,'start values are ',start
!          print*,'count values are ',cnt

          STATUS = NF_PUT_VARA_REAL(UNIT, varid, start, cnt, GVAR)
          if(status /= nf_noerr) then
             print*,'Error writing variable ', status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif

       endif

       call MPI_GROUP_FREE (GROUP, STATUS)
       VERIFY_(STATUS)
       deallocate(var,msk)
       deallocate (inv_pes)
       deallocate (r2g)
       deallocate(recvcounts)
       if(arrdes%writers_comm /= MPI_COMM_NULL) then
          deallocate(gvar)
       end if

    elseif(unit < 0) then

      munit => MEM_units(-unit)
      munit%prevrec = munit%prevrec + 1
      if(.not.associated(munit%Records)) then
         allocate(munit%Records(16),stat=status)
         VERIFY_(STATUS)
      elseif(size(munit%Records)< munit%prevrec) then
         allocate(REC(munit%prevrec*2),stat=status)
         VERIFY_(STATUS)
         REC(:munit%prevrec-1) = munit%Records
         deallocate(munit%Records)
         munit%Records => REC
      endif
      call alloc_(munit%Records(munit%prevrec),R4_1,size(A),rc=status)
      VERIFY_(STATUS)
      munit%Records(munit%prevrec)%R4_1  = A

    else

! Comments
! This routine is used to write PREF to moist_import_checkpoint 

       if (arrdes%writers_comm/=MPI_COMM_NULL) then
          call MPI_COMM_RANK(arrdes%writers_comm, io_rank, STATUS)
          VERIFY_(STATUS)
          if (io_rank == 0) then
             STATUS = NF_PUT_VARA_REAL(UNIT, varid, 1, size(a), A)
             if(status /= nf_noerr) then
                print*,trim(IAm),'Error writing variable ',status
                print*, NF_STRERROR(status)
                VERIFY_(STATUS)
             endif
          endif
        endif

!    call MAPL_GridGet(GRID, globalCellCountPerDim=DIMS, RC=STATUS)
!    VERIFY_(STATUS)

!    IM_WORLD = DIMS(1)

!    allocate(VAR(IM_WORLD), stat=status)
!    VERIFY_(STATUS)

!    call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
!    VERIFY_(STATUS)
!    call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
!    VERIFY_(STATUS)

!    call ArrayGather(A, VAR, grid, mask=mask, rc=status)
!    VERIFY_(STATUS)
!    if (MAPL_am_i_root(layout)) then
!       write (UNIT, IOSTAT=status) VAR
!       VERIFY_(STATUS)
!    end if
    
!    deallocate(VAR)

    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWriteNCpar_R4_1d

!----------------------------------------------------------------------------

  subroutine MAPL_VarReadNCpar_R4_1d(layout, UNIT, varid, A, ARRDES, MASK,  RC)

    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: UNIT
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R4)     , intent(  OUT) :: A(:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(IN   ) :: MASK(:)
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R4),  allocatable :: VAR(:)
    integer                               :: IM_WORLD
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarReadNCpar_R4_1d'
    integer, allocatable                  :: msk(:), sendcounts(:), displs(:)
    integer, allocatable                  :: idx(:)
    integer                               :: nrdrs, mype,  npes, recvcount
    integer                               :: mypeRd, io_rank, reader
    integer                               :: Rsize, first, last
    integer(KIND=MPI_OFFSET_KIND)         :: offset
    integer(KIND=MPI_OFFSET_KIND)         :: loffset
    integer                               :: i, k, n, i1, in
    real(kind=ESMF_KIND_R4)               :: dummy
    integer                               :: group, newgroup
    integer                               :: thiscomm
    integer                               :: nactive
    integer                               :: ntransl
    integer, allocatable                  :: pes(:)
    integer, allocatable                  :: r2g(:)
    integer, allocatable                  :: rpes(:)
    integer, allocatable                  :: activeranks(:)
    integer, allocatable                  :: activesendcounts(:)
    integer                               :: start(4), cnt(4)

    integer :: numread, mpistatus(MPI_STATUS_SIZE)


    if(present(mask)) then

       IM_WORLD = arrdes%im_world

       call mpi_comm_size(arrdes%ioscattercomm,npes ,status)
       VERIFY_(STATUS)
       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          call mpi_comm_rank(arrdes%readers_comm,mypeRd ,status)
          VERIFY_(STATUS)
          call mpi_comm_size(arrdes%readers_comm,nrdrs,status)
          VERIFY_(STATUS)
       else
          mypeRd = -1
       endif

       call MAPL_CommsBcast(layout, nrdrs, 1, 0, rc = status)
       VERIFY_(STATUS)
       Rsize = im_world/nrdrs + 1
       first = mypeRd*Rsize + 1
       if(mypeRd >=  mod(im_world,nrdrs)) then
          Rsize = Rsize - 1
          first = first - (mypeRd-mod(im_world,nrdrs))
       endif
       last  = first + Rsize - 1

#ifdef DEBUG_MPIIO
        if (mypeRd <= nrdrs-1) write(*,'(5i)') mypeRd, IM_WORLD, first, last, Rsize
#endif

       allocate(VAR(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate(msk(Rsize), stat=status)
       VERIFY_(STATUS)
       allocate (sendcounts(0:npes-1), stat=status)
       VERIFY_(STATUS)
       allocate (r2g(0:nrdrs-1), stat=status)
       VERIFY_(STATUS)

       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          start(1) = first
          start(2) = arrdes%offset1
          start(3) = arrdes%offset2
          start(4) = 1
          cnt(1) = Rsize
          cnt(2) = 1
          cnt(3) = 1
          cnt(4) = 1
!          print*,'start values are ',start
!          print*,'count values are ',count

          STATUS = NF_GET_VARA_REAL(UNIT, varid, start, cnt, VAR)
          if(status /= nf_noerr) then
             print*,'Error reading variable ',status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif

          ASSERT_( (lbound(mask,1) <= first) )
          ASSERT_( (ubound(mask,1) >= last ) )
          msk = mask(first:last)

          allocate(idx(Rsize), stat=status)
          VERIFY_(STATUS)

          do i=1,Rsize
             idx(i) = i
          enddo
          msk = mask(first:last)
          call MAPL_Sort(msk,idx)
          msk = mask(first:last)
          call MAPL_Sort(msk,var)
       endif

       call mpi_comm_rank(arrdes%ioscattercomm,mype ,status)
       VERIFY_(STATUS)

       call MPI_COMM_GROUP (arrdes%ioscattercomm, GROUP, STATUS)
       VERIFY_(STATUS)

#if 1
       if (arrdes%readers_comm /= MPI_COMM_NULL) then
          allocate(rpes(0:nrdrs-1), stat=status)
          VERIFY_(STATUS)

          call MPI_COMM_GROUP (arrdes%readers_comm, NEWGROUP, STATUS)
          VERIFY_(STATUS)
          do n=0,nrdrs-1
             rpes(n) = n
          end do
          call MPI_Group_translate_ranks(newgroup, nrdrs, rpes, group, r2g, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)
          deallocate(rpes)
       end if
       call MAPL_CommsBcast(layout, r2g, nrdrs, 0, rc = status)
       VERIFY_(STATUS)
       
#else
       do n=0,nrdrs-1
          r2g(n) = (npes/nrdrs)*n
       end do
#endif

       offset = 1

       do n=0,nrdrs-1

          Rsize = im_world/nrdrs + 1
          first = n*Rsize + 1
          if(n >=  mod(im_world,nrdrs)) then
             Rsize = Rsize - 1
             first = first - (n-mod(im_world,nrdrs))
          endif
          last  = first + Rsize - 1

          sendcounts = 0
          do i=first,last
             sendcounts(mask(i)) = sendcounts(mask(i)) + 1
          enddo

          ! Reader "n" must be included in the mpi group + evevybody that need the data
          nactive = count(sendcounts > 0)
          if (sendcounts(r2g(n)) == 0) then
             nactive = nactive + 1
          end if
          allocate (activeranks(0:nactive-1), activesendcounts(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate(pes(0:nactive-1), stat=status)
          VERIFY_(STATUS)
          allocate (displs(0:nactive), stat=status)
          VERIFY_(STATUS)
          k = 0
          do i=0, npes-1
             if (sendcounts(i) > 0) then
                pes(k) = i
                k = k+1
             end if
          enddo
          if (k /= nactive) then
             k = k+1
             ASSERT_(k == nactive)
             ASSERT_(sendcounts(r2g(n)) == 0)
             pes(nactive-1) = r2g(n)
          end if
          call MPI_GROUP_INCL (GROUP, nactive, PES, newgroup, STATUS)
          VERIFY_(STATUS)
          call MPI_COMM_CREATE(arrdes%ioscattercomm, newgroup, thiscomm, STATUS)
          VERIFY_(STATUS)
          call MPI_Group_translate_ranks(group, nactive, pes, newgroup, activeranks, status)
          VERIFY_(STATUS)
          call MPI_GROUP_FREE (NEWGROUP, STATUS)
          VERIFY_(STATUS)

          if (thiscomm /= MPI_COMM_NULL) then
             activesendcounts = 0
             do i=0,nactive-1
                activesendcounts(activeranks(i)) = sendcounts(pes(i))
                if (pes(i) == r2g(n)) ntransl = activeranks(i)
             end do
             displs(0) = 0
             do i=1,nactive
                displs(i) = displs(i-1) + activesendcounts(i-1)
             enddo

             if(n==mypeRd) then
                do i=0,nactive-1
                   if(activesendcounts(i)>0) then
                      i1 = displs(i  ) + 1
                      in = displs(i+1)
                      call MAPL_Sort(idx(i1:in),var(i1:in))
                   endif
                end do
             endif

             recvcount = sendcounts(mype)

             if (recvcount == 0) then
                call MPI_SCATTERV( var, activesendcounts, displs, MPI_REAL, &
                                   dummy,   recvcount,  MPI_REAL, &
                                   ntransl, thiscomm,    status )
             else
                call MPI_SCATTERV( var, activesendcounts, displs, MPI_REAL, &
                                   a(offset),   recvcount,  MPI_REAL, &
                                   ntransl, thiscomm,    status )
             endif
             VERIFY_(STATUS)
             call MPI_Comm_Free(thiscomm, status)
             VERIFY_(STATUS)
             offset = offset + recvcount
          end if
          deallocate (displs)
          deallocate(pes)
          deallocate (activesendcounts, activeranks)

       enddo

       call MPI_GROUP_FREE (GROUP, STATUS)
       VERIFY_(STATUS)
       deallocate(var,msk)
       deallocate (r2g)
       deallocate(sendcounts)
       if(arrdes%readers_comm /= MPI_COMM_NULL) then
          deallocate(idx)
       end if

    elseif(unit < 0) then

       ASSERT_(-UNIT<=LAST_UNIT)
       munit => MEM_units(-unit)
       munit%prevrec = munit%prevrec + 1
       ASSERT_(associated(munit%Records(munit%prevrec)%R4_1))
       ASSERT_(size(A)==size(munit%Records(munit%prevrec)%R4_1))
       A = munit%Records(munit%prevrec)%R4_1

    else

       if (MAPL_am_i_root(layout)) then
          STATUS = NF_GET_VARA_REAL(UNIT, varid, 1, size(a), A)
          if(status /= nf_noerr) then
             print*,trim(IAm),'Error reading variable ',status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif
       endif
       call MAPL_CommsBcast(layout, A, size(A), MAPL_Root, status)
       VERIFY_(STATUS)

!       call MAPL_GridGet(grid, globalCellCountPerDim=DIMS, RC=STATUS)
!       VERIFY_(STATUS)

!       IM_WORLD = DIMS(1)

!       allocate(VAR(IM_WORLD), stat=status)
!       VERIFY_(STATUS)

!       call ESMF_GridGet(grid, distGrid=distGrid, rc=STATUS)
!       VERIFY_(STATUS)
!       call ESMF_DistGridGet(distGrid, delayout=layout, rc=STATUS)
!       VERIFY_(STATUS)

!       if (MAPL_am_i_root(layout)) then
!          read (UNIT, IOSTAT=status) VAR
!          VERIFY_(STATUS)
!       end if

!       call ArrayScatter(A, VAR, grid, mask=mask, rc=status)
!       VERIFY_(STATUS)
    
!       deallocate(VAR)

    end if
    
    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarReadNCpar_R4_1d

!---------------------------

  subroutine MAPL_VarWriteNCpar_R8_2d(layout, fid, varid, A, ARRDES, RC)

    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:,:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R8),  allocatable :: VAR(:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    real                   ,  allocatable :: VARin(:,:)
    real                   ,  allocatable :: VARout(:,:)
    integer                               :: IM0
    integer                               :: JM0
    integer                               :: status
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    integer                               :: gridRank
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWriteNCpar_R8_2d'
    character(len=ESMF_MAXSTR)            :: GridTypeAttribute

    real(kind=ESMF_KIND_R8),  allocatable :: recvbuf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x,lev
    integer                               :: ndims, start(4), cnt(4), dimids(4)
    character(len=ESMF_MAXSTR)            :: dimname
    integer(kind=MPI_OFFSET_KIND)         :: offset
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: recvcounts(:), displs(:)

    real(kind=ESMF_KIND_R8) :: itime_beg, itime_end, bwidth

    integer                               :: numread, mpistatus(MPI_STATUS_SIZE)

    IM_WORLD = arrdes%im_world
    JM_WORLD = arrdes%jm_world
    ndes_x = size(arrdes%in)

    call mpi_comm_rank(arrdes%ycomm,myrow,status)
    VERIFY_(STATUS)
    call mpi_comm_rank(arrdes%iogathercomm,myiorank,status)
    VERIFY_(STATUS)
    call mpi_comm_size(arrdes%iogathercomm,num_io_rows,status)
    VERIFY_(STATUS)
    num_io_rows=num_io_rows/ndes_x

    allocate (recvcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
    VERIFY_(STATUS)

    if(myiorank==0) then
       do j=1,num_io_rows
          jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
          recvcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize
       enddo

       displs(1) = 0
       do i=2,ndes_x*num_io_rows
          displs(i) = displs(i-1) + recvcounts(i-1)
       enddo

       jsize = 0
       do j=1,num_io_rows
          jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
       enddo
       allocate(VAR(IM_WORLD,jsize), stat=status)
       VERIFY_(STATUS)
       allocate(recvbuf(IM_WORLD*jsize), stat=status)
       VERIFY_(STATUS)
!       VAR=Z'7FFC000000000000'
!       recvbuf=Z'7FFC000000000000'
    end if

    if(myiorank/=0) then
       allocate(recvbuf(0), stat=status)
       VERIFY_(STATUS)
    endif

    call mpi_gatherv( a, size(a), MPI_DOUBLE_PRECISION, recvbuf, recvcounts, displs, &
                      MPI_DOUBLE_PRECISION, 0, arrdes%iogathercomm, status )
    VERIFY_(STATUS)

    if(myiorank==0) then

       jprev = 0
       k=1
       do l=1,num_io_rows
         jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
         do n=1,ndes_x
           do j=1,jsize
             do i=arrdes%i1(n),arrdes%in(n)
               VAR(i,jprev+j) = recvbuf(k)
               k=k+1
             end do
           end do
         end do
         jprev = jprev + jsize
       end do
       jsize=jprev

! lon, lat, lev, time
       start(1) = 1
       start(2) = arrdes%j1(myrow+1)
       start(3) = 1
       start(4) = 1
       cnt(1) = IM_WORLD
       cnt(2) = jsize
       cnt(3) = 1
       cnt(4) = 1
!       print*,'start values are ',start
!       print*,'count values are ',cnt

       STATUS = NF_PUT_VARA_DOUBLE(fid, varid, start, cnt, VAR)
       if(status /= nf_noerr) then
          print*,'Error writing variable ',status
          print*, NF_STRERROR(status)
          VERIFY_(STATUS)
       endif
       deallocate(VAR, stat=status)
       VERIFY_(STATUS)

    endif ! myiorank

    deallocate(recvbuf, stat=status)
    VERIFY_(STATUS)
    deallocate (recvcounts, displs, stat=status)
    VERIFY_(STATUS)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWriteNCpar_R8_2d

!---------------------------

  subroutine MAPL_VarReadNCpar_R8_2d(layout, fid, varid, A, ARRDES, RC)
  
    type (ESMF_DELayout)        , intent(IN   ) :: layout
    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:,:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    real(kind=ESMF_KIND_R8),  allocatable :: VAR(:,:)
    integer                               :: IM_WORLD
    integer                               :: JM_WORLD
    integer                               :: status
    integer                               :: gridRank
    integer                               :: DIMS(ESMF_MAXGRIDDIM)
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarReadNCpar_R8_2d'

    real(kind=ESMF_KIND_R8),  allocatable :: buf(:)
    integer                               :: I,J,N,K,L,myrow,myiorank,ndes_x,lev
    integer                               :: ndims, start(4), cnt(4), dimids(4)
    integer(kind=MPI_OFFSET_KIND)         :: offset
    integer                               :: jsize, jprev, num_io_rows
    integer, allocatable                  :: sendcounts(:), displs(:)

    real(kind=ESMF_KIND_R8) :: itime_beg, itime_end, bwidth

    integer :: numread, mpistatus(MPI_STATUS_SIZE)


    ndes_x = size(arrdes%in)
    IM_WORLD = arrdes%im_world
    JM_WORLD = arrdes%jm_world

    call mpi_comm_rank(arrdes%ycomm,myrow,status)
    VERIFY_(STATUS)
    call mpi_comm_rank(arrdes%ioscattercomm,myiorank,status)
    VERIFY_(STATUS)
    call mpi_comm_size(arrdes%ioscattercomm,num_io_rows,status)
    VERIFY_(STATUS)
    num_io_rows=num_io_rows/ndes_x

    allocate (sendcounts(ndes_x*num_io_rows), displs(ndes_x*num_io_rows), stat=status)
    VERIFY_(STATUS)

  if(myiorank==0) then
     do j=1,num_io_rows
        jsize = arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1
        sendcounts((j-1)*ndes_x+1:(j-1)*ndes_x+ndes_x) = ( arrdes%IN -  arrdes%I1 + 1) * jsize
     enddo

     displs(1) = 0
     do i=2,ndes_x*num_io_rows
        displs(i) = displs(i-1) + sendcounts(i-1)
     enddo

     jsize = 0
     do j=1,num_io_rows
        jsize=jsize + (arrdes%jn(myrow+j) - arrdes%j1(myrow+j) + 1)
     enddo
     allocate(VAR(IM_WORLD,jsize), stat=status)
     VERIFY_(STATUS)
     allocate(buf(IM_WORLD*jsize), stat=status)
     VERIFY_(STATUS)
!       VAR=Z'7FFC000000000000'
!       buf=Z'7FFC000000000000'

     start(1) = 1
     start(2) = arrdes%j1(myrow+1)
     start(3) = 1
     start(4) = 1
     cnt(1) = IM_WORLD
     cnt(2) = jsize
     cnt(3) = 1
     cnt(4) = 1
!       print*,'start values are ',start
!       print*,'count values are ',cnt
    
     STATUS = NF_GET_VARA_DOUBLE(fid, varid, start, cnt, VAR)
     if(status /= nf_noerr) then
             print*,'Error reading variable ',status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
     endif

     jprev = 0
     k=1
     do l=1,num_io_rows
        jsize = arrdes%jn(myrow+l) - arrdes%j1(myrow+l) + 1
        do n=1,ndes_x
          do j=1,jsize
            do i=arrdes%i1(n),arrdes%in(n)
              buf(k) = VAR(i,jprev+j)
              k=k+1
            end do
          end do
        end do
        jprev = jprev + jsize
     end do

     deallocate(VAR, stat=status)
     VERIFY_(STATUS)
  end if ! myiorank

  if(myiorank/=0) then
     allocate(buf(0), stat=status)
     VERIFY_(STATUS)
  endif

  call mpi_scatterv( buf, sendcounts, displs, MPI_DOUBLE_PRECISION, &
            a,  size(a),  MPI_DOUBLE_PRECISION, &
            0, arrdes%ioscattercomm, status )
  VERIFY_(STATUS)

  deallocate(buf, stat=status)
  VERIFY_(STATUS)
  deallocate (sendcounts, displs, stat=status)
  VERIFY_(STATUS)

  RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarReadNCpar_R8_2d

!---------------------------

  subroutine MAPL_VarWriteNCpar_R8_1d(fid, varid, A, ARRDES, RC)

    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R8)     , intent(IN   ) :: A(:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    integer                               :: status
    integer                               :: io_rank
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarWriteNCpar_R8_1d'

! Comments
! This routine is used to write the AK and BK variables to fvcore_internal_checkpoint

    if (arrdes%writers_comm/=MPI_COMM_NULL) then
       call MPI_COMM_RANK(arrdes%writers_comm, io_rank, STATUS)
       VERIFY_(STATUS)
       if (io_rank == 0) then
          STATUS = NF_PUT_VARA_DOUBLE(fid, varid, 1, size(a), A)
          if(status /= nf_noerr) then
             print*,trim(IAm),'Error writing variable ',status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif
       endif
    endif

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarWriteNCpar_R8_1d

!---------------------------

  subroutine MAPL_VarReadNCpar_R8_1d(layout, fid, varid, A, ARRDES, RC)

    type (ESMF_DELayout)        , intent(IN   ) :: layout  
    integer                     , intent(IN   ) :: fid
    integer                     , intent(IN   ) :: varid
    real(kind=ESMF_KIND_R8)     , intent(INOUT) :: A(:)
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    integer,           optional , intent(  OUT) :: RC

! Local variables
    integer                               :: status
    integer                               :: reader, io_rank
    character(len=ESMF_MAXSTR)            :: IAm='MAPL_VarReadNCpar_R8_1d'

! Comments
! This routine is used to read the AK and BK variables from fvcore_internal_restart

    if (MAPL_am_i_root(layout)) then
       STATUS = NF_GET_VARA_DOUBLE(fid, varid, 1, size(a), A)
       if(status /= nf_noerr) then
          print*,trim(IAm),'Error reading variable ',status
          print*, NF_STRERROR(status)
          VERIFY_(STATUS)
       endif
    endif
    call MAPL_CommsBcast(layout, A, size(A), MAPL_Root, status)

    RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_VarReadNCpar_R8_1d

  subroutine getfile_ncpar_read(filename,arrdes,unit,info,rc)

    character(len=*), intent(IN   ) :: filename
    type(ArrDescr),             intent(IN   ) :: arrdes
    integer,                    intent(INOUT) :: unit
    integer,                    intent(INOUT) :: info
    integer, optional,          intent(OUT  ) :: rc

    integer                       :: STATUS
    logical                       :: AmReader

    character(len=ESMF_MAXSTR)            :: IAm='getfile_ncpar_read'

    AmReader = arrdes%readers_comm/=MPI_COMM_NULL
    if (AmReader) then
      call MPI_Info_create(info,STATUS)
      VERIFY_(STATUS)
      call MPI_Info_set(info,"romio_cb_read", trim(arrdes%romio_cb_read),STATUS)
      VERIFY_(STATUS)
      call MPI_Info_set(info,"cb_buffer_size", trim(arrdes%cb_buffer_size),STATUS)
      VERIFY_(STATUS)
#ifdef NETCDF_NEED_NF_MPIIO
      STATUS = NF_OPEN_PAR(TRIM(filename),IOR(NF_NOWRITE,NF_MPIIO),arrdes%readers_comm,info,UNIT)
#else
      STATUS = NF_OPEN_PAR(TRIM(filename),NF_NOWRITE,arrdes%readers_comm,info,UNIT)
#endif
      if (STATUS /= NF_NOERR) then
         print*,"Error opening file ", trim(filename), status
         print*, NF_STRERROR(STATUS)
         VERIFY_(STATUS)
      endif
    else
      UNIT = 0
    endif

    RETURN_(ESMF_SUCCESS)

  end subroutine getfile_ncpar_read

  subroutine getfile_ncpar_write(filename,arrdes,unit,info,rc)

    character(len=*), intent(IN )    :: filename
    type(ArrDescr),             intent(IN )    :: arrdes
    integer,                    intent(INOUT)  :: unit
    integer,                    intent(INOUT)  :: info
    integer, optional,          intent(OUT)    :: rc

    integer                       :: STATUS
    logical                       :: amWriter
    integer                       :: CMODE

    character(len=ESMF_MAXSTR)            :: IAm='getfile_ncpar_write'

    AmWriter = arrdes%writers_comm/=MPI_COMM_NULL
    if (AmWriter) then
      call MPI_Info_create(info,STATUS)
      VERIFY_(STATUS)
      call MPI_Info_set(info,"romio_cb_write", trim(arrdes%romio_cb_write),STATUS)
      VERIFY_(STATUS)
      call MPI_Info_set(info,"cb_buffer_size", trim(arrdes%cb_buffer_size),STATUS)
      VERIFY_(STATUS)
      CMODE = IOR(NF_CLOBBER,NF_NETCDF4)
#ifdef NETCDF_NEED_NF_MPIIO
      STATUS = NF_CREATE_PAR(TRIM(filename),IOR(CMODE,NF_MPIIO),arrdes%writers_comm,info,UNIT)
#else
      STATUS = NF_CREATE_PAR(TRIM(filename),CMODE,arrdes%writers_comm,info,UNIT)
#endif
      if (STATUS /= NF_NOERR) then
         print*,"Error opening file ", trim(filename), status
         print*, NF_STRERROR(STATUS)
         VERIFY_(STATUS)
      endif
    else
      UNIT = 0
    endif

    RETURN_(ESMF_SUCCESS)

  end subroutine getfile_ncpar_write

  subroutine closefile_ncpar_read(filename,arrdes,unit,info,rc)

    character(len=*), intent(IN)     :: filename
    type(ArrDescr),             intent(IN )    :: arrdes
    integer,                    intent(INOUT)  :: unit
    integer,                    intent(INOUT)  :: info
    integer, optional,          intent(OUT)    :: rc

    integer                       :: STATUS
    logical                       :: AmReader
    character(len=ESMF_MAXSTR)    :: IAm='closefile_ncpar_read'
 
    AmReader = arrdes%readers_comm/=MPI_COMM_NULL
    if (AmReader) then
       STATUS = NF_CLOSE(UNIT)
       if(status /= nf_noerr) then
          print*,'Error closing file ',trim(FILENAME), status
          print*, NF_STRERROR(status)
          VERIFY_(STATUS)
       endif
       call MPI_Info_free(info, status)
       VERIFY_(STATUS)
    endif

    RETURN_(ESMF_SUCCESS)

  end subroutine closefile_ncpar_read

  subroutine closefile_ncpar_write(filename,arrdes,unit,info,rc)

    character(len=*), intent(IN ) :: filename
    type(ArrDescr),             intent(IN )    :: arrdes
    integer,                    intent(INOUT)  :: unit
    integer,                    intent(INOUT)  :: info
    integer, optional,          intent(OUT)    :: rc

    integer                       :: STATUS
    logical                       :: AmWriter
    character(len=ESMF_MAXSTR)    :: IAm='closefile_ncpar_write'

    AmWriter = arrdes%writers_comm/=MPI_COMM_NULL
    if (AmWriter) then
       STATUS = NF_CLOSE(UNIT)
       if(status /= nf_noerr) then
          print*,'Error closing file ',trim(FILENAME), status
          print*, NF_STRERROR(status)
          VERIFY_(STATUS)
       endif
       call MPI_Info_free(info, status)
       VERIFY_(STATUS)
    endif 

    RETURN_(ESMF_SUCCESS)

  end subroutine closefile_ncpar_write

  subroutine MAPL_BundleReadNCPar(Bundle, arrdes, filename, rc)
    type(ESMF_FieldBundle), intent(inout)   :: Bundle
    type(ArrDescr), intent(inout)           :: arrdes
    character(len=*),   intent(in   )       :: filename
    integer, optional, intent(out)          :: rc


    integer                            :: nVars
    integer                            :: l
    type(ESMF_Field)                   :: field
    character(len=ESMF_MAXSTR)         :: FieldName
    integer                            :: varid
    integer                            :: unit, info

    integer                            :: STATUS
    character(len=ESMF_MAXSTR)         :: IAm='MAPL_BundleReadNCPar'

    integer                            :: dims(3)
    integer                            :: counts(5)
    integer                            :: numvars, ind
    type(ESMF_Grid)                    :: grid
    real, pointer                      :: ptr1(:), ptr2(:,:), ptr3(:,:,:)
    character(len=ESMF_MAXSTR)         :: vname
    integer                            :: vdim,vlocation
    type(MAPL_NCParVarSpec)            :: fileVarSpec

    integer                            :: MAPL_DIMS
    integer, pointer                   :: MASK(:) => null()

    call ESMF_FieldBundleGet(Bundle,FieldCount=nVars,rc=STATUS)
    VERIFY_(STATUS)

    if (nVars == 0) then

      call ESMF_FieldBundleGet(Bundle,Grid=grid, RC=STATUS)
      VERIFY_(STATUS)
      call MAPL_NCParVarInfoGet(filename,fileVarSpec,Grid,arrDes,rc=status)
      VERIFY_(STATUS)
      call MAPL_GridGet(grid, globalCellCountPerDim=COUNTS, &
         localCellCountPerDim=DIMS, RC=STATUS)
      VERIFY_(STATUS)
      do l=1,fileVarSpec%nvars
        vname = fileVarSpec%vname(l)
        vdim = fileVarSpec%vdim(l)
        vlocation = fileVarSpec%vlocation(l)
        if (arrDes%tile) then
          if (vdim == MAPL_DimsTileOnly) then
            allocate (ptr1(dims(1)),stat=status)
            VERIFY_(STATUS)
            ptr1=0.0
            field = ESMF_FieldCreate(grid=grid, datacopyflag=ESMF_DATACOPY_VALUE, &
               farrayPtr=ptr1,name=trim(vname),rc=status)
            VERIFY_(STATUS)
            call ESMF_AttributeSet(field,name='VLOCATION',value=vlocation,rc=status)
            VERIFY_(STATUS)
            call ESMF_AttributeSet(field,name='DIMS',value=vdim,rc=status)
            VERIFY_(STATUS)
          endif
          if (vdim == MAPL_DimsTileTile) then 
            allocate (ptr2(dims(1),dims(2)),stat=status)
            VERIFY_(STATUS)
            ptr2=0.0
            field = ESMF_FieldCreate(grid=grid, datacopyflag=ESMF_DATACOPY_VALUE, &
               farrayPtr=ptr2,name=trim(vname),rc=status)
            VERIFY_(STATUS) 
            call ESMF_AttributeSet(field,name='VLOCATION',value=vlocation,rc=status)
            VERIFY_(STATUS)
            call ESMF_AttributeSet(field,name='DIMS',value=vdim,rc=status)
            VERIFY_(STATUS)
          endif
        else
          if (vdim == MAPL_DimsHorzOnly) then
            allocate (ptr2(dims(1),dims(2)),stat=status)
            VERIFY_(STATUS)
            ptr2=0.0
            field = ESMF_FieldCreate(grid=grid, datacopyflag=ESMF_DATACOPY_VALUE, &
               farrayPtr=ptr2,name=trim(vname),rc=status)
            VERIFY_(STATUS)
            call ESMF_AttributeSet(field,name='VLOCATION',value=vlocation,rc=status)
            VERIFY_(STATUS)
            call ESMF_AttributeSet(field,name='DIMS',value=vdim,rc=status)
            VERIFY_(STATUS)
          endif
          if (vdim == MAPL_DimsHorzVert) then 
            if (vlocation == MAPL_VLocationCenter) then
             allocate (ptr3(dims(1),dims(2),dims(3)),stat=status)
             VERIFY_(STATUS)
            elseif (vlocation == MAPL_VLocationEdge) then
             allocate (ptr3(dims(1),dims(2),0:dims(3)),stat=status)
             VERIFY_(STATUS)
            endif
            ptr3=0.0
            field = ESMF_FieldCreate(grid=grid, datacopyflag=ESMF_DATACOPY_VALUE, &
               farrayPtr=ptr3,name=trim(vname),rc=status)
            VERIFY_(STATUS) 
            call ESMF_AttributeSet(field,name='VLOCATION',value=vlocation,rc=status)
            VERIFY_(STATUS)
            call ESMF_AttributeSet(field,name='DIMS',value=vdim,rc=status)
            VERIFY_(STATUS)
          endif
        endif
        call ESMF_AttributeSet(field,name='LONG_NAME',value=fileVarSpec%vtitle(l),rc=status)
        VERIFY_(STATUS)
        call ESMF_AttributeSet(field,name='UNITS',value=fileVarSpec%vunit(l),rc=status)
        VERIFY_(STATUS)
        call MAPL_FieldBundleAdd(bundle,field,rc=status)
        VERIFY_(STATUS)
      enddo

      nVars = fileVarSpec%nvars
      deallocate(fileVarSpec%vname)
      deallocate(fileVarSpec%vdim)
      deallocate(fileVarSpec%vlocation)
      deallocate(fileVarSpec%vtitle)
      deallocate(fileVarSpec%vunit)

    endif

    ! open the file for parallel reading
    call getfile_ncpar_read(filename,arrdes,unit,info,RC=STATUS)
    VERIFY_(STATUS)

    do l=1,nVars
      call ESMF_FieldBundleGet(bundle, fieldIndex=l, field=field, rc=status)
      VERIFY_(STATUS)
      call ESMF_FieldGet(field,name=FieldName,rc=status)
      VERIFY_(STATUS)
! Check for old style aerosol names
      ind= index(FieldName, '::')
      if (ind> 0) then
        FieldName = trim(FieldName(ind+2:))
      end if

      if (arrdes%readers_comm/=MPI_COMM_NULL) then
         STATUS = NF_INQ_VARID(UNIT, trim(FieldName), varid)
         if (status /= nf_noerr) then
            print*,trim(IAm),': Error getting varid for variable ',trim(FieldName), status,unit
            print*, NF_STRERROR(status)
            VERIFY_(STATUS)
         endif
      endif
     
      if(.not.associated(MASK)) then
         call ESMF_AttributeGet(field, name='DIMS', value=MAPL_DIMS, rc=status)
         VERIFY_(STATUS)
         if (MAPL_DIMS == MAPL_DimsTileOnly .or. MAPL_DIMS == MAPL_DimsTileTile) then
            call ESMF_FieldGet   (field, grid=grid, rc=status)
            VERIFY_(STATUS)
            call MAPL_TileMaskGet(grid,  mask, rc=status)
            VERIFY_(STATUS)
         else
            allocate(Mask(1))
         endif
      endif

      call MAPL_FieldRead(unit, field, arrdes=arrdes, varid=varid, HomePE=mask, rc=status)
      VERIFY_(STATUS)
        
    enddo

    if(associated(MASK)) deallocate(MASK)
 
    call closefile_ncpar_read(filename,arrdes,unit,info,RC=STATUS)
    VERIFY_(STATUS)
  
    RETURN_(ESMF_SUCCESS)

  end subroutine MAPL_BundleReadNCPar

  subroutine MAPL_StateVarReadNCPar(filename, STATE, arrdes, bootstrapable, NAME, RC)
    character(len=*)            , intent(IN   ) :: filename
    type (ESMF_State)           , intent(INOUT) :: STATE
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    logical                     , intent(IN   ) :: bootstrapable
    character(len=*),   optional, intent(IN   ) :: NAME
    integer,            optional, intent(  OUT) :: RC

! Local vars
    type (ESMF_FieldBundle)              :: bundle
    type (ESMF_Field)                    :: field
    type (ESMF_Grid)                     :: grid
    integer                              :: status
    integer                              :: I, K, N
    character(len=ESMF_MAXSTR)           :: IAm='MAPL_StateVarReadNCPar'
    integer                              :: J, ITEMCOUNT
    type (ESMF_StateItem_Flag), pointer  :: ITEMTYPES(:)
    character(len=ESMF_MAXSTR ), pointer :: ITEMNAMES(:)
    logical, pointer                     :: DOIT(:)
    integer                              :: DIMS
    
    type (ESMF_Array)                  :: array
    integer                            :: rank, varid, ind
    logical                            :: skipReading
    integer                            :: RST
    character(len=ESMF_MAXSTR)         :: FieldName, BundleName

    type (ESMF_Field)                  :: new_field
    type (ESMF_FieldBundle)            :: bundle_read
    integer                            :: nBundle
    integer                            :: attr
    logical                            :: tile
 
    integer                            :: nVarFile, ncid
    character(len=ESMF_MAXSTR), pointer :: VarNamesFile(:) => null()
    type(ESMF_VM)                      :: VM
    logical                            :: foundInFile
    
    ! get a list of variables in the file so we can skip if the 
    ! variable in the state is not in the file and it is bootstrapable
    ! will just let root do this since everybody will need it
    ! and avoid complications with doing later on when only readers_comm has opened file

    call ESMF_VMGetCurrent(VM,rc=status)
    VERIFY_(STATUS)

    if (MAPL_AM_I_Root()) then
       status = nf_open(trim(filename),NF_NOWRITE, ncid)
       VERIFY_(STATUS)
       status = nf_inq_nvars(ncid, nVarFile)
       VERIFY_(STATUS)
    end if

    call MAPL_CommsBcast(vm, nVarFile, n=1, ROOT=MAPL_Root, rc=status)
    VERIFY_(STATUS)
    allocate(VarNamesFile(nVarFile),stat=status)
    VERIFY_(STATUS)

    if (MAPL_AM_I_Root()) then
       do i=1,nVarFile
          status = nf_inq_varname(ncid, i, VarNamesFile(i))
          VERIFY_(STATUS)
       end do
       status = nf_close(ncid)
       VERIFY_(STATUS)
    end if

    do i=1,nVarFile
       call MAPL_CommsBcast(vm, VarNamesFile(i), N=ESMF_MAXSTR, ROOT=MAPL_Root, rc=status)
       VERIFY_(STATUS)
    end do
    
    call ESMF_StateGet(STATE,ITEMCOUNT=ITEMCOUNT,RC=STATUS)
    VERIFY_(STATUS)

    ASSERT_(ITEMCOUNT>0)

    allocate(ITEMNAMES(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)
    allocate(ITEMTYPES(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)
    allocate(     DOIT(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)

    call ESMF_StateGet(STATE,ITEMNAMELIST=ITEMNAMES,&
                       ITEMTYPELIST=ITEMTYPES,RC=STATUS)
    VERIFY_(STATUS)

    if(present(NAME)) then
       DOIT = ITEMNAMES==NAME
       ASSERT_(count(DOIT)/=0)
    else
       DOIT = .true.
    endif

    bundle_read = ESMF_FieldBundleCreate(rc=STATUS)
    VERIFY_(STATUS)
    call ESMF_FieldBundleSet(bundle_read,grid=arrdes%grid,rc=STATUS)
    VERIFY_(STATUS)

    do I = 1, ITEMCOUNT

       if (DOIT(I)) then


          if (ITEMTYPES(I) == ESMF_StateItem_FieldBundle) then
             call ESMF_StateGet(state, itemnames(i), bundle, rc=status)
             VERIFY_(STATUS)

             skipReading = .false.
             call ESMF_AttributeGet(bundle, name='RESTART', value=RST, rc=status)
             if (STATUS == ESMF_SUCCESS) then
                skipReading = (RST == 0)
             end if
             if (skipReading) cycle

             call ESMF_FieldBundleGet(bundle, fieldCount=nBundle, rc=STATUS)
             VERIFY_(STATUS)
             call ESMF_FieldBundleGet(bundle, name=BundleName, rc=status)
             VERIFY_(STATUS)
             DO J = 1,nBundle
               call ESMF_FieldBundleGet(bundle, fieldIndex=J, field=field, rc=status)
               VERIFY_(STATUS)
               call ESMF_FieldGet(field,name=FieldName,rc=status)
               VERIFY_(STATUS)

               ind= index(FieldName, '::')
               if (ind> 0) then
                 FieldName = trim(FieldName(ind+2:))
               end if

               ! Tack on BundleName to distiguish duplicate FieldNames in different Bundles (PCHEM for instance)
               FieldName = trim(BundleName) //'_'// trim(FieldName)

               ! now check if the fieldname is in the list of available fields
               ! -------------------------------------------------------------
               foundInFile = .false.
               do k=1,nVarFile
                  if (trim(FieldName) == trim(VarNamesFile(k))) then
                     FoundInFile = .true. 
                     exit
                  end if          
               end do
               
               if (foundInFile) then
                  new_field = MAPL_FieldCreate(Field,FieldName,rc=status)
                  VERIFY_(STATUS)
                  call MAPL_FieldBundleAdd(bundle_read,new_field,rc=status)
                  VERIFY_(STATUS)
               else
                  if (bootStrapable) then
                     call WRITE_PARALLEL("  Bootstrapping Variable: "//trim(FieldName)//" in "//trim(filename))
                  else
                     call WRITE_PARALLEL("  Could not find field "//trim(FieldName)//" in "//trim(filename))
                     ASSERT_(.false.)
                  end if
               end if

             ENDDO
          else if (ITEMTYPES(I) == ESMF_StateItem_Field) then
             call ESMF_StateGet(state, itemnames(i), field, rc=status)
             VERIFY_(STATUS)
             FieldName = trim(itemnames(i))

               ind= index(FieldName, '::')
               if (ind> 0) then
                 FieldName = trim(FieldName(ind+2:))
               end if

             skipReading = .false.
             call ESMF_AttributeGet(field, name='RESTART', value=RST, rc=status)
             if (STATUS == ESMF_SUCCESS) then
                skipReading = (RST == 0)
             end if
             if (skipReading) cycle
             call ESMF_AttributeGet(field, name='doNotAllocate', value=RST, rc=status)
             if (STATUS == ESMF_SUCCESS) then
                skipReading = (RST /= 0)
             end if
             if (skipReading) cycle
            
             ! now check if the field is in the list of available fields
             ! ---------------------------------------------------------
             foundInFile = .false.
             do k=1,nVarFile
                if (trim(Fieldname) == trim(VarNamesFile(k))) then
                   FoundInFile = .true.
                   exit
                end if
             end do

             if (foundInFile) then
                call MAPL_FieldBundleAdd(bundle_read,field,rc=status)
                VERIFY_(STATUS)
             else
                if (bootStrapable) then
                    call WRITE_PARALLEL("  Bootstrapping Variable: "//trim(FieldName)//" in "//trim(filename))
                else
                    call WRITE_PARALLEL("  Could not find field "//trim(Fieldname)//" in "//trim(filename))
                    ASSERT_(.false.)
                end if
             end if

          end if

       end if

    end do

    tile = arrdes%tile

    call MAPL_VarReadNCPar(Bundle_Read, arrdes, filename, rc=status)
    VERIFY_(STATUS)

    deallocate(ITEMNAMES)
    deallocate(ITEMTYPES)
    deallocate(     DOIT)
    deallocate(VarNamesFile)

    RETURN_(ESMF_SUCCESS)

  end subroutine MAPL_StateVarReadNCPar

  subroutine MAPL_ArrayReadNCpar_1d(varn,filename,farrayPtr,arrDes,rc)
  character(len=*),      intent(IN   )  :: varn
  character(len=*),      intent(IN   )  :: filename
  real, pointer                         :: farrayPtr(:)
  type(arrDescr),        intent(INOUT)  :: arrDes
  integer, optional,     intent(OUT  )  :: rc

  character(len=*), parameter           :: Iam="MAPL_ArrayReadNCpar_1d"
  integer                               :: status
  type(ESMF_Field)                      :: field
  type(ESMF_FieldBundle)                :: bundle

  FIELD = ESMF_FieldCreate(grid=arrDes%grid, datacopyflag=ESMF_DATACOPY_VALUE, &
         farrayPtr=farrayPtr, name=trim(varn), RC=STATUS)
  VERIFY_(STATUS)
  if (arrDes%tile) then
     call ESMF_AttributeSet(field,name='DIMS',value=MAPL_DimsTileOnly,rc=status)
     VERIFY_(STATUS)
  endif
  BUNDLE =  ESMF_FieldBundleCreate ( name=Iam, rc=STATUS )
  VERIFY_(STATUS)
  call ESMF_FieldBundleSet ( bundle, grid=arrDes%grid, rc=STATUS )
  VERIFY_(STATUS)
  call MAPL_FieldBundleAdd(BUNDLE, FIELD, rc=STATUS)
  VERIFY_(STATUS)

  call MAPL_VarReadNCPar(Bundle, arrdes, filename, rc=status)
  VERIFY_(STATUS)

  call ESMF_FieldBundleDestroy(bundle,rc=status)
  VERIFY_(STATUS)
  call ESMF_FieldDestroy(field,rc=status)
  VERIFY_(STATUS)

  RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_ArrayReadNCpar_1d

  subroutine MAPL_ArrayReadNCpar_2d(varn,filename,farrayPtr,arrDes,rc)
  character(len=*),      intent(IN   )  :: varn
  character(len=*),      intent(IN   )  :: filename
  real, pointer                         :: farrayPtr(:,:)
  type(arrDescr),        intent(INOUT)  :: arrDes
  integer, optional,     intent(OUT  )  :: rc

  character(len=*), parameter           :: Iam="MAPL_ArrayReadNCpar_2d"
  integer                               :: status
  type(ESMF_Field)                      :: field
  type(ESMF_FieldBundle)                :: bundle

  FIELD = ESMF_FieldCreate(grid=arrDes%grid, datacopyflag=ESMF_DATACOPY_VALUE, &
         farrayPtr=farrayPtr, name=trim(varn), RC=STATUS)
  VERIFY_(STATUS)
  if (arrDes%tile) then
     call ESMF_AttributeSet(field,name='DIMS',value=MAPL_DimsTileTile,rc=status)
     VERIFY_(STATUS)
  else
     call ESMF_AttributeSet(field,name='DIMS',value=MAPL_DimsHorzOnly,rc=status)
     VERIFY_(STATUS)
  endif
  BUNDLE =  ESMF_FieldBundleCreate ( name=Iam, rc=STATUS )
  VERIFY_(STATUS)
  call ESMF_FieldBundleSet ( bundle, grid=arrDes%grid, rc=STATUS )
  VERIFY_(STATUS)
  call MAPL_FieldBundleAdd(BUNDLE, FIELD, rc=STATUS)
  VERIFY_(STATUS)

  call MAPL_VarReadNCPar(Bundle, arrdes, filename, rc=status)
  VERIFY_(STATUS)

  call ESMF_FieldBundleDestroy(bundle,rc=status)
  VERIFY_(STATUS)
  call ESMF_FieldDestroy(field,rc=status)
  VERIFY_(STATUS)

  RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_ArrayReadNCpar_2d

  subroutine MAPL_ArrayReadNCpar_3d(varn,filename,farrayPtr,arrDes,rc)
  character(len=*),      intent(IN   )  :: varn
  character(len=*),      intent(IN   )  :: filename
  real, pointer                         :: farrayPtr(:,:,:)
  type(arrDescr),        intent(INOUT)  :: arrDes
  integer, optional,     intent(OUT  )  :: rc

  character(len=*), parameter           :: Iam="MAPL_ArrayReadNCpar_3d"
  integer                               :: status
  type(ESMF_Field)                      :: field
  type(ESMF_FieldBundle)                :: bundle

  FIELD = ESMF_FieldCreate(grid=arrDes%grid, datacopyflag=ESMF_DATACOPY_VALUE, &
         farrayPtr=farrayPtr, name=trim(varn), RC=STATUS)
  call ESMF_AttributeSet(field,name='DIMS',value=MAPL_DimsHorzVert,rc=status)
  VERIFY_(STATUS)
  VERIFY_(STATUS)
  BUNDLE =  ESMF_FieldBundleCreate ( name=Iam, rc=STATUS )
  VERIFY_(STATUS)
  call ESMF_FieldBundleSet ( bundle, grid=arrDes%grid, rc=STATUS )
  VERIFY_(STATUS)
  call MAPL_FieldBundleAdd(BUNDLE, FIELD, rc=STATUS)
  VERIFY_(STATUS)

  call MAPL_VarReadNCPar(Bundle, arrdes, filename, rc=status)
  VERIFY_(STATUS)

  call ESMF_FieldBundleDestroy(bundle,rc=status)
  VERIFY_(STATUS)
  call ESMF_FieldDestroy(field,rc=status)
  VERIFY_(STATUS)

  RETURN_(ESMF_SUCCESS)
  end subroutine MAPL_ArrayReadNCpar_3d

  subroutine MAPL_BundleWriteNCPar(Bundle, arrdes, CLOCK, filename, rc)
    type(ESMF_FieldBundle), intent(inout)   :: Bundle
    type(ArrDescr), intent(inout)           :: arrdes
    type(ESMF_Clock), intent(in)            :: CLOCK
    character(len=*), intent(in  )         :: filename
    integer, optional, intent(out)          :: rc


    integer                            :: nVars
    integer                            :: i,j,k,l
    type(ESMF_Field)                   :: field
    type(ESMF_Array)                   :: array
    type(ESMF_Grid)                    :: grid
    character(len=ESMF_MAXSTR)         :: FieldName
    integer                            :: varid
    integer                               :: YYYY, MM, DD, H, M, S
    type(ESMF_Time)                       :: currentTime
    character(len=ESMF_MAXSTR)            :: TimeString, TimeUnits

    type(ESMF_TypeKind_Flag)              :: tk
    integer                               :: ind
    integer                               :: londim, lonid, latdim, latid, levdim, levid, edgedim, edgeid
    integer                               :: tiledim, tileid, subtiledim, subtileid, tdim, tid
    logical                               :: Have_HorzOnly, Have_HorzVert, Have_VertOnly, Have_TileOnly
    logical                               :: Have_TileTile, Have_VLocationCenter, Have_VLocationEdge
    real(KIND=ESMF_KIND_R8),  allocatable :: lon(:), lat(:), lev(:), edges(:)
    integer, allocatable                  :: LOCATION(:), DIMS(:), UNGRID_DIMS(:,:)
    integer, allocatable                  :: UNIQUE_UNGRID_DIMS(:), ungriddim(:)
    integer                               :: myungriddim1, myungriddim2
    real(KIND=ESMF_KIND_R8)               :: dlon, dlat
    integer                               :: arrayRank, KM_WORLD, DataType
    integer                               :: ungrid_dim_max_size, n_unique_ungrid_dims
    character(len=ESMF_MAXSTR)            :: ungrid_dim_name
    real(KIND=ESMF_KIND_R4), pointer, dimension(:,:,:)  :: var_3d => null()
    real(KIND=ESMF_KIND_R8), pointer, dimension(:,:,:)  :: var8_3d => null()
    real(KIND=ESMF_KIND_R4), pointer, dimension(:,:)    :: var_2d => null()
    real(KIND=ESMF_KIND_R8), pointer, dimension(:,:)    :: var8_2d => null()
    character(len=ESMF_MAXSTR )           :: STD_NAME, LONG_NAME, UNITS

    integer                               :: unit, info

    integer                               :: MAPL_DIMS
    integer, pointer                      :: MASK(:) => null()

    integer                            :: STATUS
    character(len=ESMF_MAXSTR)         :: IAm='MAPL_BundleWriteNCPar'

    ! open file
    call getfile_ncpar_write(filename,arrdes,unit,info,RC=STATUS)
    VERIFY_(STATUS)

    call ESMF_FieldBundleGet(Bundle,FieldCount=nVars,rc=STATUS)
    VERIFY_(STATUS)

    ! verify that file is compatible with fields in bundle we are reading

    if (nVars == 0) then
       if (MAPL_AM_I_root()) WRITE(*,*)"The bundle you are trying to write is empty"
       ASSERT_(.FALSE.)
    endif
   
    if (arrdes%writers_comm/=MPI_COMM_NULL) then

       ! first we need to prep the netcdf file for writing
       allocate(LOCATION(nVars), stat=STATUS)
       VERIFY_(STATUS)
       allocate(DIMS(nVars), stat=STATUS)
       VERIFY_(STATUS)

       allocate(UNGRID_DIMS(nVars,2),stat=STATUS)
       VERIFY_(STATUS)
       UNGRID_DIMS = 0

       ! now determine the dimensionality and vertical structure of each field
       DO I = 1, nVars

          call ESMF_FieldBundleGet(Bundle,fieldIndex=I, field=field, rc=status)
          VERIFY_(STATUS)
          call ESMF_AttributeGet(field, NAME='DIMS', VALUE=DIMS(I), rc=status)
          VERIFY_(STATUS)
          call ESMF_AttributeGet(field, NAME='VLOCATION', VALUE=LOCATION(I), rc=status)
          VERIFY_(STATUS)

          ! now check if we have an ungridded dimension
          call ESMF_FieldGet(field,array=array,rc=status)
          VERIFY_(STATUS)
          call ESMF_ArrayGet(array, typekind=tk, rank=arrayRank,  RC=STATUS)
          VERIFY_(STATUS)
          if (arrayRank == 3 .and. DIMS(I) == MAPL_DimsHorzOnly) then
             if (tk == ESMF_TYPEKIND_R4) then
                call ESMF_ArrayGet(array, localDE=0, farrayptr=var_3d, rc=status)
                VERIFY_(STATUS)
                UNGRID_DIMS(I,1) = size(var_3d,3)
             elseif (tk == ESMF_TYPEKIND_R8) then
                call ESMF_ArrayGet(array, localDE=0, farrayptr=var8_3d, rc=status) 
                VERIFY_(STATUS)
                UNGRID_DIMS(I,1) = size(var8_3d,3)
             endif
          else if (arrayRank == 2 .and. DIMS(I) == MAPL_DimsTileOnly) then
             if (tk == ESMF_TYPEKIND_R4) then
                call ESMF_ArrayGet(array, localDE=0, farrayptr=var_2d, rc=status)
                VERIFY_(STATUS)
                UNGRID_DIMS(I,1) = size(var_2d,2)
             elseif (tk == ESMF_TYPEKIND_R8) then
                call ESMF_ArrayGet(array, localDE=0, farrayptr=var8_2d, rc=status) 
                VERIFY_(STATUS)
                UNGRID_DIMS(I,1) = size(var8_2d,2)
             endif
          else if (arrayRank == 3 .and. DIMS(I) == MAPL_DimsTileOnly) then
             if (tk == ESMF_TYPEKIND_R4) then
                call ESMF_ArrayGet(array, localDE=0, farrayptr=var_3d, rc=status)
                VERIFY_(STATUS)
                UNGRID_DIMS(I,1) = size(var_3d,2)
                UNGRID_DIMS(I,2) = size(var_3d,3)
             elseif (tk == ESMF_TYPEKIND_R8) then
                call ESMF_ArrayGet(array, localDE=0, farrayptr=var8_3d, rc=status) 
                VERIFY_(STATUS)
                UNGRID_DIMS(I,1) = size(var8_3d,2)
                UNGRID_DIMS(I,2) = size(var8_3d,3)
             endif
          endif

       ENDDO

       Have_HorzOnly = any(DIMS==MAPL_DimsHorzOnly)
       Have_HorzVert = any(DIMS==MAPL_DimsHorzVert)
       Have_VertOnly = any(DIMS==MAPL_DimsVertOnly)
       Have_TileOnly = any(DIMS==MAPL_DimsTileOnly)
       Have_TileTile = any(DIMS==MAPL_DimsTileTile)
       Have_VLocationCenter = any(LOCATION==MAPL_VLocationCenter)
       Have_VLocationEdge   = any(LOCATION==MAPL_VLocationEdge)
       
       ungrid_dim_max_size = maxval(UNGRID_DIMS)

       if (ungrid_dim_max_size /= 0) then

          n_unique_ungrid_dims = 0 
          do i = 1,ungrid_dim_max_size
             if (any(ungrid_dims == i)) n_unique_ungrid_dims = n_unique_ungrid_dims + 1
          end do
    
          allocate(unique_ungrid_dims(n_unique_ungrid_dims),stat=status)
          VERIFY_(STATUS)
          allocate(ungriddim(n_unique_ungrid_dims),stat=status)
          VERIFY_(STATUS)
    
          n_unique_ungrid_dims = 0 
          do i = 1,ungrid_dim_max_size
             if (any(ungrid_dims == i)) then
                n_unique_ungrid_dims = n_unique_ungrid_dims + 1
                unique_ungrid_dims(n_unique_ungrid_dims) = i
             end if
          end do
    
       endif

       deallocate(DIMS)
       deallocate(LOCATION)

       ! Create dimensions as needed
       if (Have_HorzVert .or. Have_HorzOnly) then

          ! Longitude variable
          status = NF_DEF_DIM(UNIT, 'lon'  ,   arrdes%IM_WORLD, londim)
          if (status /= nf_noerr) then
             print*,'Error defining dim lon',status,UNIT,londim,arrdes%IM_WORLD
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif
          status = nf_def_var(UNIT, "lon", NF_DOUBLE, 1, londim, lonid)
          if (status /= nf_noerr) then
              print*,'Error defining lon',status
              print*, NF_STRERROR(status)
              VERIFY_(STATUS)
          endif
          dlon = 360.d0/dble(arrdes%IM_WORLD)
          allocate(lon(arrdes%IM_WORLD))
          do i =1, arrdes%IM_WORLD
             lon(i) = -180.d0 + (i-1)*dlon
          end do

          status = nf_put_var(UNIT, lonid, lon)
          status = nf_put_att_text(UNIT, lonid, "units"    , 12, "degrees_east")
          status = nf_put_att_text(UNIT, lonid, "long_name",  9, "Longitude")
          deallocate(lon)

          ! Latitude variable
          status = NF_DEF_DIM(UNIT, 'lat'  ,   arrdes%JM_WORLD, latdim)
          status = nf_def_var(UNIT, "lat", NF_DOUBLE, 1, latdim, latid)
          if (status /= nf_noerr) then
             print*,'Error defining lat',status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif

          dlat = 180.d0/dble(arrdes%JM_WORLD-1)
          allocate(lat(arrdes%JM_WORLD))

          do j =1, arrdes%JM_WORLD
             lat(j) =  -90.d0 + (j-1)*dlat
          end do

          status = nf_put_var(UNIT, latid, lat)
          status = nf_put_att_text(UNIT, latid, "units"    , 13, "degrees_north")
          status = nf_put_att_text(UNIT, latid, "long_name",  8, "Latitude")
          deallocate(lat)
       endif

       if (Have_HorzVert .or. Have_VertOnly) then
          if (Have_VLocationCenter) then
             ! Level variable
             KM_World = arrdes%lm_World
             status = NF_DEF_DIM(UNIT, 'lev'  ,   KM_WORLD, levdim)
             status = nf_def_var(UNIT, "lev", NF_DOUBLE, 1, levdim, levid)
             if (status /= nf_noerr) then
                print*,'Error defining lev',status
                print*, NF_STRERROR(status)
                VERIFY_(STATUS)
             endif
             allocate(lev(KM_WORLD))
             lev = (/(L, L=1,KM_WORLD)/)
             status = nf_put_var(UNIT, levid, lev)
             status = nf_put_att_text(UNIT, levid, "units"    ,  5, "layer")
             status = nf_put_att_text(UNIT, levid, "long_name", 24, "sigma at layer midpoints")
             status = nf_put_att_text(UNIT, levid, "standard_name", 43, "atmosphere_hybrid_sigma_pressure_coordinate")
             status = nf_put_att_text(UNIT, levid, "coordinate", 3, "eta")
             status = nf_put_att_text(UNIT, levid, "formulaTerms", 27, "ap: ak b: bk ps: ps p0: p00")
             status = nf_put_att_text(UNIT, levid, "positive", 4, "down")
             deallocate(lev)
          endif
          if (Have_VLocationEdge) then
             ! Edges variable
             KM_World = arrdes%lm_World
             status = NF_DEF_DIM(UNIT, 'edges', KM_WORLD+1, edgedim)
             status = nf_def_var(UNIT, "edges", NF_DOUBLE, 1, edgedim, edgeid)
             if (status /= nf_noerr) then
                print*,'Error defining edges',status
                print*, NF_STRERROR(status)
                VERIFY_(STATUS)
             endif
             allocate(edges(KM_WORLD+1))
             edges = (/(L, L=1,KM_WORLD+1)/)
             status = nf_put_var(UNIT, edgeid, edges)
             if (status /= nf_noerr) then
                print*,'Error putting edges ',status,edgeid,unit
                print*, NF_STRERROR(status)
                VERIFY_(STATUS)
             endif
             status = nf_put_att_text(UNIT, edgeid, "units"    ,  5, "level")
             if (status /= nf_noerr) then
                print*,'Error putting units on edges variable ',status
                print*, NF_STRERROR(status)
                VERIFY_(STATUS)
             endif
             status = nf_put_att_text(UNIT, edgeid, "long_name", 20, "sigma at layer edges")
             status = nf_put_att_text(UNIT, edgeid, "standard_name", 43, "atmosphere_hybrid_sigma_pressure_coordinate")
             status = nf_put_att_text(UNIT, edgeid, "coordinate", 3, "eta")
             status = nf_put_att_text(UNIT, edgeid, "formulaTerms", 27, "ap: ak b: bk ps: ps p0: p00")
             status = nf_put_att_text(UNIT, edgeid, "positive", 4, "down")
             deallocate(edges)
          endif
       endif

       if (Have_TileOnly .or. Have_TileTile) then
          status = NF_DEF_DIM(UNIT, 'tile'   ,   arrdes%IM_WORLD, tiledim)
          if(Have_TileTile) status = NF_DEF_DIM(UNIT, 'subtile'  ,   arrdes%JM_WORLD, subtiledim)
       endif

       if (ungrid_dim_max_size /=0) then
          do i=1,n_unique_ungrid_dims
             if (i < 10) then
                write(ungrid_dim_name, '(A11,I1)')"unknown_dim",i
             else if (i > 9 .and. i < 100) then
                write(ungrid_dim_name, '(A11,I2)')"unknown_dim",i
             else if (i > 99 .and. i < 1000) then
                write(ungrid_dim_name, '(A11,I3)')"unknown_dim",i
             end if
             status = NF_DEF_DIM(UNIT,trim(ungrid_dim_name),unique_ungrid_dims(i), ungriddim(i))
          end do 
       endif

       ! Time variable
       status = NF_DEF_DIM(UNIT, 'time' ,          1, tdim)
       status = nf_def_var(UNIT, 'time', NF_DOUBLE, 1, tdim, tid)

       call ESMF_ClockGet ( clock,  currTime=CurrentTime ,rc=STATUS )
       VERIFY_(STATUS)
       call ESMF_TimeGet  ( CurrentTime, timeString=TimeString, rc=status )
       VERIFY_(STATUS)


       TimeUnits = "minutes since "//timestring( 1: 10)//" "//timestring(12:19)
       status = nf_put_var(UNIT, tid, 0.d0)
       status = nf_put_att_text(UNIT, tid, 'units', len_trim(TimeUnits), trim(TimeUnits))

       allocate(DIMS(1), stat=STATUS)
       VERIFY_(STATUS)
       allocate(LOCATION(1), stat=STATUS)
       VERIFY_(STATUS)

       do i=1,nVars
          call ESMF_FieldBundleGet(Bundle,fieldIndex=I, field=field, rc=status)
          VERIFY_(STATUS)
          call ESMF_AttributeGet(FIELD, NAME='LONG_NAME'   , VALUE=LONG_NAME , rc=status)
          VERIFY_(STATUS)
          call ESMF_AttributeGet(FIELD, NAME='UNITS'       , VALUE=UNITS     , rc=status)
          VERIFY_(STATUS)
          call ESMF_AttributeGet(field, NAME='DIMS'        , VALUE=DIMS(1)      , rc=status)
          VERIFY_(STATUS)
          call ESMF_AttributeGet(field, NAME="VLOCATION" , VALUE=LOCATION(1)  , RC=STATUS)
          if ( status /= 0 ) LOCATION(1) = MAPL_VLocationNone
          call ESMF_FieldGet    (FIELD, ARRAY=array, name=FieldName,  RC=STATUS)
          VERIFY_(STATUS)
          ! Check for old style aerosol names
          ind= index(FieldName, '::')
          if (ind> 0) then
             FieldName = trim(FieldName(ind+2:))
          end if
          ! Extract some info from the array and define variables accordingly
          call ESMF_ArrayGet    (array, typekind=tk, rank=arrayRank,  RC=STATUS)
          VERIFY_(STATUS)
   !ALT                if (tk .eq. ESMF_TYPEKIND_I1) DataType = NF_BYTE
   !ALT                if (tk .eq. ESMF_TYPEKIND_I2) DataType = NF_SHORT
          if (tk .eq. ESMF_TYPEKIND_I4) DataType = NF_INT
          if (tk .eq. ESMF_TYPEKIND_R4) DataType = NF_FLOAT
          if (tk .eq. ESMF_TYPEKIND_R8) DataType = NF_DOUBLE

          if (arrayRank == 1) then
             if (DIMS(1)==MAPL_DimsVertOnly) then
                if (LOCATION(1) == MAPL_VLocationCenter) then
                   STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 1, levdim, varid)
                   if (status /= nf_noerr) then
                      print*,'Error defining variable ',status, trim(FieldName)
                      print*, NF_STRERROR(status)
                      VERIFY_(STATUS)
                   endif
                elseif(LOCATION(1) == MAPL_VLocationEdge) then
                   STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 1, edgedim, varid)
                   if (status /= nf_noerr) then
                      print*,'Error defining variable ',status, trim(FieldName)
                      print*, NF_STRERROR(status)
                      VERIFY_(STATUS)
                   endif
                else
                   print *, 'ERROR: LOCATION not recognized for rank 1'
                   ASSERT_(.false.)
                endif
             elseif(DIMS(1)==MAPL_DimsTileOnly) then
                STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 1, tiledim, varid)
                if (status /= nf_noerr) then
                   print*,'Error defining variable ',status, trim(FieldName)
                   print*, NF_STRERROR(status)
                   VERIFY_(STATUS)
                endif
             else
                print *, 'ERROR: blah blah blah'
                ASSERT_(.false.)
             endif
          else if(arrayRank == 2) then
             if (DIMS(1)==MAPL_DimsHorzOnly) then
                STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 2, (/londim,latdim/), varid)
                if (status /= nf_noerr) then
                   print*,'Error defining variable ',status, trim(FieldName)
                   print*, NF_STRERROR(status)
                   VERIFY_(STATUS)
                endif
             else if(DIMS(1)==MAPL_DimsTileTile) then
                STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 2, (/tiledim,subtiledim/), varid)
                if (status /= nf_noerr) then
                   print*,'Error defining variable ',status, trim(FieldName)
                   print*, NF_STRERROR(status)
                   VERIFY_(STATUS)
                endif
             elseif(DIMS(1)==MAPL_DimsTileOnly) then
                do j=1,n_unique_ungrid_dims
                   if (ungrid_dims(i,1) == unique_ungrid_dims(j) ) then
                      myungriddim1 = j
                      exit
                   end if
                end do
                STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 2, (/tiledim,ungriddim(myungriddim1)/), varid)
                if (status /= nf_noerr) then 
                   print*,'Error defining variable',status,trim(FieldName)
                   print*, NF_STRERROR(status)
                   VERIFY_(STATUS)
                end if
             else
                print *, 'ERROR: DIMS not recognized for rank 2 variable ',trim(FieldName), DIMS(1)
                ASSERT_(.false.)
             endif

          else if(arrayRank == 3) then
             if (DIMS(1)==MAPL_DimsHorzVert) then
                if (LOCATION(1) == MAPL_VLocationCenter) then
                   STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 3, (/londim,latdim,levdim/), varid)
                   if (status /= nf_noerr) then
                      print*,'Error defining variable ',status, trim(FieldName)
                      print*, NF_STRERROR(status)
                      VERIFY_(STATUS)
                   endif
                else if(LOCATION(1) == MAPL_VLocationEdge) then
                   STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 3, (/londim,latdim,edgedim/), varid)
                   if (status /= nf_noerr) then
                      print*,'Error defining variable ',status, trim(FieldName)
                      print*, NF_STRERROR(status)
                      VERIFY_(STATUS)
                   endif
                else
                   print *, 'ERROR: LOCATION not recognized for rank 3'
                   ASSERT_(.false.)
                endif
             else if(DIMS(1)==MAPL_DimsHorzOnly) then
                do j=1,n_unique_ungrid_dims
                   if (ungrid_dims(i,1) == unique_ungrid_dims(j) ) then
                      myungriddim1 = j
                      exit
                   end if
                end do
                STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 3, (/londim,latdim,ungriddim(myungriddim1)/), varid)
                if (status /= nf_noerr) then
                   print*,'Error defining variable',status, trim(FieldName)
                   print*, NF_STRERROR(status)
                   VERIFY_(STATUS)
                endif
             else if (DIMS(1)==MAPL_DimsTileOnly) then
                do j=1,n_unique_ungrid_dims
                   if (ungrid_dims(i,1) == unique_ungrid_dims(j) ) then
                      myungriddim1 = j
                      exit
                   end if
                end do
                do j=1,n_unique_ungrid_dims
                   if (ungrid_dims(i,2) == unique_ungrid_dims(j) ) then
                      myungriddim2 = j
                      exit
                   end if
                end do
                STATUS = NF_DEF_VAR(UNIT, trim(FieldName), DataType, 3, (/tiledim,ungriddim(myungriddim1),ungriddim(myungriddim2)/), varid)
                if (status /= nf_noerr) then
                   print*,'Error defining variable',status, trim(FieldName)
                   print*, NF_STRERROR(status)
                   VERIFY_(STATUS)
                endif
             else if(DIMS(1)/=MAPL_DimsHorzVert .and. DIMS(1)/=MAPL_DimsHorzOnly) then
                print *, 'ERROR: What else could it be'
                ASSERT_(.false.)
             endif
          else
             print *, 'ERROR: arrayRank ',arrayRank, ' not supported'
             ASSERT_(.false.)
          endif

          STATUS = NF_PUT_ATT_TEXT(UNIT, varid, 'long_name', len_trim(LONG_NAME), trim(LONG_NAME) )
          STATUS = NF_PUT_ATT_TEXT(UNIT, varid, 'units', len_trim(UNITS), trim(UNITS))
          STATUS = NF_DEF_VAR_CHUNKING(UNIT, varid, NF_CONTIGUOUS, (/0,0,0,0/))
          if (status /= nf_noerr) then
             print*,'Error setting contiguous ',status, trim(FieldName)
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif
          STATUS = NF_DEF_VAR_FILL    (UNIT, varid, NF_NOFILL, C_NULL_PTR)
          if (status /= nf_noerr) then
             print*,'Error setting no_fill ',status
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif

       enddo

       if (ungrid_dim_max_size /= 0) then
          deallocate(unique_ungrid_dims)
          deallocate(ungriddim)
       end if
       deallocate(ungrid_dims)

    endif !am writer

    do l=1,nVars
       call ESMF_FieldBundleGet(bundle, fieldIndex=l, field=field, rc=status)
       VERIFY_(STATUS)
       call ESMF_FieldGet(field,name=FieldName,rc=status)
       VERIFY_(STATUS)
       ! Check for old style aerosol names
       ind= index(FieldName, '::')
       if (ind> 0) then
          FieldName = trim(FieldName(ind+2:))
       end if

       if (arrdes%writers_comm/=MPI_COMM_NULL) then
          STATUS = NF_INQ_VARID(UNIT, trim(FieldName), varid)
          if (status /= nf_noerr) then
             print*,trim(IAm),': Error getting varid for variable ',trim(FieldName), status,unit
             print*, NF_STRERROR(status)
             VERIFY_(STATUS)
          endif
       endif

       if (.not.associated(MASK)) then
          call ESMF_AttributeGet(field, name='DIMS', value=MAPL_DIMS, rc=status)
          VERIFY_(STATUS)
          if (MAPL_DIMS == MAPL_DimsTileOnly .or. MAPL_DIMS == MAPL_DimsTileTile) then
             call ESMF_FieldGet   (field, grid=grid, rc=status)
             VERIFY_(STATUS)
             call MAPL_TileMaskGet(grid,  mask, rc=status)
             VERIFY_(STATUS)
          endif
       endif

       call MAPL_FieldWrite(unit, field, arrdes=arrdes, varid=varid, HomePE=mask, rc=status)
       VERIFY_(STATUS)
          
    enddo

    call closefile_ncpar_write(filename,arrdes,unit,info,RC=STATUS)
    VERIFY_(STATUS)

    if(associated(MASK)) deallocate(MASK)

    RETURN_(ESMF_SUCCESS)

  end subroutine MAPL_BundleWriteNCPar

  subroutine MAPL_StateVarWriteNCPar(filename, STATE, ARRDES, CLOCK, NAME, forceWriteNoRestart, RC)
    character(len=*)            , intent(IN   ) :: filename
    type (ESMF_State)           , intent(IN   ) :: STATE
    type(ArrDescr)              , intent(INOUT) :: ARRDES
    type(ESMF_Clock)            , intent(IN   ) :: CLOCK
    character(len=*),   optional, intent(IN   ) :: NAME
    logical,            optional, intent(IN   ) :: forceWriteNoRestart
    integer,            optional, intent(  OUT) :: RC

! Local vars
    type (ESMF_FieldBundle)              :: bundle
    type (ESMF_Field)                    :: field
    integer                              :: status
    integer                              :: I, J, ITEMCOUNT, varid, ind
    logical                              :: FOUND
    type (ESMF_StateItem_Flag), pointer  :: ITEMTYPES(:)
    character(len=ESMF_MAXSTR ), pointer :: ITEMNAMES(:)
    logical, pointer                     :: DOIT(:)
    character(len=ESMF_MAXSTR)           :: IAm='MAPL_StateVarWriteNCPar'
    logical                              :: skipWriting
    integer                              :: RST
    character(len=ESMF_MAXSTR)           :: FieldName,BundleName,StateName
    logical                              :: forceWriteNoRestart_

    type (ESMF_Field)                  :: new_field
    type (ESMF_FieldBundle)            :: bundle_write
    integer                            :: nBundle
    integer                            :: attr

    call ESMF_StateGet(STATE,ITEMCOUNT=ITEMCOUNT,RC=STATUS)
    VERIFY_(STATUS)

    ASSERT_(ITEMCOUNT>0)

    allocate(ITEMNAMES(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)
    allocate(ITEMTYPES(ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)
    allocate(DOIT     (ITEMCOUNT),STAT=STATUS)
    VERIFY_(STATUS)

    call ESMF_StateGet(STATE,ITEMNAMELIST=ITEMNAMES,ITEMTYPELIST=ITEMTYPES,RC=STATUS)
    VERIFY_(STATUS)
    call ESMF_StateGet(STATE,name=StateName,RC=STATUS)
    VERIFY_(STATUS)

    forceWriteNoRestart_ = .false.
    if(present(forceWriteNoRestart)) then
       forceWriteNoRestart_ = forceWriteNoRestart
    endif

    if(present(NAME)) then
       DOIT = ITEMNAMES==NAME
       ASSERT_(count(DOIT)/=0)
    else
       DOIT = .true.
    endif

    bundle_write = ESMF_FieldBundleCreate(name=trim(StateName),rc=STATUS)
    VERIFY_(STATUS)
    call ESMF_FieldBundleSet(bundle_write,grid=arrdes%grid,rc=STATUS)
    VERIFY_(STATUS)

    DO I = 1, ITEMCOUNT

    
       IF (DOIT     (I)) then

          IF (ITEMTYPES(I) == ESMF_StateItem_FieldBundle) then
             call ESMF_StateGet(state, itemnames(i), bundle, rc=status)
             VERIFY_(STATUS)

             skipWriting = .false.
             if (.not. forceWriteNoRestart_) then
                call ESMF_AttributeGet(bundle, name='RESTART', value=RST, rc=status)
                if (STATUS == ESMF_SUCCESS) then
                   skipWriting = (RST == 0)
                end if
             else
                skipWriting = .true.
             end if
             if (skipWriting) cycle
             call ESMF_FieldBundleGet(bundle, fieldCount=nBundle, rc=STATUS)
             VERIFY_(STATUS)
             call ESMF_FieldBundleGet(bundle, name=BundleName, rc=status)
             VERIFY_(STATUS)
             DO J = 1,nBundle
               call ESMF_FieldBundleGet(bundle, fieldIndex=J, field=field, rc=status)
               VERIFY_(STATUS)
               call ESMF_FieldGet(field,name=FieldName,rc=status)
               VERIFY_(STATUS)
               ! Tack on BundleName to distiguish duplicate FieldNames in different Bundles (PCHEM for instance)
               FieldName = trim(BundleName) //'_'// trim(FieldName)
               new_field = MAPL_FieldCreate(Field,FieldName,rc=status)
               VERIFY_(STATUS)
               call MAPL_FieldBundleAdd(bundle_write,new_field,rc=status)
               VERIFY_(STATUS)
             ENDDO

          ELSE IF (ITEMTYPES(I) == ESMF_StateItem_Field) THEN
             call ESMF_StateGet(state, itemnames(i), field, rc=status)
             VERIFY_(STATUS)

             skipWriting = .false.
             if (.not. forceWriteNoRestart_) then
                call ESMF_AttributeGet(field, name='RESTART', value=RST, rc=status)
                if (STATUS == ESMF_SUCCESS) then
                   skipWriting = (RST == 0)
                end if
             else
                skipWriting = .true.
             end if
             if (skipWriting) cycle

             call ESMF_AttributeGet(field, name='doNotAllocate', value=RST, rc=status)
             if (STATUS == ESMF_SUCCESS) then
                skipWriting = (RST /= 0)
             endif
             if (skipWriting) cycle

             call MAPL_FieldBundleAdd(bundle_write,field,rc=status)
             VERIFY_(STATUS)

          end IF
       END IF

    END DO

    deallocate(ITEMNAMES)
    deallocate(ITEMTYPES)
    deallocate(DOIT     )

    call MAPL_BundleWriteNCPar(Bundle_Write, arrdes, CLOCK, filename, rc=status)
    VERIFY_(STATUS)

    RETURN_(ESMF_SUCCESS)

  end subroutine MAPL_StateVarWriteNCPar

  subroutine MAPL_NCParVarInfoGet(filename,fileVarSpec,Grid,arrDes,rc)
    character(len=*), intent(in)     :: filename
    type(MAPL_NCparVarSpec), intent(inout) :: fileVarSpec
    type(ESMF_Grid), intent(inout)     :: Grid
    type(arrDescr), intent(in)      :: arrDes
    integer, intent(out), optional   :: rc

    character(len=*), parameter :: Iam="MAPL_NCParVarInfoGet"
    integer :: status

    integer                :: unit
    integer                     :: ndims
    integer                     :: counts(5)
    integer                     :: dims(3)
    integer                     :: dimLen
    integer, parameter          :: nvnames=8
    character(len=ESMF_MAXSTR)  :: dimName
    character(len=ESMF_MAXSTR)  :: vnames(nvnames)
    character(len=ESMF_MAXSTR)  :: vname
    
    integer, allocatable          :: varid_list(:)
    logical                       :: dimVar
    integer                       :: nvars,varnum
    integer                       :: i,j
    integer                       :: dimids(NF_MAX_VAR_DIMS)

    vnames(1)="lat"
    vnames(2)="lon"
    vnames(3)="edges"
    vnames(4)="lev"
    vnames(5)="tile"
    vnames(6)="subtile"
    vnames(7)="unknown_dim"
    vnames(8)="time"

    status = NF_OPEN(TRIM(filename),NF_NOWRITE,unit)
    if (STATUS /= NF_NOERR) then
       print*,"Error opening file ", trim(filename), status
       print*, NF_STRERROR(STATUS)
       VERIFY_(STATUS)
    endif

    call MAPL_GridGet(grid, globalCellCountPerDim=COUNTS, &
       localCellCountPerDim=DIMS, RC=STATUS)
    VERIFY_(STATUS)

    status = nf_inq_ndims(unit,ndims)
    if (arrDes%tile) then

      do i = 1,ndims
        status = nf_inq_dimname(unit,i,dimName)
        status = nf_inq_dimlen(unit,i,dimLen)
        if (trim(dimName)=="tile") then
          if (dimLen /= counts(1)) then
            write(*,*)"NC4 file not compatible with grid"
            ASSERT_(.false.)
          endif
        endif
        if (ndims > 1 .and. trim(dimName)=="subtile") then
          if (dimLen /= counts(2)) then
            write(*,*)"NC4 file not compatible with grid"
            ASSERT_(.false.)
          endif
        endif
      enddo
      
    else

      do i=1,ndims
        status = nf_inq_dimname(unit,i,dimName)
        status = nf_inq_dimlen(unit,i,dimLen)
        if (trim(dimName)=="lon") then
          if (dimLen /= counts(1)) then
            write(*,*)"NC4 file not compatible with grid"
            ASSERT_(.false.)
          endif
        endif
        if (trim(dimName)=="lat") then
          if (dimLen /= counts(2)) then
            write(*,*)"NC4 file not compatible with grid"
            ASSERT_(.false.)
          endif
        endif
        if (trim(dimName)=="egdes") then
          if ( (dimLen-1) /= counts(3)) then
            write(*,*)"NC4 file not compatible with grid"
            ASSERT_(.false.)
           endif
        endif    
        if (trim(dimName)=="lev") then
          if ( dimLen /= counts(3)) then
            write(*,*)"NC4 file not compatible with grid"
            ASSERT_(.false.)
          endif
        endif    
        if (trim(dimName)=="unknown_dim") then
            write(*,*)"Readbundlencpar cant read ungridded dim with self allocation of memory"
            ASSERT_(.false.)
        endif
      enddo

    endif ! tile

    varnum = 0
    status = nf_inq_nvars(unit, nvars)
    allocate(varid_list(nvars))
    do i=1, nvars

      status = nf_inq_varname(unit,i,vname)
         
      dimVar=.false.
      do j=1 , nvnames
        if (trim(vname) == trim(vnames(j))) dimVar = .true.
      enddo
      if (.not.dimVar) then
        varnum=varnum+1
        varid_list(varnum)=i
      endif
    enddo

    fileVarSpec%nvars = varnum
    allocate(fileVarSpec%vname(varnum))
    allocate(fileVarSpec%vdim(varnum))
    allocate(fileVarSpec%vlocation(varnum))
    allocate(fileVarSpec%vunit(varnum))
    allocate(fileVarSpec%vtitle(varnum))

    status = nf_inq_nvars(unit, nvars)
    do i=1, varnum


      status = nf_inq_varndims(unit,varid_list(i),ndims)
      status = nf_inq_varname(unit,varid_list(i),fileVarSpec%vname(i))
      if (arrdes%tile) then
        if (ndims == 1) then
          fileVarSpec%vdim(i) = MAPL_DimsTileOnly
          fileVarSpec%vlocation(i) = MAPL_VLocationNone
        elseif (ndims == 2) then
          fileVarSpec%vdim(i) = MAPL_DimsTileTile
          fileVarSpec%vlocation(i) = MAPL_VLocationNone
        endif
      endif
      if (.not.arrdes%tile) then
        if (ndims == 1) then
          write(*,*)"ReadbundleNCPar cant read 1-D variable with self allocation of memory"
          ASSERT_(.FALSE.)
        else if (ndims == 2) then
          fileVarSpec%vdim(i) = MAPL_DimsHorzOnly
          fileVarSpec%vlocation(i) = MAPL_VLocationNone
        else if (ndims == 3) then
          fileVarSpec%vdim(i) = MAPL_DimsHorzVert
          status = nf_inq_vardimid(unit,varid_list(i),dimids)
          do j =1,ndims
            status = nf_inq_dimname(unit,j,dimName)
            if (trim(dimName) == "lev") fileVarSpec%vlocation(i) = MAPL_VLocationCenter
            if (trim(dimName) == "edges") fileVarSpec%vlocation(i) = MAPL_VlocationEdge
          enddo
        endif
      endif
      vname = ""
      status = nf_get_att_text(unit,varid_list(i),"long_name",vname)
      fileVarSpec%vtitle(i) = vname
      vname = ""
      status = nf_get_att_text(unit,varid_list(i),"units",vname)
      fileVarSpec%vunit(i) = vname
    enddo

    deallocate(varid_list)

    status = NF_CLOSE(unit)
    if (STATUS /= NF_NOERR) then
       print*,"Error closing file ", trim(filename), status
       print*, NF_STRERROR(STATUS)
       VERIFY_(STATUS)
    endif
  
  end subroutine MAPL_NCParVarInfoGet

end module MAPL_IOMod
