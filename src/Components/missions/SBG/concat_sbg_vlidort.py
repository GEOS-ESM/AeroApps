#!/usr/bin/env python3

"""
    wrapper to concatenate files generated by sbg_vlidort.py
"""

import os
import subprocess
import shutil
from   datetime        import datetime, timedelta
from   dateutil.parser import parse         as isoparser
import argparse
import numpy as np
import time
from   MAPL.config     import Config


class WORKSPACE(object):
    """ Create slurm scripts for running run_imager_sampler.py """
    def __init__(self,args):

        self.Date      = isoparser(args.iso_t1)
        self.enddate   = isoparser(args.iso_t2)
        self.dti       = timedelta(minutes=args.dti_mins)
        self.dto       = timedelta(minutes=args.dto_mins)

        self.track_pcf   = args.track_pcf
        self.orbit_pcf   = args.orbit_pcf
        self.inst_pcf    = args.inst_pcf
        
        # get number of channels
        cf        = Config(args.inst_pcf,delim=' = ')
        chs       = cf('channels')
        chs       = np.array(chs.split(':')).astype(int)
        self.nch  = int(1 + (chs[1]-chs[0])/chs[2])

        # get filename template
        cf             = Config(args.track_pcf,delim=' = ')
        self.outTemplate    = cf('outDir')    + '/' + cf('outFile')

        # get orbit name
        cf             = Config(args.orbit_pcf,delim=' = ')
        self.orbitname      = cf('orbitname')
        self.ORBITNAME      = self.orbitname.upper()

        # get instrument name
        cf             = Config(args.inst_pcf,delim=' = ')
        self.instname       = cf('instname')

        # get list of outfiles
        self.concat_time_outfiles()

        # concat by time
        self.concat_time()

    def concat_time_outfiles(self):
        sdate = self.Date
        self.outfiles = []
        self.outdates = []
        # create directory
        while sdate < self.enddate:
            nymd  = str(sdate.date()).replace('-','')
            year  = str(sdate.year)
            month = str(sdate.month).zfill(2)
            day   = str(sdate.day).zfill(2)
            hour  = str(sdate.hour).zfill(2)
            minute = str(sdate.minute).zfill(2)


            outFile    = self.outTemplate.replace('%year',year).replace('%month',month).replace('%day',day).replace('%nymd',nymd).replace('%hour',hour).replace('%minute',minute).replace('%orbitname',self.orbitname).replace('%ORBITNAME',self.ORBITNAME).replace('%instname',self.instname)

            self.outfiles.append(outFile)
            self.outdates.append(sdate)

            sdate += self.dto

    def concat_time(self):
        for ich in np.arange(self.nch):
            for outfile,sdate in zip(self.outfiles,self.outdates):
                edate = sdate + self.dto
                infiles = []
                while sdate < edate:
                    nymd  = str(sdate.date()).replace('-','')
                    year  = str(sdate.year)
                    month = str(sdate.month).zfill(2)
                    day   = str(sdate.day).zfill(2)
                    hour  = str(sdate.hour).zfill(2)
                    minute = str(sdate.minute).zfill(2)

                    inFile = self.outTemplate.replace('%year',year).replace('%month',month).replace('%day',day).replace('%nymd',nymd).replace('%hour',hour).replace('%minute',minute).replace('%orbitname',self.orbitname).replace('%ORBITNAME',self.ORBITNAME).replace('%instname',self.instname).replace('%band',str(ich).zfill(3))

                    infiles.append(inFile) 
                    sdate += self.dti
                self.infile = infiles
                self.outfile = outfile 
                # make time the record dimension
                devnull = open(os.devnull, 'w')
                for fname in infiles:
                    cmd = '$BASEDIR/Linux/bin/ncks -O --mk_rec_dmn time {} {}'.format(fname,fname)
                    stat = subprocess.call(cmd, shell=True, stdout=devnull)

                # concantenate the files
                self.outfile = outfile.replace('%band',str(ich).zfill(3))
#                cmd = '$BASEDIR/Linux/bin/ncrcat {} {}'.format(' '.join(infiles),outfile)
#                stat = subprocess.call(cmd, shell=True, stdout=devnull)
   
    def destroy_workspace(self,i,jobid):
        os.chdir(self.dirstring[i])

        if self.profile is False:

            errfile = 'slurm_' +jobid + '.err'
            os.remove(errfile)        
            outfile = 'slurm_' +jobid + '.out'
            os.remove(outfile)        

            outfile = 'slurm_' +jobid + '_py.out'
            os.remove(outfile)     

            os.remove(self.slurm)
            os.remove(self.track_pcf)
            os.remove(self.orbit_pcf)
            os.remove(self.inst_pcf)
            os.remove('Aod_EOS.rc')

        # remove symlinks
        source = ['sbg_vlidort.py','setup_env'] 
        for src in source:
            os.remove(src)

        os.chdir(self.cwd)
        if self.profile is False:
            os.rmdir(self.dirstring[i])


if __name__ == '__main__':
    
    #Defaults
    dti_mins  = 1
    dto_mins  = 5

    parser = argparse.ArgumentParser()
    parser.add_argument("iso_t1",help='starting iso time')
    parser.add_argument("iso_t2",help='ending iso time')

    parser.add_argument("track_pcf",
                        help="prep config file with track input file names")

    parser.add_argument("orbit_pcf",
                        help="prep config file with orbit variables")

    parser.add_argument("inst_pcf",
                        help="prep config file with instrument variables")

    parser.add_argument("--dti_mins", default=dti_mins, type=int,
                        help="Timestep in minutes for each input file (default=%i)"%dti_mins)

    parser.add_argument("--dto_mins", default=dto_mins, type=int,
                        help="Timestep in minutes for each output file (default=%i)"%dto_mins)

    parser.add_argument("-r", "--dryrun",action="store_true",
                        help="do a dry run (default=False).") 


    args = parser.parse_args()

    workspace = WORKSPACE(args)


