#!/usr/bin/env perl
########################################################################
#
#  Name: pyg_modules_perl_wrapper
#
#  Purposes - This is a perl wrapper for the pyg_modules csh script.
#
#  Notes:
#  1. You cannot "source" the csh file, pyg_modules, from a perl
#     script.
#  2. Instead use the following in your perl script:
#     #--------------------------------
#        do "pyg_modules_perl_wrapper";
#     #--------------------------------
#  3. The environment variable, FVROOT, must be set prior to calling script.
#
#  REVISION HISTORY
#  17Dec2007  Stassi  Initial version of code
#  23Apr2009  Stassi  Broke scripts into subprograms 
#
########################################################################
use strict;
use warnings;

my ($scriptname, $pyg_modules);
my ($BASEDIR, @libmods, $modinit, $loadmodules);
my (@fields, $LD_LIBRARY_PATH);
my ($arch, $node);
my ($baselib, $status);

# main program
#-------------
{
    init();
    get_expected_values();
    set_env_variables();
}

#=======================================================================
# name - init
#=======================================================================
sub init {
    my ($FVROOT);
    
    # NOTE: Spell out scriptname--DO NOT USE $0 here!
    #------------------------------------------------
    $scriptname = "pyg_modules_perl_wrapper";

    # get architecture and node
    #--------------------------
    chomp($arch = `uname -s`);
    chomp($node = `uname -n`);
    print "arch: $arch\n";
    print "node: $node\n";


    # find pyg_modules csh script
    #---------------------------
    $pyg_modules = "/home/dao_ops/jardizzo/FLUID/firex-aq/ops/g5_modules";
    die ">> Error << Cannot find $pyg_modules. " unless (-e $pyg_modules);
}

#=======================================================================
# name - get_expected_values
#=======================================================================
sub get_expected_values {

    # get expected values from pyg_modules
    #------------------------------------
    chomp( $BASEDIR     = `$pyg_modules basedir` );
    chomp( @libmods     = (`$pyg_modules modules`) );
    chomp( $loadmodules = `$pyg_modules loadmodules` );
    chomp( $modinit     = `$pyg_modules modinit` );
    print "BASEDIR: $BASEDIR\n";
    print "loadmodules: $loadmodules\n";
    print "modinit: $modinit\n";

    # convert modinit script to perl
    #-------------------------------
    @fields = split "/", $modinit;
    pop @fields;
    push @fields, "perl";
    $modinit = join "/", @fields;
}

#=======================================================================
# name - set_env_variables
#=======================================================================
sub set_env_variables {

    # setenv BASEDIR
    #---------------
    print "$scriptname: Setting BASEDIR\n";
    $ENV{"BASEDIR"} = $BASEDIR;
    print "BASEDIR: $BASEDIR\n";

    # add BASEDIR lib to LD_LIBRARY_PATH, if not already there
    #---------------------------------------------------------
    $LD_LIBRARY_PATH = $ENV{"LD_LIBRARY_PATH"};
    $baselib = "$BASEDIR/$arch/lib";
    $status = index($LD_LIBRARY_PATH, $baselib);
    if ($status < 0) { $ENV{"LD_LIBRARY_PATH"} .= ":$baselib" };
 
    # load library modules
    #---------------------
    if (-e $modinit) {
        print " and modules";
        do $modinit;
        module ("purge");

        if ($loadmodules) { module ("load modules") };
        foreach ( @libmods ) { module ("load $_") };
        print " for $node\n";
    }
}
